{"title":"CS614. Advanced Algorithms. Exam 1.","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"CS614. Advanced Algorithms. Exam 1.","code-copy":true},"headingText":"CS614. Advanced Algorithms.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### Exam 1\n\n[Back to the course page](../index.qmd)\n\n:::{.callout-caution}\n\n# Remarks\n\nProblem indices on Gradescope for Problem 1 are off-by-one. Add one to the index here to match to Gradescope.\n\nErrata based on feedback from the class (thanks!) --- these changes have been made in the questions below:\n\n- Q5: it should have been $v \\in S$ and not $v \\in G$.\n- Q1.4: assume that the cycles $C$ and $D$ are edge-disjoint.\n- Q1.6: the last return statement is `G` and not `G-v` (the vertex $v$ is moved to $F$, not removed from the graph).\n:::\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. The Constrained Cycle Hitting Set (CCHS) Problem.\n\n\n:::{.callout-important icon=\"false\"} \n\n# Marks Distribution.\n_This problem is worth 20 points overall. All subproblems carry two points each except 1.9 (which is zero marks)._\n:::\n\nLet $G = (V,E)$ be a simple and undirected graph. Let $F \\subseteq V$ be a subset of vertices that we will call a _forbidden_ subset. An instance of CCHS is given by $(G,F,k)$, where $k \\in \\mathbb{Z}^+$ is a _budget_. Such an instance is a YES-instance if there exists a subset of $S \\subseteq V \\setminus F$ such that:\n\n- $|S| \\leqslant k$, and\n- $G \\setminus S$ is a forest, i.e, there are no cycles.\n\nSuch a subset is called a constrained cycle hitting set with respect to $F$. In this question, we will develop a $c^k$ algorithm for solving a CCHS instance, combining reduction and branching rules in a spirit somewhat similar to what we have done for Vertex Cover in class. \n\nOur goal will be to return a _solution_, i.e, a subset of vertices that is a constrained cycle hitting set with respect to $F$. In particular, an informal overview of our approach, detailed further in the questions below, is the following:\n\n- We will eliminate low-degree (vertices of degree at most one) vertices, and branch on high-degree vertices. \n- For the base case, we will find ourselves \"stuck\" when the graph only has vertices of degree at most two, but this can be handled in polynomial time.\n\nOur algorithm will be denoted `solve-CCHS(G,F,k)`. We begin the following straightforward rules:\n\n- If `k < 0`, return NO.\n- If $V(G) = \\emptyset$, return $\\emptyset$.\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.0 No Hope Rule\n\nSuppose $G[F]$ has a cycle $C$. Note that all vertices of $C$ belong to $F$. Then return:\n\n- NO\n- `solve-CCHS(G-v,F-v,k-1)` where $v$ is a maximum degree vertex from $C$.\n- `solve-CCHS(G-v,F-v,k-1)` where $v$ is a minimum degree vertex from $C$.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.1 Low Degree Rule.\n\nIf a vertex $v$ has degree zero or one, then return:\n\n- `solve-CCHS(G-v,F-v,k)`.\n- `solve-CCHS(G-v,F-v,k-1)`.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.2 Forced Vertex Rule.\n\nIf a vertex $v \\in G \\setminus F$ has two neighbors in a single connected component of $G[F]$, then return:\n\n- `solve-CCHS(G-v,F,k)`.\n- `solve-CCHS(G-v,F,k-1)`.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.3 High Degree Vertex Has Low Degree - Structure I\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nLet $C$ be a cycle in $G$. Which of the following scenarios are _not_ feasible?\n\n- $C \\cap F \\neq \\emptyset$ and $C \\cap (V \\setminus F) \\neq \\emptyset$\n- $C \\cap F = \\emptyset$ and $C \\cap (V \\setminus F) \\neq \\emptyset$\n- $C \\cap F \\neq \\emptyset$ and $C \\cap (V \\setminus F) = \\emptyset$\n\nPick the correct option and justify your answer briefly. \n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.4 High Degree Vertex Has Low Degree - Structure II\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nLet $C$ and $D$ be two _edge-disjoint_ cycles in $G$. Which of the following scenarios are _not_ feasible?\n\n- $C \\cap D \\neq \\emptyset$\n- $(C \\cap F) \\cap (D \\cap F) \\neq \\emptyset$\n- $(C \\cap (V\\setminus F)) \\cap (D \\cap (V \\setminus F)) \\neq \\emptyset$\n\nPick the correct option and justify your answer briefly. \n\n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.5 High Degree Vertex Has Low Degree - Rule\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nConsider the following algorithm to solve this instance:\n\n```default\ninit X = emptyset\nwhile G\\X has a cycle C:\n    let v be a vertex in C\\F:\n        add v to X\nif |X| > k:\n    return NO\nelse:\n    return X\n```\n\nWhat can you say about the procedure above?\n\n- It correctly solves the kind of CCHS questions being considered in this problem.\n- It will not be correct if there are no vertices in $C\\setminus F$, as required in line 3.\n- It will not be correct if there are two overlapping cycles in the instance.\n\nPick the correct option and justify your answer briefly. If you believe this is not the right algorithm, please suggest an alternative that works. In further questions when we refer to the _rule in problem 1.5_, we are referring to either the algorithm above or the one in your justification.\n\n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.6 The Branching Step\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1, 1.2, and 1.5 do not apply. Let $v$ be a vertex in $G \\setminus F$ of maximum degree. Now we branch as follows:\n\n**Option A.**\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\n```\n\n\n**Option B.**\n\n<!-- k-1 is superflous -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k-1) // omit v\n```\n\n\n**Option C.**\n\n<!-- X U {v} is missing -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\n```\n\n\n**Option D.**\n\n<!-- F U {v} is missing -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F,k) // omit v\n```\n\nPick the right branching strategy and justify your answer.\n\n\n:::\n\nWe summarize the overall algorithm below.\n\n```default\nIf k < 0, return NO.\nIf V(G) is empty, return the empty set.\n\nApply rules 1.0, 1.1, and 1.2.\n\nPick a vertex v in G\\F of maximum degree.\n\nIf d(v) = 2, apply rule 1.5.\nOtherwise branch according to 1.6.\n```\n\nIn the next few questions, we will analyze the running time of this algorithm. Assume that the algorithm is called with $F = \\emptyset$, i.e, there are no forbidden vertices to begin with. Fix an execution path $P$ in the branching tree^[Note that the branching tree has a node for all executions of step 1.6, with all non-branching steps executed at the node itself.] of the algorithm that does _not_ return NO. Now:\n\n- We use $S(P)$ to denote the output: note that this would consist of the set of vertices that are removed from the instance for inclusion in the solution, i.e, vertices chosen by the first branch in Step 1.6.\n\n- We use $F(P)$ to denote the set of vertices that are made forbidden along the path $P$, i.e, these are vertices chosen by the second branch in Step 1.6. \n\nNote that at the output node, the instance we have is $(G,F(P),\\ell)$ for some $\\ell \\leqslant k$, where $S(P)$ is a constrained cycle hitting set with respect to $F(P)$ of size at most $k - \\ell$. Also the number of steps in the execution path $P$ is given by $|F(P)| + |S(P)|$, since every time we branch, we either include a vertex in the solution or make it forbidden.\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.7 Degree 3 vs Leaves in Trees\n\nLet $T$ be a tree and let $X$ be the set of leaves in $T$, and let $Y$ be the set of vertices of degree three or more in $T$. Show that:\n\n$$\\sum_{v \\in Y} (d(v)-2) = |X| - 2,$$\n\nusing elementary facts about trees.\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.8 Degree Evolution\n\nFix an execution path $P$ on an instance $(G,\\emptyset,k)$ (i.e, a path from root to leaf in the branching tree associated with the algorithm when the input is $(G,\\emptyset,k)$) and consider a vertex $v$ that belongs to $F(P)$, which is to say that the vertex $v$ was included in the set of forbidden vertices at some point during the execution of the algorithm. Denote the instance at this stage of the algorithm by $(H,F,k^\\prime)$. In particular, $H$ is the graph obtained _after_ $v$ was included in $F$. Let $d(v)$ denote the degree of the vertex $v$ in the original instance $G$, and let $d^\\star(v)$ denote its degree in the graph $H$. Which of the following is true?\n\n- $3 \\leqslant d^\\star(v) \\leqslant d(v)$\n- $3 \\leqslant d^\\star(v) < d(v)$\n- $d^\\star(v) \\geqslant \\min(d(v),3)$\n- $d^\\star(v) > \\min(d(v),3)$\n\n:::\n\n:::{.callout-important icon=\"false\" collapse=\"true\"}\n\n# Problem 1.9 Successful Execution Paths are Short\n\nConsider an execution path $P$ that does not return NO. Show that $F(P) \\leqslant 3S(P)$. \n\n_This is an optional question that you can skip. It carries no points._\n\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.10 The Final Running Time\n\nCan you use the fact from the previous question to come up with an algorithm for CCHS that runs in time $O^\\star(16^k)$? Note that the $O^\\star(\\cdot)$ notation is used to hide factors that are polynomial in $n$ and $k$.\n\nHint: Use the algorithm described previously in the question, but modify it slightly. In particular, if an execution path pushes more than $3S(P)$ vertices into the forbidden set $F$, can you terminate it prematurely? Also, what is the cost of the successful execution paths?\n:::\n\n::: \n\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 2. GreedyHS [2 points]\n\nLet $U=\\left\\{x_1, \\ldots, x_n\\right\\}$ be an univere of $n$ elements. Suppose we have a family $\\mathcal{F}$ over $U$ that consists of three-sized subsets of $U$, for example:\n\n$$\n\\mathcal{F} = \\left(x_1, x_3, x_4\\right),\\left(x_2, x_3, x_7\\right),\\left(x_1, x_5, x_6\\right)\n$$\n\nWe want to find a smallest subset $X$ of $U$ such that for all sets $S \\in \\mathcal{F}$, $S \\cap X \\neq \\emptyset$.\n\nConsider the following algorithm for this problem.\n\n```default\nGreedy(U,F)\n\nInit X = emptyset\nwhile F is non-empty do:\n    Take an arbitrary set S in F.\n    Let x be an element in S\n    X = X U {x}\n    Remove all sets from F that contain x\nend while\n```\n\nWhat can you say about the worst-case approximation ratio of this algorithm?\n:::\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 3. Knapsack [2 points]\n\nConsider the knapsack problem. Given a set $X=\\left\\{x_1, \\ldots, x_n\\right\\}$ of $n$ items with weights $w\\left(x_i\\right)$ and values $v\\left(x_i\\right)$, it asks for the highest total value of items we can put into our knapsack such that the total weight of all these items is at most $W$. \n\nDescribe a 0/1-LP that models the problem correctly.\n:::\n\n\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 4. Rectangle Covering [4 Points]\n\n![Rectangle Cover Problem Example](rectpoints.png)\n\nSuppose we have a set $P=\\left\\{p_1, \\ldots, p_n\\right\\}$ of $n$ points and a set $R=\\left\\{r_1 \\ldots, r_m\\right\\}$ of $m$ rectangles, as in the image above. Each rectangle $r_i \\in R$ has a certain cost $c_i>0$ associated with it. We wish to find a subset $S \\subseteq R$ of rectangles whose cost is minimized such that the rectangles in $S$ together cover all points in $P$. \n\nWe wish to model this problem as a 0/1-LP. To this end we introduce a decision variable $x_i$ for each rectangle $r_i \\in R$, where $x_i=1$ corresponds to putting rectangle $r_i$ into $S$ and $x_i=0$ corresponds to not putting $r_i$ into $S$. otherwise. Furthermore, for a point $p_j \\in P$, define $R\\left(p_j\\right)=\\left\\{r_i \\in R: p_j \\in r_i\\right\\}$.\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n# LP for Rectangle Cover\nDescribe a 0/1-LP that models the problem correctly. \n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n# LP-based Approximation for Rectangle Cover\nDescribe a $5$-approximation assuming that each point is contained in at most 5 rectangles. \n:::\n\n:::\n\n\n\n\n:::{.callout-warning icon=\"false\"} \n\n# Problem 5. Dominating Set Reduction Rule When The Graph has No Short Cycles [2 points]\n\nSuppose $G$ is a simple, undirected graph that has no cycles of length three or four. Recall that a subset $S$ of vertices of $G$ is called a dominating set if every vertex $v$ of $G$ either belongs to $S$ or has a neighbor in $S$, in other words, $N[v] \\cap S \\neq \\emptyset$. \n\nLet $S$ be a dominating set of $G$ of size at most $k$, where $G$ is as given above (i.e, $G$ has no triangles and no cycles of length four). Show that if the degree of $v$ is more than $k$ in $G$, then $v \\in S$.\n:::\n\n\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## CS614. Advanced Algorithms. \n\n##### Exam 1\n\n[Back to the course page](../index.qmd)\n\n:::{.callout-caution}\n\n# Remarks\n\nProblem indices on Gradescope for Problem 1 are off-by-one. Add one to the index here to match to Gradescope.\n\nErrata based on feedback from the class (thanks!) --- these changes have been made in the questions below:\n\n- Q5: it should have been $v \\in S$ and not $v \\in G$.\n- Q1.4: assume that the cycles $C$ and $D$ are edge-disjoint.\n- Q1.6: the last return statement is `G` and not `G-v` (the vertex $v$ is moved to $F$, not removed from the graph).\n:::\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. The Constrained Cycle Hitting Set (CCHS) Problem.\n\n\n:::{.callout-important icon=\"false\"} \n\n# Marks Distribution.\n_This problem is worth 20 points overall. All subproblems carry two points each except 1.9 (which is zero marks)._\n:::\n\nLet $G = (V,E)$ be a simple and undirected graph. Let $F \\subseteq V$ be a subset of vertices that we will call a _forbidden_ subset. An instance of CCHS is given by $(G,F,k)$, where $k \\in \\mathbb{Z}^+$ is a _budget_. Such an instance is a YES-instance if there exists a subset of $S \\subseteq V \\setminus F$ such that:\n\n- $|S| \\leqslant k$, and\n- $G \\setminus S$ is a forest, i.e, there are no cycles.\n\nSuch a subset is called a constrained cycle hitting set with respect to $F$. In this question, we will develop a $c^k$ algorithm for solving a CCHS instance, combining reduction and branching rules in a spirit somewhat similar to what we have done for Vertex Cover in class. \n\nOur goal will be to return a _solution_, i.e, a subset of vertices that is a constrained cycle hitting set with respect to $F$. In particular, an informal overview of our approach, detailed further in the questions below, is the following:\n\n- We will eliminate low-degree (vertices of degree at most one) vertices, and branch on high-degree vertices. \n- For the base case, we will find ourselves \"stuck\" when the graph only has vertices of degree at most two, but this can be handled in polynomial time.\n\nOur algorithm will be denoted `solve-CCHS(G,F,k)`. We begin the following straightforward rules:\n\n- If `k < 0`, return NO.\n- If $V(G) = \\emptyset$, return $\\emptyset$.\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.0 No Hope Rule\n\nSuppose $G[F]$ has a cycle $C$. Note that all vertices of $C$ belong to $F$. Then return:\n\n- NO\n- `solve-CCHS(G-v,F-v,k-1)` where $v$ is a maximum degree vertex from $C$.\n- `solve-CCHS(G-v,F-v,k-1)` where $v$ is a minimum degree vertex from $C$.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.1 Low Degree Rule.\n\nIf a vertex $v$ has degree zero or one, then return:\n\n- `solve-CCHS(G-v,F-v,k)`.\n- `solve-CCHS(G-v,F-v,k-1)`.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.2 Forced Vertex Rule.\n\nIf a vertex $v \\in G \\setminus F$ has two neighbors in a single connected component of $G[F]$, then return:\n\n- `solve-CCHS(G-v,F,k)`.\n- `solve-CCHS(G-v,F,k-1)`.\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.3 High Degree Vertex Has Low Degree - Structure I\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nLet $C$ be a cycle in $G$. Which of the following scenarios are _not_ feasible?\n\n- $C \\cap F \\neq \\emptyset$ and $C \\cap (V \\setminus F) \\neq \\emptyset$\n- $C \\cap F = \\emptyset$ and $C \\cap (V \\setminus F) \\neq \\emptyset$\n- $C \\cap F \\neq \\emptyset$ and $C \\cap (V \\setminus F) = \\emptyset$\n\nPick the correct option and justify your answer briefly. \n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.4 High Degree Vertex Has Low Degree - Structure II\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nLet $C$ and $D$ be two _edge-disjoint_ cycles in $G$. Which of the following scenarios are _not_ feasible?\n\n- $C \\cap D \\neq \\emptyset$\n- $(C \\cap F) \\cap (D \\cap F) \\neq \\emptyset$\n- $(C \\cap (V\\setminus F)) \\cap (D \\cap (V \\setminus F)) \\neq \\emptyset$\n\nPick the correct option and justify your answer briefly. \n\n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.5 High Degree Vertex Has Low Degree - Rule\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that $d(v) = 2$.\n\nConsider the following algorithm to solve this instance:\n\n```default\ninit X = emptyset\nwhile G\\X has a cycle C:\n    let v be a vertex in C\\F:\n        add v to X\nif |X| > k:\n    return NO\nelse:\n    return X\n```\n\nWhat can you say about the procedure above?\n\n- It correctly solves the kind of CCHS questions being considered in this problem.\n- It will not be correct if there are no vertices in $C\\setminus F$, as required in line 3.\n- It will not be correct if there are two overlapping cycles in the instance.\n\nPick the correct option and justify your answer briefly. If you believe this is not the right algorithm, please suggest an alternative that works. In further questions when we refer to the _rule in problem 1.5_, we are referring to either the algorithm above or the one in your justification.\n\n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.6 The Branching Step\n\nLet $v$ be a vertex of maximum degree in $G \\setminus F$, and suppose $G$ is an instance where the rules from Problem 1.0, 1.1, 1.2, and 1.5 do not apply. Let $v$ be a vertex in $G \\setminus F$ of maximum degree. Now we branch as follows:\n\n**Option A.**\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\n```\n\n\n**Option B.**\n\n<!-- k-1 is superflous -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k-1) // omit v\n```\n\n\n**Option C.**\n\n<!-- X U {v} is missing -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\n```\n\n\n**Option D.**\n\n<!-- F U {v} is missing -->\n\n```default\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F,k) // omit v\n```\n\nPick the right branching strategy and justify your answer.\n\n\n:::\n\nWe summarize the overall algorithm below.\n\n```default\nIf k < 0, return NO.\nIf V(G) is empty, return the empty set.\n\nApply rules 1.0, 1.1, and 1.2.\n\nPick a vertex v in G\\F of maximum degree.\n\nIf d(v) = 2, apply rule 1.5.\nOtherwise branch according to 1.6.\n```\n\nIn the next few questions, we will analyze the running time of this algorithm. Assume that the algorithm is called with $F = \\emptyset$, i.e, there are no forbidden vertices to begin with. Fix an execution path $P$ in the branching tree^[Note that the branching tree has a node for all executions of step 1.6, with all non-branching steps executed at the node itself.] of the algorithm that does _not_ return NO. Now:\n\n- We use $S(P)$ to denote the output: note that this would consist of the set of vertices that are removed from the instance for inclusion in the solution, i.e, vertices chosen by the first branch in Step 1.6.\n\n- We use $F(P)$ to denote the set of vertices that are made forbidden along the path $P$, i.e, these are vertices chosen by the second branch in Step 1.6. \n\nNote that at the output node, the instance we have is $(G,F(P),\\ell)$ for some $\\ell \\leqslant k$, where $S(P)$ is a constrained cycle hitting set with respect to $F(P)$ of size at most $k - \\ell$. Also the number of steps in the execution path $P$ is given by $|F(P)| + |S(P)|$, since every time we branch, we either include a vertex in the solution or make it forbidden.\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.7 Degree 3 vs Leaves in Trees\n\nLet $T$ be a tree and let $X$ be the set of leaves in $T$, and let $Y$ be the set of vertices of degree three or more in $T$. Show that:\n\n$$\\sum_{v \\in Y} (d(v)-2) = |X| - 2,$$\n\nusing elementary facts about trees.\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.8 Degree Evolution\n\nFix an execution path $P$ on an instance $(G,\\emptyset,k)$ (i.e, a path from root to leaf in the branching tree associated with the algorithm when the input is $(G,\\emptyset,k)$) and consider a vertex $v$ that belongs to $F(P)$, which is to say that the vertex $v$ was included in the set of forbidden vertices at some point during the execution of the algorithm. Denote the instance at this stage of the algorithm by $(H,F,k^\\prime)$. In particular, $H$ is the graph obtained _after_ $v$ was included in $F$. Let $d(v)$ denote the degree of the vertex $v$ in the original instance $G$, and let $d^\\star(v)$ denote its degree in the graph $H$. Which of the following is true?\n\n- $3 \\leqslant d^\\star(v) \\leqslant d(v)$\n- $3 \\leqslant d^\\star(v) < d(v)$\n- $d^\\star(v) \\geqslant \\min(d(v),3)$\n- $d^\\star(v) > \\min(d(v),3)$\n\n:::\n\n:::{.callout-important icon=\"false\" collapse=\"true\"}\n\n# Problem 1.9 Successful Execution Paths are Short\n\nConsider an execution path $P$ that does not return NO. Show that $F(P) \\leqslant 3S(P)$. \n\n_This is an optional question that you can skip. It carries no points._\n\n\n:::\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n\n# Problem 1.10 The Final Running Time\n\nCan you use the fact from the previous question to come up with an algorithm for CCHS that runs in time $O^\\star(16^k)$? Note that the $O^\\star(\\cdot)$ notation is used to hide factors that are polynomial in $n$ and $k$.\n\nHint: Use the algorithm described previously in the question, but modify it slightly. In particular, if an execution path pushes more than $3S(P)$ vertices into the forbidden set $F$, can you terminate it prematurely? Also, what is the cost of the successful execution paths?\n:::\n\n::: \n\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 2. GreedyHS [2 points]\n\nLet $U=\\left\\{x_1, \\ldots, x_n\\right\\}$ be an univere of $n$ elements. Suppose we have a family $\\mathcal{F}$ over $U$ that consists of three-sized subsets of $U$, for example:\n\n$$\n\\mathcal{F} = \\left(x_1, x_3, x_4\\right),\\left(x_2, x_3, x_7\\right),\\left(x_1, x_5, x_6\\right)\n$$\n\nWe want to find a smallest subset $X$ of $U$ such that for all sets $S \\in \\mathcal{F}$, $S \\cap X \\neq \\emptyset$.\n\nConsider the following algorithm for this problem.\n\n```default\nGreedy(U,F)\n\nInit X = emptyset\nwhile F is non-empty do:\n    Take an arbitrary set S in F.\n    Let x be an element in S\n    X = X U {x}\n    Remove all sets from F that contain x\nend while\n```\n\nWhat can you say about the worst-case approximation ratio of this algorithm?\n:::\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 3. Knapsack [2 points]\n\nConsider the knapsack problem. Given a set $X=\\left\\{x_1, \\ldots, x_n\\right\\}$ of $n$ items with weights $w\\left(x_i\\right)$ and values $v\\left(x_i\\right)$, it asks for the highest total value of items we can put into our knapsack such that the total weight of all these items is at most $W$. \n\nDescribe a 0/1-LP that models the problem correctly.\n:::\n\n\n\n:::{.callout-warning icon=\"false\"}\n\n# Problem 4. Rectangle Covering [4 Points]\n\n![Rectangle Cover Problem Example](rectpoints.png)\n\nSuppose we have a set $P=\\left\\{p_1, \\ldots, p_n\\right\\}$ of $n$ points and a set $R=\\left\\{r_1 \\ldots, r_m\\right\\}$ of $m$ rectangles, as in the image above. Each rectangle $r_i \\in R$ has a certain cost $c_i>0$ associated with it. We wish to find a subset $S \\subseteq R$ of rectangles whose cost is minimized such that the rectangles in $S$ together cover all points in $P$. \n\nWe wish to model this problem as a 0/1-LP. To this end we introduce a decision variable $x_i$ for each rectangle $r_i \\in R$, where $x_i=1$ corresponds to putting rectangle $r_i$ into $S$ and $x_i=0$ corresponds to not putting $r_i$ into $S$. otherwise. Furthermore, for a point $p_j \\in P$, define $R\\left(p_j\\right)=\\left\\{r_i \\in R: p_j \\in r_i\\right\\}$.\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n# LP for Rectangle Cover\nDescribe a 0/1-LP that models the problem correctly. \n:::\n\n\n:::{.callout-warning icon=\"false\" collapse=\"true\"}\n# LP-based Approximation for Rectangle Cover\nDescribe a $5$-approximation assuming that each point is contained in at most 5 rectangles. \n:::\n\n:::\n\n\n\n\n:::{.callout-warning icon=\"false\"} \n\n# Problem 5. Dominating Set Reduction Rule When The Graph has No Short Cycles [2 points]\n\nSuppose $G$ is a simple, undirected graph that has no cycles of length three or four. Recall that a subset $S$ of vertices of $G$ is called a dominating set if every vertex $v$ of $G$ either belongs to $S$ or has a neighbor in $S$, in other words, $N[v] \\cap S \\neq \\emptyset$. \n\nLet $S$ be a dominating set of $G$ of size at most $k$, where $G$ is as given above (i.e, $G$ has no triangles and no cycles of length four). Show that if the degree of $v$ is more than $k$ in $G$, then $v \\in S$.\n:::\n\n\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"E01.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"CS614. Advanced Algorithms. Exam 1.","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
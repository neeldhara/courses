{"title":"CS614. Advanced Algorithms. L07 Quiz.","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"CS614. Advanced Algorithms. L07 Quiz.","code-copy":true},"headingText":"CS614. Advanced Algorithms.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### L07 Solutions\n\n[Back to the course page](../index.qmd)\n\n\n:::{.callout-tip icon=\"false\" minimal=\"true\"}\n# Acknowledgement\n\nThe questions in this problem set are adapted from the [textbook on Parameterized Algorithms](https://parameterized-algorithms.mimuw.edu.pl) by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n:::\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. Cluster Vertex Deletion\n\nIn the `Cluster Vertex Deletion` problem, we want to know if a simple undirected graph $G$ has a subset $S$ of at most $k$ vertices such that $G \\setminus S$ is a disjoint union of cliques.\n\n\n:::{.callout-note icon=\"false\" minimal=\"true\"}\n\n# Problem 1.1 A Branching Algorithm\n\nDesign a $3^k \\cdot n^{\\mathcal{O}(1)}$ algorithm for Cluster Vertex Deletion.\n\n\n:::\n\n:::{.callout-note icon=\"false\" minimal=\"true\"}\n\n# Problem 1.2 Decreasing the threshold\n\nDesign a $3$-approximation algorithm for Cluster Vertex Deletion.\n\n:::\n\n:::\n\n\n\n:::{.callout-caution collapse=\"true\" icon=\"false\"} \n\n# Solution\n\nAs discussed in class, the induced path on three vertices is a forbidden substructure for a cluster graph. We state and prove this fact here for completeness.\n\n---\n\n**Claim.** A graph $G$ is a disjoint union of cliques if and only if it does not contain a path on three vertices as an induced subgraph.\n\n_Proof (sketch)._ Suppose $G$ is a disjoint union of cliques, and for the sake of contradiction, suppose it has an induced path on vertices $x,y,z$ with the edges being between $x$ and $y$, and $y$ and $z$. Note that since this is an induced path, there is no edge between $x$ and $z$. Since every component of $G$ is a clique, we know that $x$ and $z$ must be in different components. However, there is a path from $x$ to $z$ via $y$, which is a contradiction.\n\nSuppose $G$ does not contain a path on three vertices as an induced subgraph. Again, for the sake of contradiction, suppose $G$ has a connected component that is not a clique. Let $(u,v)$ be a non-edge in this component. Let $P$ be a shortest path between $u$ and $v$ consisting of the vertices:\n\n$$P := \\{u, w_1, \\ldots, w_t, \\ldots v\\}.$$\n\nNotice that $t \\geqslant 1$, otherwise $(u,v)$ is an edge. Further, notice that $u, w_1, w_2$ forms an induced path of length three^[Note that it is possible that $w_2 = v$.] (if $(u,w_2)$ was an edge then we have a shorter path by omitting $w_1$, contradicting our assumption that $P$ is a shortest path between $u$ and $v$). This contradicts our assumption.\n\n---\n\nBased on this, we have the following algorithm:\n\n```default\nCVD(G,k):\n    If k <= 0 and G has an induced P3 - RETURN NO\n    If k >= 0 and G is a cluster graph - RETURN YES\n\n    Let a,b,c be vertices such that ab and bc are edges and ac is not an edge.\n\n    Return (CVD(G-a,k-1) OR CVD(G-b,k-1) OR (G-c,k-1))\n```\n\nOne can obtain a $3$-approximation by enumerating a maximal collection of _disjoint_ induced $P_3$'s and including all vertices from the collection in the solution. If the collection has size $t$, we know that any solution (and in particular, the optimal one) must contain at _least_ $t$ vertices and the output has at most $3t$ vertices. The algorithm is summarized below:\n\n```default\nCVD-3-Approx(G):\n    Init S = emptyset\n\n    While there is an induced P3 = (x,y,z) in G:\n        include (x,y,z) in S\n        G = G - (x,y,z)\n\n    return S\n```\n:::\n\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 2. Don't Satisfy Too Much!\n\nIn the `MIN-2-SAT` problem, we are given a 2-CNF formula $\\phi$ and an integer $k$, and the objective is to decide whether there exists an assignment for $\\phi$ that satisfies _at most_ $k$ clauses. \n\nShow that `MIN-2-SAT` can be solved in time $2^k n^{\\mathcal{O}(1)}$.\n\n:::\n\n\n\n:::{.callout-caution collapse=\"true\" icon=\"false\"} \n\n# Solution\n\nIf there is a variable $x$ that occurs only positively in $\\phi$, we claim that there exists an optimal assignment that sets it to $0$. Indeed, let $\\tau$ be an assignment that sets $x$ to $1$. Let $\\tau_x$ be the assignment obtained from $\\tau$ by flipping the value of $x$ from $1$ to $0$. Note that the clauses that do not contain the variable $x$ are either satisfied or falsified in both $\\tau$ and $\\tau_x$. For clauses that contain $x$, it is possible that they are satisfied by $\\tau$ but not by $\\tau_x$, but _not_ vice versa. Therefore, $\\tau_x$ falsifies at least as many clauses as $\\tau$, and we are done.\n\nBased on this, our algorithm proceeds as follows:\n\n```default\nif there is a variable x that occurs only as a positive literal:\n    set x to 0\nif there is a variable x that occurs only as a negated literal:\n    set x to 1\n```\n\nThe argument for the negated occurrences is symmetric to the one we have for positive literals.\n\nOnce we perform this preprocessing, assuming that have clauses remaining, we have the following guarantee:\n\n> Every variable has at least one positive _and_ one negated occurrence.\n\nNow we can branch exhuastively on the settings of variables; with the promise that either setting of the variable reduces our budget by at least one. The overall algorithm is summarized in the following pseudocode:\n\n```default\nMINSAT(phi,k):\n    if there is a variable x that occurs only as a positive literal:\n        set x to 0\n    if there is a variable x that occurs only as a negated literal:\n        set x to 1\n\n    if phi is empty:\n        return YES\n    if phi is not empty and k <= 0:\n        return NO\n\n    Let x be any variable that occurs in phi.\n    return MINSAT(phi|[x = TRUE],k-1) OR MINSAT(phi|[x = FALSE],k-1)\n```\n\n:::\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## CS614. Advanced Algorithms. \n\n##### L07 Solutions\n\n[Back to the course page](../index.qmd)\n\n\n:::{.callout-tip icon=\"false\" minimal=\"true\"}\n# Acknowledgement\n\nThe questions in this problem set are adapted from the [textbook on Parameterized Algorithms](https://parameterized-algorithms.mimuw.edu.pl) by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n:::\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. Cluster Vertex Deletion\n\nIn the `Cluster Vertex Deletion` problem, we want to know if a simple undirected graph $G$ has a subset $S$ of at most $k$ vertices such that $G \\setminus S$ is a disjoint union of cliques.\n\n\n:::{.callout-note icon=\"false\" minimal=\"true\"}\n\n# Problem 1.1 A Branching Algorithm\n\nDesign a $3^k \\cdot n^{\\mathcal{O}(1)}$ algorithm for Cluster Vertex Deletion.\n\n\n:::\n\n:::{.callout-note icon=\"false\" minimal=\"true\"}\n\n# Problem 1.2 Decreasing the threshold\n\nDesign a $3$-approximation algorithm for Cluster Vertex Deletion.\n\n:::\n\n:::\n\n\n\n:::{.callout-caution collapse=\"true\" icon=\"false\"} \n\n# Solution\n\nAs discussed in class, the induced path on three vertices is a forbidden substructure for a cluster graph. We state and prove this fact here for completeness.\n\n---\n\n**Claim.** A graph $G$ is a disjoint union of cliques if and only if it does not contain a path on three vertices as an induced subgraph.\n\n_Proof (sketch)._ Suppose $G$ is a disjoint union of cliques, and for the sake of contradiction, suppose it has an induced path on vertices $x,y,z$ with the edges being between $x$ and $y$, and $y$ and $z$. Note that since this is an induced path, there is no edge between $x$ and $z$. Since every component of $G$ is a clique, we know that $x$ and $z$ must be in different components. However, there is a path from $x$ to $z$ via $y$, which is a contradiction.\n\nSuppose $G$ does not contain a path on three vertices as an induced subgraph. Again, for the sake of contradiction, suppose $G$ has a connected component that is not a clique. Let $(u,v)$ be a non-edge in this component. Let $P$ be a shortest path between $u$ and $v$ consisting of the vertices:\n\n$$P := \\{u, w_1, \\ldots, w_t, \\ldots v\\}.$$\n\nNotice that $t \\geqslant 1$, otherwise $(u,v)$ is an edge. Further, notice that $u, w_1, w_2$ forms an induced path of length three^[Note that it is possible that $w_2 = v$.] (if $(u,w_2)$ was an edge then we have a shorter path by omitting $w_1$, contradicting our assumption that $P$ is a shortest path between $u$ and $v$). This contradicts our assumption.\n\n---\n\nBased on this, we have the following algorithm:\n\n```default\nCVD(G,k):\n    If k <= 0 and G has an induced P3 - RETURN NO\n    If k >= 0 and G is a cluster graph - RETURN YES\n\n    Let a,b,c be vertices such that ab and bc are edges and ac is not an edge.\n\n    Return (CVD(G-a,k-1) OR CVD(G-b,k-1) OR (G-c,k-1))\n```\n\nOne can obtain a $3$-approximation by enumerating a maximal collection of _disjoint_ induced $P_3$'s and including all vertices from the collection in the solution. If the collection has size $t$, we know that any solution (and in particular, the optimal one) must contain at _least_ $t$ vertices and the output has at most $3t$ vertices. The algorithm is summarized below:\n\n```default\nCVD-3-Approx(G):\n    Init S = emptyset\n\n    While there is an induced P3 = (x,y,z) in G:\n        include (x,y,z) in S\n        G = G - (x,y,z)\n\n    return S\n```\n:::\n\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 2. Don't Satisfy Too Much!\n\nIn the `MIN-2-SAT` problem, we are given a 2-CNF formula $\\phi$ and an integer $k$, and the objective is to decide whether there exists an assignment for $\\phi$ that satisfies _at most_ $k$ clauses. \n\nShow that `MIN-2-SAT` can be solved in time $2^k n^{\\mathcal{O}(1)}$.\n\n:::\n\n\n\n:::{.callout-caution collapse=\"true\" icon=\"false\"} \n\n# Solution\n\nIf there is a variable $x$ that occurs only positively in $\\phi$, we claim that there exists an optimal assignment that sets it to $0$. Indeed, let $\\tau$ be an assignment that sets $x$ to $1$. Let $\\tau_x$ be the assignment obtained from $\\tau$ by flipping the value of $x$ from $1$ to $0$. Note that the clauses that do not contain the variable $x$ are either satisfied or falsified in both $\\tau$ and $\\tau_x$. For clauses that contain $x$, it is possible that they are satisfied by $\\tau$ but not by $\\tau_x$, but _not_ vice versa. Therefore, $\\tau_x$ falsifies at least as many clauses as $\\tau$, and we are done.\n\nBased on this, our algorithm proceeds as follows:\n\n```default\nif there is a variable x that occurs only as a positive literal:\n    set x to 0\nif there is a variable x that occurs only as a negated literal:\n    set x to 1\n```\n\nThe argument for the negated occurrences is symmetric to the one we have for positive literals.\n\nOnce we perform this preprocessing, assuming that have clauses remaining, we have the following guarantee:\n\n> Every variable has at least one positive _and_ one negated occurrence.\n\nNow we can branch exhuastively on the settings of variables; with the promise that either setting of the variable reduces our budget by at least one. The overall algorithm is summarized in the following pseudocode:\n\n```default\nMINSAT(phi,k):\n    if there is a variable x that occurs only as a positive literal:\n        set x to 0\n    if there is a variable x that occurs only as a negated literal:\n        set x to 1\n\n    if phi is empty:\n        return YES\n    if phi is not empty and k <= 0:\n        return NO\n\n    Let x be any variable that occurs in phi.\n    return MINSAT(phi|[x = TRUE],k-1) OR MINSAT(phi|[x = FALSE],k-1)\n```\n\n:::\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"A07.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"CS614. Advanced Algorithms. L07 Quiz.","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
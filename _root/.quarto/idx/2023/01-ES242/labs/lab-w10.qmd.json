{"title":"ES242. Data Structures and Algorithms I. Week 10 Lab","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 10 Lab","code-copy":true},"headingText":"ES242. Data Structures and Algorithms I.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### Lab 10\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nBFS and DFS Puzzles\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Make It Happen\n\nYou are playing a game on a coordinate grid that has $n$ special locations that we call _magical_. If you are at a magical location $L$ at $(p,q)$, you can teleport to any other magical location that shares either the $x$-coordinate or the $y$-coordinate of $L$. These teleports are your only way of moving in the landscape of the game.\n\nYou want to ensure that if you start at any magical location, you should be able to reach any other magical location. This may not be possible with the original set of magical locations. You can open up new magical locations anywhere you like, but opening a new location is expensive. Therefore, you want to open as few new ones as possible. \n\nThe goal in this problem is to determine the _smallest_ number of _new_ magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\n### Input Format\n\n\nThe first line of input contains a single integer `n` $(1 \\leqslant n \\leqslant 100)$ — the number of magical locations. Each of the following `n` lines contains two integers $x_i$ and $y_i$ ($1 \\leqslant x_i, y_i \\leqslant 1000$) — the coordinates of the `i`-th location.\n\nThe magical locations are all distinct.\n\n### Output Format\n\nOutput the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n2\n2 1\n1 2\n```\n\n`Sample Output`\n\n```default\n1\n```\n\n`Sample Input`\n\n```default\n2\n2 1\n4 1\n```\n\n`Sample Output`\n\n```default\n0\n```\n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Switching Lines\n\nYou are trying to navigate the Ahmedabad Metro, which consists of `N` stations and `M` railway lines. \n\nThe stations are numbered `1` through  `N`. \n\nEach line is operated by a company. Each company has an identification number.\n\nThe `i`-th ($1 \\leqslant i \\leqslant M$) line connects station $p_i$ and $q_i$ bidirectionally. There is no intermediate station. This line is operated by company $c_i$.\n\nYou can change trains at a station where multiple lines are available.\n\nThe fare system used in this subway system works as follows. \n\n- As long as you only use lines that are operated by the same company, the fare remains 10 rupees. \n\n- Whenever you change to a line that is operated by a different company from the current line, you will be charged an additional fare of 10 rupees. \n\n- In a case where you changed from some company A's line to another company's line, and then you change back to company A's line, the additional fare is incurred again.\n\nYou begin at station `1` and you want to travel to station `N` using the metro. Find the minimum required fare.\n\n### Input Format\n\nThe input is given in the following format. The first line consists of two space-separated integers, $N$ and $M$. Then, $M$ lines follow. The `i`-th line consists of three space-separated numbers $p_i$, $q_i$ and $c_i$.\n\n\n```default\nN M\np1 q1 c1\n.\n.\n.\npM qM cM\n```\n\n\n### Output Format\n\nPrint the minimum required fare. If it is impossible to get to station $N$ by subway, print `-1` instead.\n\n\n\n`Sample Input 1`\n\n```default\n3 3\n1 2 1\n2 3 1\n3 1 2\n```\n\n`Sample Output 1`\n\n```default\n10\n```\n\nUse only company 1's lines.\n\n`Sample Input 2`\n\n```default\n8 11\n1 3 1\n1 4 2\n2 3 1\n2 5 1\n3 4 3\n3 6 3\n3 7 3\n4 8 4\n5 6 1\n6 7 5\n7 8 5\n```\n\n`Sample Output 2`\n\n```default\n20\n```\n  \nFirst, use company 1's lines: `1 → 3 → 2 → 5 → 6`. Then, use company 5's lines: `6 → 7 → 8`. \n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Prolonged Vacation\n\nYou have won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, you want to max out on the prize and make the trip as long as possible.\n\nIn particular, you want to fly from Ahmedabad to Mumbai while visiting the maximum number of cities. You are given the list of possible flights, and you are also given that there are **no directed cycles** in the flight network.\n\n### Input Format\n\nThe first input line has two integers $n$ and $m$: the number of cities and flights. \n\nThe cities are numbered $1,2,\\ldots,n$. \n\nCity `1` is Ahmedabad, and City `n` is Mumbai.\n\nAfter this, there are $m$ lines describing the flights. Each line has two integers $a$ and $b$: there is a flight from city $a$ to city $b$.\n\nNote that each flight is a one-way flight.\n\n\n### Output Format\n\nFirst print the maximum number of cities on the route. If there are no solutions, print \"IMPOSSIBLE\".\n\n(While this is not required for the lab submission, as a bonus problem, try to modify your code so that it also prints the cities in the order they will be visited.)\n\n\n\n`Sample Input`\n\n```default\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\n```\n\n`Sample Output`\n\n```default\n4\n```\n\nNote that `1 3 4 5` is a valid route.\n\n:::\n\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## ES242. Data Structures and Algorithms I.\n\n##### Lab 10\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nBFS and DFS Puzzles\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Make It Happen\n\nYou are playing a game on a coordinate grid that has $n$ special locations that we call _magical_. If you are at a magical location $L$ at $(p,q)$, you can teleport to any other magical location that shares either the $x$-coordinate or the $y$-coordinate of $L$. These teleports are your only way of moving in the landscape of the game.\n\nYou want to ensure that if you start at any magical location, you should be able to reach any other magical location. This may not be possible with the original set of magical locations. You can open up new magical locations anywhere you like, but opening a new location is expensive. Therefore, you want to open as few new ones as possible. \n\nThe goal in this problem is to determine the _smallest_ number of _new_ magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\n### Input Format\n\n\nThe first line of input contains a single integer `n` $(1 \\leqslant n \\leqslant 100)$ — the number of magical locations. Each of the following `n` lines contains two integers $x_i$ and $y_i$ ($1 \\leqslant x_i, y_i \\leqslant 1000$) — the coordinates of the `i`-th location.\n\nThe magical locations are all distinct.\n\n### Output Format\n\nOutput the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n2\n2 1\n1 2\n```\n\n`Sample Output`\n\n```default\n1\n```\n\n`Sample Input`\n\n```default\n2\n2 1\n4 1\n```\n\n`Sample Output`\n\n```default\n0\n```\n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Switching Lines\n\nYou are trying to navigate the Ahmedabad Metro, which consists of `N` stations and `M` railway lines. \n\nThe stations are numbered `1` through  `N`. \n\nEach line is operated by a company. Each company has an identification number.\n\nThe `i`-th ($1 \\leqslant i \\leqslant M$) line connects station $p_i$ and $q_i$ bidirectionally. There is no intermediate station. This line is operated by company $c_i$.\n\nYou can change trains at a station where multiple lines are available.\n\nThe fare system used in this subway system works as follows. \n\n- As long as you only use lines that are operated by the same company, the fare remains 10 rupees. \n\n- Whenever you change to a line that is operated by a different company from the current line, you will be charged an additional fare of 10 rupees. \n\n- In a case where you changed from some company A's line to another company's line, and then you change back to company A's line, the additional fare is incurred again.\n\nYou begin at station `1` and you want to travel to station `N` using the metro. Find the minimum required fare.\n\n### Input Format\n\nThe input is given in the following format. The first line consists of two space-separated integers, $N$ and $M$. Then, $M$ lines follow. The `i`-th line consists of three space-separated numbers $p_i$, $q_i$ and $c_i$.\n\n\n```default\nN M\np1 q1 c1\n.\n.\n.\npM qM cM\n```\n\n\n### Output Format\n\nPrint the minimum required fare. If it is impossible to get to station $N$ by subway, print `-1` instead.\n\n\n\n`Sample Input 1`\n\n```default\n3 3\n1 2 1\n2 3 1\n3 1 2\n```\n\n`Sample Output 1`\n\n```default\n10\n```\n\nUse only company 1's lines.\n\n`Sample Input 2`\n\n```default\n8 11\n1 3 1\n1 4 2\n2 3 1\n2 5 1\n3 4 3\n3 6 3\n3 7 3\n4 8 4\n5 6 1\n6 7 5\n7 8 5\n```\n\n`Sample Output 2`\n\n```default\n20\n```\n  \nFirst, use company 1's lines: `1 → 3 → 2 → 5 → 6`. Then, use company 5's lines: `6 → 7 → 8`. \n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Prolonged Vacation\n\nYou have won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, you want to max out on the prize and make the trip as long as possible.\n\nIn particular, you want to fly from Ahmedabad to Mumbai while visiting the maximum number of cities. You are given the list of possible flights, and you are also given that there are **no directed cycles** in the flight network.\n\n### Input Format\n\nThe first input line has two integers $n$ and $m$: the number of cities and flights. \n\nThe cities are numbered $1,2,\\ldots,n$. \n\nCity `1` is Ahmedabad, and City `n` is Mumbai.\n\nAfter this, there are $m$ lines describing the flights. Each line has two integers $a$ and $b$: there is a flight from city $a$ to city $b$.\n\nNote that each flight is a one-way flight.\n\n\n### Output Format\n\nFirst print the maximum number of cities on the route. If there are no solutions, print \"IMPOSSIBLE\".\n\n(While this is not required for the lab submission, as a bonus problem, try to modify your code so that it also prints the cities in the order they will be visited.)\n\n\n\n`Sample Input`\n\n```default\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\n```\n\n`Sample Output`\n\n```default\n4\n```\n\nNote that `1 3 4 5` is a valid route.\n\n:::\n\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"lab-w10.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 10 Lab","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
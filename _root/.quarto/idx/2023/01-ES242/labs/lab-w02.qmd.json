{"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","code-copy":true},"headingText":"ES242. Data Structures and Algorithms I.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### Lab 02\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nTheme: Arrays and Linked Lists\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Sorting a List\n\nYou are given a permutation $p$^[A permutation of length $n$ is an array consisting of $n$ distinct integers from 1 to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation (since $2$ appears twice in the array), and $[1,3,4]$ is also not a permutation $n=3$ but there is $4$ in the array).] of length $n$ and a positive integer $k \\leq n$.\n\nIn one operation, you:\n\n- Choose $k$ distinct elements $p_{i_1}, p_{i_2}, \\ldots, p_{i_k}$.\n\n- Remove them and then add them sorted in increasing order to the end of the permutation.\n\nFor example, if $p=[2,5,1,3,4]$ and $k=2$ and you choose $5$ and $3$ as the elements for the operation, then: \n\n$$[2,5,1,3,4] \\rightarrow[2,1,4,3,5].$$\n\nFind the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so.\n\n### Input\n\nThe first line contains a single integer $t\\left(1 \\leq t \\leq 10^4\\right)-$ the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k\\left(2 \\leq n \\leq 10^5, 1 \\leq k \\leq n\\right)$.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_n\\left(1 \\leq p_i \\leq n\\right)$. It is guaranteed that $p$ is a permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case output a single integer - the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.\n\n### Sample I/O\n\n`Sample Input`\n\n```\n4\n3 2\n1 2 3\n3 1\n3 1 2\n4 2\n1 3 2 4\n4 2\n2 3 1 4\n```\n\n`Sample Output`\n\n```\n0\n1\n1\n2\n```\n\n_Explanation_\n\nIn the first test case, the permutation is already sorted.\n\nIn the second test case, you can choose element $3$, and the permutation will become sorted as follows: $[3,1,2]\\rightarrow[1,2,3]$.\n\nIn the third test case, you can choose elements $3$ and $4$, and the permutation will become sorted as follows: $[1,3,2,4]\\rightarrow[1,2,3,4]$\n\nIn the fourth test case, it can be shown that it is impossible to sort the permutation in one operation. However, if you choose elements $2$ and $1$ in the first operation, and choose elements $3$ and $4$ in the second operation, the permutation will become sorted as follows: $[2,3,1,4]\\rightarrow[3,4,1,2]\\rightarrow[1,2,3,4]$.\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Sorting a List: Challenge the Solution\n\nConsider the following algorithm for solving the first problem: \n\n```default\ncurrent = 1\nanswer = 0\nwhile current < n:\n    if the array is sorted:\n        break\n    if current + k - 1 <= n:\n        Apply the operation to the elements [current, current+1, ..., current+k-1]\n    else:\n        Apply the operation to the elements [current, current+1, ..., n] \n    answer += 1\n    current += k\nreturn answer\n```\n\nGive an example of input where this algorithm fails.\n\nName your input file `tests.txt` and make sure it has exactly two lines in the following format:\n\n```default\nN K\np1 p2 ... pn\n```\n\nwhere the first line consists of two space-separated integers corresponding to `N` and `K` and the second line has `n` space-separated integers that form a permutation. You get a full score on this problem if your input is valid, and it causes the algorithm above to output a sub-optimal solution.\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Maintain a Network\n\nYou have just launched a social network for the IITGN community, called GYAN.\n\n$Q$ operations have been performed since GYAN was launched. The $i$-th $(1 \\leq i \\leq Q)$ operation is represented by three integers $T_i, A_i$, and $B_i$, whose meanings are as follows:\n\n- If $T_i=1$ : it means that user $A_i$ follows user $B_i$. If user $A_i$ is already following user $B_i$ at the time of this operation, it does not make any change.\n- If $T_i=2$ : it means that user $A_i$ unfollows user $B_i$. If user $A_i$ is not following user $B_i$ at the time of this operation, it does not make any change.\n- If $T_i=3$ : it means that you are asked to determine if users $A_i$ and $B_i$ are following each other. You need to print Yes if user $A_i$ is following user $B_i$ and user $B_i$ is following user $A_i$, and No otherwise.\n\nWhen the service was launched, no users were following any users.\n\nPrint the correct answers for all operations such that $T_i=3$ in ascending order of $i$.\n\n### Constraints\n\n- $2 \\leq N \\leq 10^4$\n- $1 \\leq Q \\leq 2 \\times 10^5$\n- $T_i=1,2,3(1 \\leq i \\leq Q)$\n- $1 \\leq A_i \\leq N(1 \\leq i \\leq Q)$\n- $1 \\leq B_i \\leq N(1 \\leq i \\leq Q)$\n- $A_i \\neq B_i(1 \\leq i \\leq Q)$\n- There exists $i(1 \\leq i \\leq Q)$ such that $T_i=3$.\n- All values in the input are integers.\n\n\n### Input\n\nThe input is given from Standard Input in the following format:\n$$\n\\begin{array}{lll}\nN & Q & \\\\\nT_1 & A_1 & B_1 \\\\\nT_2 & A_2 & B_2 \\\\\n\\vdots & & \\\\\nT_Q & A_Q & B_Q\n\\end{array}\n$$\n\n\n### Output\n\nPrint $X$ lines, where $X$ is the number of $i$ 's $(1 \\leq i \\leq Q)$ such that $T_i=3$. The $j$-th $(1 \\leq j \\leq X)$ line should contain the answer to the $j$-th operation such that $T_i=3$.\n\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n3 9\n1 1 2\n3 1 2\n1 2 1\n3 1 2\n1 2 3\n1 3 2\n3 1 3\n2 1 2\n3 1 2\n```\n\n`Sample Output`\n\n```default\nNo\nYes\nNo\nNo\n```\n\n`Sample Input`\n\n```default\n2 8\n1 1 2\n1 2 1\n3 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n3 1 2\n```\n\n`Sample Output`\n\n```default\nYes\nNo\n```\n\n`Sample Input`\n\n```default\n10 30\n3 1 6\n3 5 4\n1 6 1\n3 1 7\n3 8 4\n1 1 6\n2 4 3\n1 6 5\n1 5 6\n1 1 8\n1 8 1\n2 3 10\n1 7 6\n3 5 6\n1 6 7\n3 6 7\n1 9 5\n3 8 6\n3 3 8\n2 6 9\n1 7 1\n3 10 8\n2 9 2\n1 10 9\n2 6 10\n2 6 8\n3 1 6\n3 1 8\n2 8 5\n1 9 10\n```\n\n`Sample Output`\n\n```default\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nYes\n```\n\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 4. Stable Matchings\n\nThere are $n$ men and $n$ women. Each woman ranks all men in order of her preference (her first choice, her second choice, and so on). Similarly, each man sorts all women according to his preference. The goal is to arrange n marriages in such a way that if a man $m$ prefers some woman $w$ more than his wife, and $w$ prefers $m$ more then her husband a new marriage occurs between $w$ and $m$. If $w$ prefers her husband more, then she stays married to him. This problem always has a solution and your task is to find one.\n\n### Input\n\nThe first line contains a positive integer `t<=100` indicating the number of test cases. Each test case is an instance of the stable marriage problem defined above. The first line of each test case is a positive integer `n<=500` (the number of marriages to find). The next `n` lines are the woman's preferences: `i`-th line contains the number `i` (which means that this is the list given by the ith woman) and the numbers of men (the first choice of ith woman, the second choice,...). Then, the men's preferences follow in the same format.\n\n### Output\n\nFor each test case print `n` lines, where each line contains two numbers `m` and `w`, which means that the man number m and the woman number `w` should get married.\n\n### Sample IO\n\n`Sample Input`\n\n```default\n2\n4\n1 4 3 1 2\n2 2 1 3 4\n3 1 3 4 2\n4 4 3 1 2\n1 3 2 4 1\n2 2 3 1 4\n3 3 1 2 4\n4 3 2 4 1\n7\n1 3 4 2 1 6 7 5\n2 6 4 2 3 5 1 7\n3 6 3 5 7 2 4 1\n4 1 6 3 2 4 7 5\n5 1 6 5 3 4 7 2\n6 1 7 3 4 5 6 2\n7 5 6 2 4 3 7 1\n1 4 5 3 7 2 6 1\n2 5 6 4 7 3 2 1\n3 1 6 5 4 3 7 2\n4 3 5 6 7 2 4 1\n5 1 7 6 4 3 5 2\n6 6 3 7 5 2 4 1\n7 1 7 4 2 6 5 3\n```\n\n` Sample Output`\n\n```default\n1 3\n2 2\n3 1\n4 4\n1 4\n2 5\n3 1\n4 3\n5 7\n6 6\n7 2\n```\n\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 5. Linked Lists\n\n```C\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head->data   = 10;\n  middle->data = 20;\n  last->data   = 30;\n\n  //connecting each nodes. head->middle->last\n  head->next   = middle;\n  middle->next = last;\n  last->next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d->\",temp->data);\n      temp = temp->next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\n```\n\nExtend the code above to perform the following tasks:\n\n1. Read a sequence of `n` numbers from the input, $p_1, \\ldots, p_n$.\n2. Insert each of these number at a location where the linked list is still sorted when read from beginning to end.\n3. For any given input $i$, output the number in the linked list that comes before the number $i$.\n\n### Input\n\nThe first line contains a positive integer `n`.\nThe second line contains `n` space-separated integers.\nThe third line contains a positive integer `m`.\n\n### Output\n\nOutput the number that comes before `m` in the linked list. It is guaranteed that `m` is one of the numbers from the second line. If the number happens to be the first element of the list, return `-1`.\n:::\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## ES242. Data Structures and Algorithms I.\n\n##### Lab 02\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nTheme: Arrays and Linked Lists\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Sorting a List\n\nYou are given a permutation $p$^[A permutation of length $n$ is an array consisting of $n$ distinct integers from 1 to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation (since $2$ appears twice in the array), and $[1,3,4]$ is also not a permutation $n=3$ but there is $4$ in the array).] of length $n$ and a positive integer $k \\leq n$.\n\nIn one operation, you:\n\n- Choose $k$ distinct elements $p_{i_1}, p_{i_2}, \\ldots, p_{i_k}$.\n\n- Remove them and then add them sorted in increasing order to the end of the permutation.\n\nFor example, if $p=[2,5,1,3,4]$ and $k=2$ and you choose $5$ and $3$ as the elements for the operation, then: \n\n$$[2,5,1,3,4] \\rightarrow[2,1,4,3,5].$$\n\nFind the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so.\n\n### Input\n\nThe first line contains a single integer $t\\left(1 \\leq t \\leq 10^4\\right)-$ the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k\\left(2 \\leq n \\leq 10^5, 1 \\leq k \\leq n\\right)$.\n\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_n\\left(1 \\leq p_i \\leq n\\right)$. It is guaranteed that $p$ is a permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n### Output\n\nFor each test case output a single integer - the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.\n\n### Sample I/O\n\n`Sample Input`\n\n```\n4\n3 2\n1 2 3\n3 1\n3 1 2\n4 2\n1 3 2 4\n4 2\n2 3 1 4\n```\n\n`Sample Output`\n\n```\n0\n1\n1\n2\n```\n\n_Explanation_\n\nIn the first test case, the permutation is already sorted.\n\nIn the second test case, you can choose element $3$, and the permutation will become sorted as follows: $[3,1,2]\\rightarrow[1,2,3]$.\n\nIn the third test case, you can choose elements $3$ and $4$, and the permutation will become sorted as follows: $[1,3,2,4]\\rightarrow[1,2,3,4]$\n\nIn the fourth test case, it can be shown that it is impossible to sort the permutation in one operation. However, if you choose elements $2$ and $1$ in the first operation, and choose elements $3$ and $4$ in the second operation, the permutation will become sorted as follows: $[2,3,1,4]\\rightarrow[3,4,1,2]\\rightarrow[1,2,3,4]$.\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Sorting a List: Challenge the Solution\n\nConsider the following algorithm for solving the first problem: \n\n```default\ncurrent = 1\nanswer = 0\nwhile current < n:\n    if the array is sorted:\n        break\n    if current + k - 1 <= n:\n        Apply the operation to the elements [current, current+1, ..., current+k-1]\n    else:\n        Apply the operation to the elements [current, current+1, ..., n] \n    answer += 1\n    current += k\nreturn answer\n```\n\nGive an example of input where this algorithm fails.\n\nName your input file `tests.txt` and make sure it has exactly two lines in the following format:\n\n```default\nN K\np1 p2 ... pn\n```\n\nwhere the first line consists of two space-separated integers corresponding to `N` and `K` and the second line has `n` space-separated integers that form a permutation. You get a full score on this problem if your input is valid, and it causes the algorithm above to output a sub-optimal solution.\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Maintain a Network\n\nYou have just launched a social network for the IITGN community, called GYAN.\n\n$Q$ operations have been performed since GYAN was launched. The $i$-th $(1 \\leq i \\leq Q)$ operation is represented by three integers $T_i, A_i$, and $B_i$, whose meanings are as follows:\n\n- If $T_i=1$ : it means that user $A_i$ follows user $B_i$. If user $A_i$ is already following user $B_i$ at the time of this operation, it does not make any change.\n- If $T_i=2$ : it means that user $A_i$ unfollows user $B_i$. If user $A_i$ is not following user $B_i$ at the time of this operation, it does not make any change.\n- If $T_i=3$ : it means that you are asked to determine if users $A_i$ and $B_i$ are following each other. You need to print Yes if user $A_i$ is following user $B_i$ and user $B_i$ is following user $A_i$, and No otherwise.\n\nWhen the service was launched, no users were following any users.\n\nPrint the correct answers for all operations such that $T_i=3$ in ascending order of $i$.\n\n### Constraints\n\n- $2 \\leq N \\leq 10^4$\n- $1 \\leq Q \\leq 2 \\times 10^5$\n- $T_i=1,2,3(1 \\leq i \\leq Q)$\n- $1 \\leq A_i \\leq N(1 \\leq i \\leq Q)$\n- $1 \\leq B_i \\leq N(1 \\leq i \\leq Q)$\n- $A_i \\neq B_i(1 \\leq i \\leq Q)$\n- There exists $i(1 \\leq i \\leq Q)$ such that $T_i=3$.\n- All values in the input are integers.\n\n\n### Input\n\nThe input is given from Standard Input in the following format:\n$$\n\\begin{array}{lll}\nN & Q & \\\\\nT_1 & A_1 & B_1 \\\\\nT_2 & A_2 & B_2 \\\\\n\\vdots & & \\\\\nT_Q & A_Q & B_Q\n\\end{array}\n$$\n\n\n### Output\n\nPrint $X$ lines, where $X$ is the number of $i$ 's $(1 \\leq i \\leq Q)$ such that $T_i=3$. The $j$-th $(1 \\leq j \\leq X)$ line should contain the answer to the $j$-th operation such that $T_i=3$.\n\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n3 9\n1 1 2\n3 1 2\n1 2 1\n3 1 2\n1 2 3\n1 3 2\n3 1 3\n2 1 2\n3 1 2\n```\n\n`Sample Output`\n\n```default\nNo\nYes\nNo\nNo\n```\n\n`Sample Input`\n\n```default\n2 8\n1 1 2\n1 2 1\n3 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n3 1 2\n```\n\n`Sample Output`\n\n```default\nYes\nNo\n```\n\n`Sample Input`\n\n```default\n10 30\n3 1 6\n3 5 4\n1 6 1\n3 1 7\n3 8 4\n1 1 6\n2 4 3\n1 6 5\n1 5 6\n1 1 8\n1 8 1\n2 3 10\n1 7 6\n3 5 6\n1 6 7\n3 6 7\n1 9 5\n3 8 6\n3 3 8\n2 6 9\n1 7 1\n3 10 8\n2 9 2\n1 10 9\n2 6 10\n2 6 8\n3 1 6\n3 1 8\n2 8 5\n1 9 10\n```\n\n`Sample Output`\n\n```default\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nYes\n```\n\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 4. Stable Matchings\n\nThere are $n$ men and $n$ women. Each woman ranks all men in order of her preference (her first choice, her second choice, and so on). Similarly, each man sorts all women according to his preference. The goal is to arrange n marriages in such a way that if a man $m$ prefers some woman $w$ more than his wife, and $w$ prefers $m$ more then her husband a new marriage occurs between $w$ and $m$. If $w$ prefers her husband more, then she stays married to him. This problem always has a solution and your task is to find one.\n\n### Input\n\nThe first line contains a positive integer `t<=100` indicating the number of test cases. Each test case is an instance of the stable marriage problem defined above. The first line of each test case is a positive integer `n<=500` (the number of marriages to find). The next `n` lines are the woman's preferences: `i`-th line contains the number `i` (which means that this is the list given by the ith woman) and the numbers of men (the first choice of ith woman, the second choice,...). Then, the men's preferences follow in the same format.\n\n### Output\n\nFor each test case print `n` lines, where each line contains two numbers `m` and `w`, which means that the man number m and the woman number `w` should get married.\n\n### Sample IO\n\n`Sample Input`\n\n```default\n2\n4\n1 4 3 1 2\n2 2 1 3 4\n3 1 3 4 2\n4 4 3 1 2\n1 3 2 4 1\n2 2 3 1 4\n3 3 1 2 4\n4 3 2 4 1\n7\n1 3 4 2 1 6 7 5\n2 6 4 2 3 5 1 7\n3 6 3 5 7 2 4 1\n4 1 6 3 2 4 7 5\n5 1 6 5 3 4 7 2\n6 1 7 3 4 5 6 2\n7 5 6 2 4 3 7 1\n1 4 5 3 7 2 6 1\n2 5 6 4 7 3 2 1\n3 1 6 5 4 3 7 2\n4 3 5 6 7 2 4 1\n5 1 7 6 4 3 5 2\n6 6 3 7 5 2 4 1\n7 1 7 4 2 6 5 3\n```\n\n` Sample Output`\n\n```default\n1 3\n2 2\n3 1\n4 4\n1 4\n2 5\n3 1\n4 3\n5 7\n6 6\n7 2\n```\n\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 5. Linked Lists\n\n```C\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head->data   = 10;\n  middle->data = 20;\n  last->data   = 30;\n\n  //connecting each nodes. head->middle->last\n  head->next   = middle;\n  middle->next = last;\n  last->next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d->\",temp->data);\n      temp = temp->next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\n```\n\nExtend the code above to perform the following tasks:\n\n1. Read a sequence of `n` numbers from the input, $p_1, \\ldots, p_n$.\n2. Insert each of these number at a location where the linked list is still sorted when read from beginning to end.\n3. For any given input $i$, output the number in the linked list that comes before the number $i$.\n\n### Input\n\nThe first line contains a positive integer `n`.\nThe second line contains `n` space-separated integers.\nThe third line contains a positive integer `m`.\n\n### Output\n\nOutput the number that comes before `m` in the linked list. It is guaranteed that `m` is one of the numbers from the second line. If the number happens to be the first element of the list, return `-1`.\n:::\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"lab-w02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
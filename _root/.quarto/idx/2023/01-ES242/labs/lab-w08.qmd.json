{"title":"ES242. Data Structures and Algorithms I. Week 08 Lab","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 08 Lab","code-copy":true},"headingText":"ES242. Data Structures and Algorithms I.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### Lab 08\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nDepth First Search\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Implement DFS\n\nIn this exercise your goal is to output a DFS traversal of a given graph `G` starting from a given source `s`.\n\n\n### Input Format\n\n\nThe first line of input is three space-separated integers `n`, `m` and `s`, denoting the number of vertices and edges of `G`, and the id of the source vertex, respectively. Vertices are indexed from `0` to `n-1`.\n\nThe next `m` lines of code are two space separated integers `u` and `v` in the range `0` and `n-1`, indicating an (undirected) edge between vertices `u` and `v`.\n\nThe last line is a pair of space-separated integers `x` and `y`.\n\n### Output Format\n\nThe output is a sequence of vertices in the order in which they were pushed on to the stack. Assume that you always find your lexicographically smallest unvisited neighbor in your DFS implementation. \n\n### Sample I/O\n\n`Sample Input`\n\n```default\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n```\n\n`Sample Output`\n\n```default\n0 1 5 2 3 4 \n```\n\n**There is a trailing whitespace at the end of the line in the output.**\n\nNote. This was a worked out example and the code is [here](https://replit.com/@neeldhara/Lab08-P1-solution#main.c). Please note that there some very minor changes from the version discussed in class to account for proper ordering of vertices. In particular, in the stack implementation, to make sure that you are visiting the lowest-indexed neighbor, the vertices need to be added to the adjacency list in reverse sorted order.\n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Is it a DAG?\n\nRecall that a path in a directed graph is a sequence of edges having the property that the ending vertex of each edge in the sequence is the same as the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A _directed acyclic graph_ (also known as a DAG) is a directed graph that has no cycles.\n\nYou are given a directed graph $G$. Your task is to determine whether the input graph is a DAG.\n\nNote that the vertices are _0-indexed_. That is, the vertices are numbered as $0 \\ldots n-1$.\n\nYour code should output `YES` if $G$ is a DAG, else `NO`\n\n### Input Format\n\nThe first line contains an integer `n`, the number of nodes in the graph. <br>\nThe next line contains an integer `m`, denoting the number of edges in the graph. <br>\nThe next `m` input lines contain two space-separated integers `u`,`v` denoting a directed edge from u to v (u->v).\n\n### Output Format\n\nOutput `YES` if $G$ is a DAG, else `NO`\n\n`Sample Input 1`\n\n```default\n6\n6\n5 0\n5 2\n4 0\n4 1\n2 3\n3 1\n```\n\n`Sample Output 1`\n\n```default\nYES\n```\n\n`Sample Input 2`\n\n```default\n4\n4\n0 1\n1 2\n2 3\n3 0\n```\n\n`Sample Output 2`\n\n```default\nNO\n```\n  \n  \n:::\n\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## ES242. Data Structures and Algorithms I.\n\n##### Lab 08\n\n[Back to course page](../index.qmd)\n\n:::{.callout-warning appearance=\"minimal\"}\nDepth First Search\n:::\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Implement DFS\n\nIn this exercise your goal is to output a DFS traversal of a given graph `G` starting from a given source `s`.\n\n\n### Input Format\n\n\nThe first line of input is three space-separated integers `n`, `m` and `s`, denoting the number of vertices and edges of `G`, and the id of the source vertex, respectively. Vertices are indexed from `0` to `n-1`.\n\nThe next `m` lines of code are two space separated integers `u` and `v` in the range `0` and `n-1`, indicating an (undirected) edge between vertices `u` and `v`.\n\nThe last line is a pair of space-separated integers `x` and `y`.\n\n### Output Format\n\nThe output is a sequence of vertices in the order in which they were pushed on to the stack. Assume that you always find your lexicographically smallest unvisited neighbor in your DFS implementation. \n\n### Sample I/O\n\n`Sample Input`\n\n```default\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n```\n\n`Sample Output`\n\n```default\n0 1 5 2 3 4 \n```\n\n**There is a trailing whitespace at the end of the line in the output.**\n\nNote. This was a worked out example and the code is [here](https://replit.com/@neeldhara/Lab08-P1-solution#main.c). Please note that there some very minor changes from the version discussed in class to account for proper ordering of vertices. In particular, in the stack implementation, to make sure that you are visiting the lowest-indexed neighbor, the vertices need to be added to the adjacency list in reverse sorted order.\n\n:::\n\n\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Is it a DAG?\n\nRecall that a path in a directed graph is a sequence of edges having the property that the ending vertex of each edge in the sequence is the same as the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A _directed acyclic graph_ (also known as a DAG) is a directed graph that has no cycles.\n\nYou are given a directed graph $G$. Your task is to determine whether the input graph is a DAG.\n\nNote that the vertices are _0-indexed_. That is, the vertices are numbered as $0 \\ldots n-1$.\n\nYour code should output `YES` if $G$ is a DAG, else `NO`\n\n### Input Format\n\nThe first line contains an integer `n`, the number of nodes in the graph. <br>\nThe next line contains an integer `m`, denoting the number of edges in the graph. <br>\nThe next `m` input lines contain two space-separated integers `u`,`v` denoting a directed edge from u to v (u->v).\n\n### Output Format\n\nOutput `YES` if $G$ is a DAG, else `NO`\n\n`Sample Input 1`\n\n```default\n6\n6\n5 0\n5 2\n4 0\n4 1\n2 3\n3 1\n```\n\n`Sample Output 1`\n\n```default\nYES\n```\n\n`Sample Input 2`\n\n```default\n4\n4\n0 1\n1 2\n2 3\n3 0\n```\n\n`Sample Output 2`\n\n```default\nNO\n```\n  \n  \n:::\n\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"lab-w08.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 08 Lab","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
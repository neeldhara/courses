{"title":"ES242. Data Structures and Algorithms I. Exam 02","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"ES242. Data Structures and Algorithms I. Exam 02","code-copy":true},"headingText":"ES242. Data Structures and Algorithms I.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\t\n\n\n##### Exam 02 \n\nIssued: 31 Mar, 2023\n\n[Back to course page](../index.qmd)\n\n\n\n:::{.callout-caution icon=\"false\"} \n\n# Instructions\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\n\nPart 1 consists of 5 multiple choice questions, worth 2 points each and is available directly on Gradescope.\n\nPart 2 consists of 3 programming assignments. Attempt one of problems 1 and 2; and attempt problem 3. The problems are worth 5 points each. \n\nTotal marks are capped at 20, there is no partial grading or negative marking.\n\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\n\nUseful resources that you can access during the exam:\n\n1. [BFS/DFS lecture notes](https://www.neeldhara.com/materials/dsanotes/dfs/)\n2. [BFS implementation with sorted neighbors](https://replit.com/@neeldhara/Lab06-P1-solution#main.c)\n3. [DFS implementation with reverse sorted neighbors](https://replit.com/@neeldhara/Lab08-P1-solution#main.c) (so that they are visited in the sorted order)\n\n\n\n:::\n\n\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. Shortest Distance\n\nGiven an undirected graph $G = (V,E)$ and two specified vertices $s$ and $t$, determine the length of the shortest path between $s$ and $t$, where the length of a path is defined as the number of edges on the path. \n\nHint: start a BFS at $s$. The BFS layer number of $t$ is the answer, where the layer number of vertex $s$ is $0$. If $t$ does not appear in the BFS traversal starting from $s$, then there no path from $s$ to $t$.\n\n\n### Input Format\n\n\nThe first line of input is three space-separated integers `n`, `m`, `s` and `t`, denoting the number of vertices and edges of `G`, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from `0` to `n-1`.\n\nThe next `m` lines of code are two space separated integers `u` and `v` in the range `0` and `n-1`, indicating an (undirected) edge between vertices `u` and `v`.\n\nThe last line is a pair of space-separated integers `x` and `y`.\n\n### Output Format\n\nThe output is formatted as follows: print a single integer `d`, the length of the shortest path between $s$ and $t$.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n```\n\n`Sample Output`\n\n```default\n2\n```\n\n:::\n\n\n:::{.callout-note icon=\"false\"}\n\n## Problem 2. Bags of Pebbles\n\nMahi and Brishti are playing with bags of pebbles. They have a row $a$ of $n$ bags of pebbles. The $i$-th bag has $a_i$ pebbles. The bags are given to the players in the order from the first bag to the $n$-th bag.\n\nIf a bag has an even number of pebbles, Mahi grabs the bag. Otherwise, Brishti grabs the bag. Once a bag is grabbed, the number of pebbles in it gets added to the total number of pebbles of the player that took it.\n\nMahi wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no pebbles), Mahi will have strictly more pebbles than Brishti. Help Mahi find out if such a reordering exists.\n\n### Input\n\n- The first line of the input contains an integer $t(1 \\leq t \\leq 1000)-$ the number of test cases.\n- The first line of each test case contains a single integer $n(1 \\leq n \\leq 100)$ - the number of bags in the array.\n- The second line of each test case contains $n$ space-separated integers $a_i\\left(1 \\leq a_i \\leq 100\\right)$ - the number of pebbles in each bag.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if such a reordering exists, and \"NO\" (without quotes) otherwise.\n\n### Sample Input/Output\n\n`Sample Input`\n\n```default\n3\n4\n1 2 3 4\n4\n1 1 1 2\n3\n1 4 3\n```\n\n`Sample Output`\n\n```default\nYES\nNO\nNO\n```\n\nNote\nIn the first test case, Mahi can reorder the array as follows: $[4,1,2,3]$. Then the process proceeds as follows:\n- the first bag has 4 pebbles, which is even, so Mahi takes it - Mahi has 4 pebbles, and Brishti has 0 .\n- the second bag has 1 pebbles, which is odd, so Brishti takes it - Mahi has 4 pebbles, and Brishti has 1.\n- the third bag has 2 pebbles, which is even, so Mahi takes it - Mahi has 6 pebbles, and Brishti has 1 .\n- the fourth bag has 3 pebbles, which is odd, so Brishti takes it - Mahi has 6 pebbles, and Brishti has 4.\nSince Mahi always has more pebbles than Brishti, this reordering works.\n:::\n\n:::{.callout-note icon=\"false\"}\n\n## Problem 3. Learning Languages\n\nIITGN has $n$ students. These students can use $m$ languages for correspondence. The languages are numbered with integers from $1$ to $m$. For each student we have the list of languages, which s/he knows. This list could be empty, i. e. a student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\n\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\n\nHint. Translate this into a graph where you have $n$ vertices representing the students and $m$ vertices representing languages. If this graph is fully connected then no money needs to be spent. Otherwise think of how much it costs to connect all the connected components of the graph. Which components do you need to worry about? Think about the special case when all students know no languages.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ $(2 \\leqslant n, m \\leqslant 100)$ — the number of students and the number of languages.\n\nThen $n$ lines follow — each student's language list. At the beginning of the $i$-th line is integer ki $(0 \\leqslant k_i \\leqslant m)$ — the number of languages the i-th student knows. Next, the $i$-th line contains $k_i$ integers — $a_{ij}$ $(1 \\leqslant aij \\leqslant m)$ — the identifiers of languages the $i$-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n### Output\n\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n### Sample Input/Output\n\n\n`Sample Input`\n```default\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n```\n\n`Sample Output`\n```default\n0\n```\n\n`Sample Input`\n```default\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n```\n\n`Sample Output`\n```default\n2\n```\n\n`Sample Input`\n```default\n2 2\n1 2\n0\n```\n\n`Sample Output`\n```default\n1\n```\n\n\n### Note\n\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\n\nIn the third sample student 2 must learn language 2.\n\n:::\n\n\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\t\n\n## ES242. Data Structures and Algorithms I.\n\n##### Exam 02 \n\nIssued: 31 Mar, 2023\n\n[Back to course page](../index.qmd)\n\n\n\n:::{.callout-caution icon=\"false\"} \n\n# Instructions\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\n\nPart 1 consists of 5 multiple choice questions, worth 2 points each and is available directly on Gradescope.\n\nPart 2 consists of 3 programming assignments. Attempt one of problems 1 and 2; and attempt problem 3. The problems are worth 5 points each. \n\nTotal marks are capped at 20, there is no partial grading or negative marking.\n\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\n\nUseful resources that you can access during the exam:\n\n1. [BFS/DFS lecture notes](https://www.neeldhara.com/materials/dsanotes/dfs/)\n2. [BFS implementation with sorted neighbors](https://replit.com/@neeldhara/Lab06-P1-solution#main.c)\n3. [DFS implementation with reverse sorted neighbors](https://replit.com/@neeldhara/Lab08-P1-solution#main.c) (so that they are visited in the sorted order)\n\n\n\n:::\n\n\n\n:::{.callout-note icon=\"false\"}\n\n# Problem 1. Shortest Distance\n\nGiven an undirected graph $G = (V,E)$ and two specified vertices $s$ and $t$, determine the length of the shortest path between $s$ and $t$, where the length of a path is defined as the number of edges on the path. \n\nHint: start a BFS at $s$. The BFS layer number of $t$ is the answer, where the layer number of vertex $s$ is $0$. If $t$ does not appear in the BFS traversal starting from $s$, then there no path from $s$ to $t$.\n\n\n### Input Format\n\n\nThe first line of input is three space-separated integers `n`, `m`, `s` and `t`, denoting the number of vertices and edges of `G`, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from `0` to `n-1`.\n\nThe next `m` lines of code are two space separated integers `u` and `v` in the range `0` and `n-1`, indicating an (undirected) edge between vertices `u` and `v`.\n\nThe last line is a pair of space-separated integers `x` and `y`.\n\n### Output Format\n\nThe output is formatted as follows: print a single integer `d`, the length of the shortest path between $s$ and $t$.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n```\n\n`Sample Output`\n\n```default\n2\n```\n\n:::\n\n\n:::{.callout-note icon=\"false\"}\n\n## Problem 2. Bags of Pebbles\n\nMahi and Brishti are playing with bags of pebbles. They have a row $a$ of $n$ bags of pebbles. The $i$-th bag has $a_i$ pebbles. The bags are given to the players in the order from the first bag to the $n$-th bag.\n\nIf a bag has an even number of pebbles, Mahi grabs the bag. Otherwise, Brishti grabs the bag. Once a bag is grabbed, the number of pebbles in it gets added to the total number of pebbles of the player that took it.\n\nMahi wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no pebbles), Mahi will have strictly more pebbles than Brishti. Help Mahi find out if such a reordering exists.\n\n### Input\n\n- The first line of the input contains an integer $t(1 \\leq t \\leq 1000)-$ the number of test cases.\n- The first line of each test case contains a single integer $n(1 \\leq n \\leq 100)$ - the number of bags in the array.\n- The second line of each test case contains $n$ space-separated integers $a_i\\left(1 \\leq a_i \\leq 100\\right)$ - the number of pebbles in each bag.\n\n### Output\n\nFor each test case, output \"YES\" (without quotes) if such a reordering exists, and \"NO\" (without quotes) otherwise.\n\n### Sample Input/Output\n\n`Sample Input`\n\n```default\n3\n4\n1 2 3 4\n4\n1 1 1 2\n3\n1 4 3\n```\n\n`Sample Output`\n\n```default\nYES\nNO\nNO\n```\n\nNote\nIn the first test case, Mahi can reorder the array as follows: $[4,1,2,3]$. Then the process proceeds as follows:\n- the first bag has 4 pebbles, which is even, so Mahi takes it - Mahi has 4 pebbles, and Brishti has 0 .\n- the second bag has 1 pebbles, which is odd, so Brishti takes it - Mahi has 4 pebbles, and Brishti has 1.\n- the third bag has 2 pebbles, which is even, so Mahi takes it - Mahi has 6 pebbles, and Brishti has 1 .\n- the fourth bag has 3 pebbles, which is odd, so Brishti takes it - Mahi has 6 pebbles, and Brishti has 4.\nSince Mahi always has more pebbles than Brishti, this reordering works.\n:::\n\n:::{.callout-note icon=\"false\"}\n\n## Problem 3. Learning Languages\n\nIITGN has $n$ students. These students can use $m$ languages for correspondence. The languages are numbered with integers from $1$ to $m$. For each student we have the list of languages, which s/he knows. This list could be empty, i. e. a student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\n\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\n\nHint. Translate this into a graph where you have $n$ vertices representing the students and $m$ vertices representing languages. If this graph is fully connected then no money needs to be spent. Otherwise think of how much it costs to connect all the connected components of the graph. Which components do you need to worry about? Think about the special case when all students know no languages.\n\n### Input\n\nThe first line contains two integers $n$ and $m$ $(2 \\leqslant n, m \\leqslant 100)$ — the number of students and the number of languages.\n\nThen $n$ lines follow — each student's language list. At the beginning of the $i$-th line is integer ki $(0 \\leqslant k_i \\leqslant m)$ — the number of languages the i-th student knows. Next, the $i$-th line contains $k_i$ integers — $a_{ij}$ $(1 \\leqslant aij \\leqslant m)$ — the identifiers of languages the $i$-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n### Output\n\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n### Sample Input/Output\n\n\n`Sample Input`\n```default\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n```\n\n`Sample Output`\n```default\n0\n```\n\n`Sample Input`\n```default\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n```\n\n`Sample Output`\n```default\n2\n```\n\n`Sample Input`\n```default\n2 2\n1 2\n0\n```\n\n`Sample Output`\n```default\n1\n```\n\n\n### Note\n\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\n\nIn the third sample student 2 must learn language 2.\n\n:::\n\n\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"exam02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../../scripts.js","page-layout":"full","sidebar":false,"title":"ES242. Data Structures and Algorithms I. Exam 02","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
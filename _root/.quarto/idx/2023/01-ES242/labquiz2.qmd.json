{"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","markdown":{"yaml":{"css":"/css/teaching.css","toc":false,"sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","code-copy":true},"headingText":"ES242. Data Structures and Algorithms I.","containsRefs":false,"markdown":"\n\n:::{.column-body-outset}\n\n\n##### Lab Quiz 2 \n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Unity Project\n\nThere are `n` people partaking in a project X. The _capability_ value of the ith person is denoted as `C[i]`. The manager of the project has proposed the following algorithm to calculate the _capability of the group_ (to undertake project X): \n\nOn each turn, choose two people, x and y, with _capabilities_ `C[x]` and `C[y]` respectively (with `C[x] <= C[y]`). \nA _unity procedure_ is followed:\n\n1. If the two have same _capability_ value, remove both.\n2. Else, person `x` is removed, and _capability_ of person y changes to `C[y]-C[x]`\n\nIt is obvious that at the end at most one person shall remain. The _capability_ value of the person is stated as the _capability value of the group_. If no person remains, _capability value of the group_ is taken as `0`.\n\n\nYou have the find the **minimum possible** capability value of the group.\n\n:::{.callout-important appearance=\"simple\" icon=\"false\"}\n# Remark\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n:::\n\n### Input Format\nThe first line contains an integer `n`. <br>\nThe next line contains `n` space-separated integers representing `C[]`\n\n### Output Format\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n6\n2 7 4 1 8 1\n```\n\n`Sample Output 1`\n\n```default\n1\n```\n\n`Sample Input 2`\n```default\n10\n1 3 5 4 6 13 10 9 8 15 16\n```\n\n`Sample Output 2`\n```default\n0\n```\n  \n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Connect the City\n\nBangalore has `n` locations, and `m` bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\n\nYour task is to find out the minimum number of roads required.\n\n### Input\n\nThe first input line has two integers `n` and `m`: the number of cities and roads. The cities are numbered `1,2,...,n`.\n\nAfter that, there are m lines describing the roads. Each line has two integers `a` and `b`: there is a road between those cities.\n\nA road always connects two different cities, and there is at most one road between any two cities.\n\n### Output\n\nPrint an integer `k`: the number of required roads.\n\n\n### Constraints\n\n- $1 \\leq n \\leq 10^5$\n- $1 \\leq m \\leq 2⋅10^5$\n- $1 \\leq a,b \\leq n$\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n4 2\n1 2\n3 4\n```\n\n`Sample Output`\n\n```default\n1\n```\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Spreading News\n\nAfter all the dropouts, there are `n` people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\n\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student `i` to start spread a rumor, you have to pay them in by buying `c[i]` samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\n\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\n\nTake a look at the notes if you think you haven't understood the problem completely.\n\n### Input\n\nThe first line contains two integer numbers `n` and `m` ($1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5$) — the number of students in the class and the number of pairs of friends.\n\nThe second line contains `n` integer numbers `c[i]` --— the amount of samosas i-th student asks to start spreading the rumor.\n\nThen m lines follow, each containing a pair of numbers (`x[i], y[i]`) which represent that characters `x[i]` and `y[i]` are friends $(1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])$. It is guaranteed that each pair is listed at most once.\n\n### Output\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n5 2\n2 5 3 4 8\n1 4\n4 5\n```\n\n`Sample Output`\n\n```default\n10\n```\n\n`Sample Input`\n\n```default\n10 0\n1 2 3 4 5 6 7 8 9 10\n```\n\n`Sample Output`\n\n```default\n55\n```\n\nNote\n\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 4. Predicting Possibility\n\nYou are playing a decision making game where the output can be either `1` or `0`.\n\nGiven a `N X N` matrix, the objective of the game is to predict if it's possible to reach from a given source to a destination in less than or equal to `k` moves.\n\nSome constraints are as follows:\n\n1. You can only move to adjacent positions in `1` move.\n\n2. You can only move diagonally across the matrix. \n\nGiven the value of `n`, and the maximum moves `k`, determine if you can fulfill the requirement: can you reach from source to destination in less than `k` moves?\n\n### Input Format\n\nThe first line contains an integer `n`. \n\nThe second line contains an integer `k`, denoting the maximum number of moves you can make. <br>\n\nThe third line contains two space-separated integers, `i` and `j`. An entry `i j` denotes `i` as the x-coordinate and `j` as y-coordinate of the source location.\n\nThe fourth line contains two space-separated integers, `m` and `n`. An entry `m n` denotes `m` as the x-coordinate and `n` as y-coordinate of the destination.\n\n### Output Format\nReturn `1` if you can reach from source to destination in less than `k` moves. Else, return `0`.\n\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n4\n3\n0 0\n3 1\n```\n\n`Sample Output 1`\n\n```default\n1\n```\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 5. Can You Register?\n\nYou are a student in a university U. \n\nYou can only register in a certain program **A**, if the following condition is met:\n\nYou have registered for all courses with the course IDs `[0,1... num_courses-1]`\n\nIf there exists at least one `i` in range `[0,1... num_courses-1]` for which you _cannot_ register, then you _cannot_ register from the program.\n\nSome constraints are as follows:\n\n1. Some courses may have prerequisite courses. For example if `i` is a prerequisite of course ID `j`, then you must register for `i` _before_ `j`\n\n2. You can not repeat a course, you can only register for a course one.\n\nGiven the value of `num_courses`, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for **A** (can you register for _all_ the courses in range `num_courses`)?\n\n## Input Format\n\nThe first line contains an integer `num_courses`. \n\nThe second line contains an integer `num_prerequisites`, denoting the number of prerequisites or conditions you have to fulfil. \n\nThe next `num_prerequisites` lines contain 2 space-separated integers `i` and `j`. An entry `i j` denotes course `j` is a prerequisite for course `i`.\n\n## Output Format\n\nReturn `YES` if you can register for program **A**. Else, return `NO`.\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n2\n2\n1 0\n0 1\n```\n\n`Sample Output 1`\n```default\nNO\n```\n  \n:::\n\n\n\n:::","srcMarkdownNoYaml":"\n\n:::{.column-body-outset}\n\n## ES242. Data Structures and Algorithms I.\n\n##### Lab Quiz 2 \n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 1. Unity Project\n\nThere are `n` people partaking in a project X. The _capability_ value of the ith person is denoted as `C[i]`. The manager of the project has proposed the following algorithm to calculate the _capability of the group_ (to undertake project X): \n\nOn each turn, choose two people, x and y, with _capabilities_ `C[x]` and `C[y]` respectively (with `C[x] <= C[y]`). \nA _unity procedure_ is followed:\n\n1. If the two have same _capability_ value, remove both.\n2. Else, person `x` is removed, and _capability_ of person y changes to `C[y]-C[x]`\n\nIt is obvious that at the end at most one person shall remain. The _capability_ value of the person is stated as the _capability value of the group_. If no person remains, _capability value of the group_ is taken as `0`.\n\n\nYou have the find the **minimum possible** capability value of the group.\n\n:::{.callout-important appearance=\"simple\" icon=\"false\"}\n# Remark\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n:::\n\n### Input Format\nThe first line contains an integer `n`. <br>\nThe next line contains `n` space-separated integers representing `C[]`\n\n### Output Format\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n6\n2 7 4 1 8 1\n```\n\n`Sample Output 1`\n\n```default\n1\n```\n\n`Sample Input 2`\n```default\n10\n1 3 5 4 6 13 10 9 8 15 16\n```\n\n`Sample Output 2`\n```default\n0\n```\n  \n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 2. Connect the City\n\nBangalore has `n` locations, and `m` bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\n\nYour task is to find out the minimum number of roads required.\n\n### Input\n\nThe first input line has two integers `n` and `m`: the number of cities and roads. The cities are numbered `1,2,...,n`.\n\nAfter that, there are m lines describing the roads. Each line has two integers `a` and `b`: there is a road between those cities.\n\nA road always connects two different cities, and there is at most one road between any two cities.\n\n### Output\n\nPrint an integer `k`: the number of required roads.\n\n\n### Constraints\n\n- $1 \\leq n \\leq 10^5$\n- $1 \\leq m \\leq 2⋅10^5$\n- $1 \\leq a,b \\leq n$\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n4 2\n1 2\n3 4\n```\n\n`Sample Output`\n\n```default\n1\n```\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 3. Spreading News\n\nAfter all the dropouts, there are `n` people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\n\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student `i` to start spread a rumor, you have to pay them in by buying `c[i]` samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\n\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\n\nTake a look at the notes if you think you haven't understood the problem completely.\n\n### Input\n\nThe first line contains two integer numbers `n` and `m` ($1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5$) — the number of students in the class and the number of pairs of friends.\n\nThe second line contains `n` integer numbers `c[i]` --— the amount of samosas i-th student asks to start spreading the rumor.\n\nThen m lines follow, each containing a pair of numbers (`x[i], y[i]`) which represent that characters `x[i]` and `y[i]` are friends $(1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])$. It is guaranteed that each pair is listed at most once.\n\n### Output\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n### Sample I/O\n\n`Sample Input`\n\n```default\n5 2\n2 5 3 4 8\n1 4\n4 5\n```\n\n`Sample Output`\n\n```default\n10\n```\n\n`Sample Input`\n\n```default\n10 0\n1 2 3 4 5 6 7 8 9 10\n```\n\n`Sample Output`\n\n```default\n55\n```\n\nNote\n\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 4. Predicting Possibility\n\nYou are playing a decision making game where the output can be either `1` or `0`.\n\nGiven a `N X N` matrix, the objective of the game is to predict if it's possible to reach from a given source to a destination in less than or equal to `k` moves.\n\nSome constraints are as follows:\n\n1. You can only move to adjacent positions in `1` move.\n\n2. You can only move diagonally across the matrix. \n\nGiven the value of `n`, and the maximum moves `k`, determine if you can fulfill the requirement: can you reach from source to destination in less than `k` moves?\n\n### Input Format\n\nThe first line contains an integer `n`. \n\nThe second line contains an integer `k`, denoting the maximum number of moves you can make. <br>\n\nThe third line contains two space-separated integers, `i` and `j`. An entry `i j` denotes `i` as the x-coordinate and `j` as y-coordinate of the source location.\n\nThe fourth line contains two space-separated integers, `m` and `n`. An entry `m n` denotes `m` as the x-coordinate and `n` as y-coordinate of the destination.\n\n### Output Format\nReturn `1` if you can reach from source to destination in less than `k` moves. Else, return `0`.\n\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n4\n3\n0 0\n3 1\n```\n\n`Sample Output 1`\n\n```default\n1\n```\n\n:::\n\n:::{.callout-note collapse=\"true\" icon=\"false\"}\n\n# Problem 5. Can You Register?\n\nYou are a student in a university U. \n\nYou can only register in a certain program **A**, if the following condition is met:\n\nYou have registered for all courses with the course IDs `[0,1... num_courses-1]`\n\nIf there exists at least one `i` in range `[0,1... num_courses-1]` for which you _cannot_ register, then you _cannot_ register from the program.\n\nSome constraints are as follows:\n\n1. Some courses may have prerequisite courses. For example if `i` is a prerequisite of course ID `j`, then you must register for `i` _before_ `j`\n\n2. You can not repeat a course, you can only register for a course one.\n\nGiven the value of `num_courses`, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for **A** (can you register for _all_ the courses in range `num_courses`)?\n\n## Input Format\n\nThe first line contains an integer `num_courses`. \n\nThe second line contains an integer `num_prerequisites`, denoting the number of prerequisites or conditions you have to fulfil. \n\nThe next `num_prerequisites` lines contain 2 space-separated integers `i` and `j`. An entry `i j` denotes course `j` is a prerequisite for course `i`.\n\n## Output Format\n\nReturn `YES` if you can register for program **A**. Else, return `NO`.\n\n### Sample I/O\n\n`Sample Input 1`\n\n```default\n2\n2\n1 0\n0 1\n```\n\n`Sample Output 1`\n```default\nNO\n```\n  \n:::\n\n\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["fontawesome"],"css":["../../styles.css","/css/teaching.css"],"toc":false,"include-in-header":[{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Berkshire+Swash&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script>\nwindow.addEventListener('load', function() {\n  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')); \n  tooltipTriggerList.forEach(function(element) {\n    new bootstrap.Tooltip(element, {\n      trigger: 'hover',\n      animation: true,\n      delay: { show: 50, hide: 50 }\n    });\n  });\n});\n</script>\n"}],"output-file":"labquiz2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","js":"../../scripts.js","page-layout":"full","sidebar":false,"title":"ES242. Data Structures and Algorithms I. Week 02 Lab","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
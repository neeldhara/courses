[
  {
    "objectID": "iitgn.html",
    "href": "iitgn.html",
    "title": "IITGN Courses",
    "section": "",
    "text": "CS614\nAdvanced Algorithms \n2025\n\n\n\n\n\nCS303\nMathematical Foundations of AI (Tutorials) \n2025\n\n\n\n\n\nCS329\nFoundations of AI - Multiagent Systems \n2024\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2024\n\n\n\n\n\nCS614\nAdvanced Algorithms \n2024\n\n\n\n\n\nCS691\nLinear Algebraic Methods in Combinatorics \n2024\n\n\n\n\n\nST699\nSpecial Topics in Games \n2024\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2024\n\n\n\n\n\nES214\nDiscrete Mathematics \n2023\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2023\n\n\n\n\n\nCS614\nAdvanced Algorithms \n2023\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2022\n\n\n\n\n\nCS610\nAdvanced Algorithms \n2021\n\n\n\n\n\nES301\nData Structures and Algorithms II \n2021\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2020\n\n\n\n\n\nES102\nComputing \n2020\n\n\n\n\n\nSpecial Topics\nCS Theory Toolkit \n2020\n\n\n\n\n\nES214\nDiscrete Mathematics \n2020\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2019\n\n\n\n\n\nST601\nSocial Networks \n2019\n\n\n\n\n\nES214\nDiscrete Mathematics \n2019\n\n\n\n\n\nCS610\nAdvanced Algorithms \n2019\n\n\n\n\n\nMA607\nGraph Theory and Applications \n2018\n\n\n\n\n\nES112\nComputing \n2018\n\n\n\n\n\nES102\nIntroduction to Computing \n2018\n\n\n\n\n\nES112\nComputing \n2017\n\n\n\n\n\nMA607\nGraph Theory and Applications \n2017\n\n\n\n\n\nFP601\nCultures of Communication \n2017\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2016\n\n\n\n\n\nFP601\nCultures of Communication \n2016\n\n\n\n\n\nCS321\nAnalysis and Design of Algorithms \n2016\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2016\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "iitgn.html#courses-at-iit-gandhinagar",
    "href": "iitgn.html#courses-at-iit-gandhinagar",
    "title": "IITGN Courses",
    "section": "",
    "text": "CS614\nAdvanced Algorithms \n2025\n\n\n\n\n\nCS303\nMathematical Foundations of AI (Tutorials) \n2025\n\n\n\n\n\nCS329\nFoundations of AI - Multiagent Systems \n2024\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2024\n\n\n\n\n\nCS614\nAdvanced Algorithms \n2024\n\n\n\n\n\nCS691\nLinear Algebraic Methods in Combinatorics \n2024\n\n\n\n\n\nST699\nSpecial Topics in Games \n2024\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2024\n\n\n\n\n\nES214\nDiscrete Mathematics \n2023\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2023\n\n\n\n\n\nCS614\nAdvanced Algorithms \n2023\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2022\n\n\n\n\n\nCS610\nAdvanced Algorithms \n2021\n\n\n\n\n\nES301\nData Structures and Algorithms II \n2021\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2020\n\n\n\n\n\nES102\nComputing \n2020\n\n\n\n\n\nSpecial Topics\nCS Theory Toolkit \n2020\n\n\n\n\n\nES214\nDiscrete Mathematics \n2020\n\n\n\n\n\nES242\nData Structures and Algorithms - I \n2019\n\n\n\n\n\nST601\nSocial Networks \n2019\n\n\n\n\n\nES214\nDiscrete Mathematics \n2019\n\n\n\n\n\nCS610\nAdvanced Algorithms \n2019\n\n\n\n\n\nMA607\nGraph Theory and Applications \n2018\n\n\n\n\n\nES112\nComputing \n2018\n\n\n\n\n\nES102\nIntroduction to Computing \n2018\n\n\n\n\n\nES112\nComputing \n2017\n\n\n\n\n\nMA607\nGraph Theory and Applications \n2017\n\n\n\n\n\nFP601\nCultures of Communication \n2017\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2016\n\n\n\n\n\nFP601\nCultures of Communication \n2016\n\n\n\n\n\nCS321\nAnalysis and Design of Algorithms \n2016\n\n\n\n\n\nCS607\nCombinatorics with Applications in Computer Science \n2016\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/03-FP601/index.html",
    "href": "2016/03-FP601/index.html",
    "title": "FP601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/03-FP601/index.html#fp601.",
    "href": "2016/03-FP601/index.html#fp601.",
    "title": "FP601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/01-CS607/index.html",
    "href": "2016/01-CS607/index.html",
    "title": "CS607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/01-CS607/index.html#cs607.",
    "href": "2016/01-CS607/index.html#cs607.",
    "title": "CS607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "online.html",
    "href": "online.html",
    "title": "Online Courses",
    "section": "",
    "text": "I teach some of my courses online. Two of them — Parameterized Algorithms and Getting Started with Competitive Programming — are featured on NPTEL, and one of them — Advanced Algorithms — is a part of the curriculum of the online BS program run by IIT Madras.\nThe following is a list of the times these courses were offered. Currently links are to external listings, from where you can find most of the common materials (e.g, recorded videos), but in due course I hope to share here the materials that were specific to those cohorts (e.g, assignments and exams).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2025\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2025\n\n\n\n\n\nNOC25 CS36\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2025\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2024\n\n\n\n\n\nNOC24 117\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2024\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2024\n\n\n\n\n\nNOC24 CS29\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2024\n\n\n\n\n\nNOC24 CS29\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2024\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2023\n\n\n\n\n\nNOC23 CS102\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2023\n\n\n\n\n\nNOC23 CS103\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2023\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2023\n\n\n\n\n\nNOC23 CS30\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2023\n\n\n\n\n\nNOC22 CS81\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2022\n\n\n\n\n\nNOC22 CS82\nGetting Started with Competitive Programming \n2022\n\n\n\n\n\nNOC22 CS59\nGetting Started with Competitive Programming \n2022\n\n\n\n\n\nNOC21 CS92\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2021\n\n\n\n\n\nNOC21 CS99\nGetting Started with Competitive Programming\nCo-instructor with Arjun Arul \n2021\n\n\n\n\n\nNOC21 CS80\nDiscrete Mathematics\nFacilitating co-instructor • Course by Sudarshan Iyengar \n2021\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "online.html#online-courses",
    "href": "online.html#online-courses",
    "title": "Online Courses",
    "section": "",
    "text": "I teach some of my courses online. Two of them — Parameterized Algorithms and Getting Started with Competitive Programming — are featured on NPTEL, and one of them — Advanced Algorithms — is a part of the curriculum of the online BS program run by IIT Madras.\nThe following is a list of the times these courses were offered. Currently links are to external listings, from where you can find most of the common materials (e.g, recorded videos), but in due course I hope to share here the materials that were specific to those cohorts (e.g, assignments and exams).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2025\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2025\n\n\n\n\n\nNOC25 CS36\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2025\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2024\n\n\n\n\n\nNOC24 117\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2024\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2024\n\n\n\n\n\nNOC24 CS29\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2024\n\n\n\n\n\nNOC24 CS29\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2024\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2023\n\n\n\n\n\nNOC23 CS102\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2023\n\n\n\n\n\nNOC23 CS103\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2023\n\n\n\n\n\nBSCS4021\nAdvanced Algorithms \n2023\n\n\n\n\n\nNOC23 CS30\nGetting Started with Competitive Programming\nCo-instructor with Atul. \n2023\n\n\n\n\n\nNOC22 CS81\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2022\n\n\n\n\n\nNOC22 CS82\nGetting Started with Competitive Programming \n2022\n\n\n\n\n\nNOC22 CS59\nGetting Started with Competitive Programming \n2022\n\n\n\n\n\nNOC21 CS92\nParameterized Algorithms\nCo-instructor with Saket Saurabh \n2021\n\n\n\n\n\nNOC21 CS99\nGetting Started with Competitive Programming\nCo-instructor with Arjun Arul \n2021\n\n\n\n\n\nNOC21 CS80\nDiscrete Mathematics\nFacilitating co-instructor • Course by Sudarshan Iyengar \n2021\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/02-ES102/index.html",
    "href": "2018/02-ES102/index.html",
    "title": "ES102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/02-ES102/index.html#es102.",
    "href": "2018/02-ES102/index.html#es102.",
    "title": "ES102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/02-ST601/index.html",
    "href": "2020/02-ST601/index.html",
    "title": "ST601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/02-ST601/index.html#st601.",
    "href": "2020/02-ST601/index.html#st601.",
    "title": "ST601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/03-ES102/index.html",
    "href": "2020/03-ES102/index.html",
    "title": "ES102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/03-ES102/index.html#es102.",
    "href": "2020/03-ES102/index.html#es102.",
    "title": "ES102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-noc21-cs99/index.html",
    "href": "2021/03-noc21-cs99/index.html",
    "title": "noc21-cs99 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-noc21-cs99/index.html#noc21-cs99.",
    "href": "2021/03-noc21-cs99/index.html#noc21-cs99.",
    "title": "noc21-cs99 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/01-ES301/index.html",
    "href": "2021/01-ES301/index.html",
    "title": "ES301 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/01-ES301/index.html#es301.",
    "href": "2021/01-ES301/index.html#es301.",
    "title": "ES301 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-noc21-cs92/index.html",
    "href": "2021/03-noc21-cs92/index.html",
    "title": "noc21-cs92 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-noc21-cs92/index.html#noc21-cs92.",
    "href": "2021/03-noc21-cs92/index.html#noc21-cs92.",
    "title": "noc21-cs92 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-ST601/index.html",
    "href": "2019/03-ST601/index.html",
    "title": "ST601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-ST601/index.html#st601.",
    "href": "2019/03-ST601/index.html#st601.",
    "title": "ST601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/01-CS610/index.html",
    "href": "2019/01-CS610/index.html",
    "title": "CS610 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/01-CS610/index.html#cs610.",
    "href": "2019/01-CS610/index.html#cs610.",
    "title": "CS610 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/01-ES214/index.html",
    "href": "2019/01-ES214/index.html",
    "title": "ES214 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/01-ES214/index.html#es214.",
    "href": "2019/01-ES214/index.html#es214.",
    "title": "ES214 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/01-MA607/index.html",
    "href": "2017/01-MA607/index.html",
    "title": "MA607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/01-MA607/index.html#ma607.",
    "href": "2017/01-MA607/index.html#ma607.",
    "title": "MA607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/03-GIAN/index.html",
    "href": "2017/03-GIAN/index.html",
    "title": "GIAN | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/03-GIAN/index.html#gian.",
    "href": "2017/03-GIAN/index.html#gian.",
    "title": "GIAN | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teaching",
    "section": "",
    "text": "Background\nI am attempting to catalog here courses that I have either taught, co-taught, or organized over the years.\nAt the moment, this is not much more than just a record of courses with some faint memories of logistics. The actual material in most cases is largely locked away in whatever LMS I happened to fancy that term (this is varied between Canvas, Gradescope, Google Classrooms, and Moodle; and now-defunct platforms like Examineer and Replit for Education). In the coming months I hope to port over as much as I can and I will report my progress here.\n\nIIT Gandhinagar\nDuring the fall term, I typically teach either Discrete Mathematics for undergraduates or “DSA-I”, which is the first part of our second-year undergraduate course on data structures and algorithms. In the early days, I’ve also occassionally taught the IITGN equivalent of CS101. During the spring term, I either teach “DSA-II” or Advanced Algorithms. More recently, I have started also (co-)teaching some of our AI/ML courses for undergraduate audiences.\nI’ve typically teach one of Combinatorics with Applications to Computer Science, Graph Theory, Social Networks, or a topics course as my second course, and these are usually graduate-level courses, but often taken by a few undergraduates as well.\nBefore joining IIT Gandhinagar, I ran a course on parameterized algorithms at IISc (CSA), and a few informal reading groups. These were very memorable adventures from my point of view: sadly, I don’t have reciepts from those times :)\n\n\nOnline\nSince 2021 Fall, NPTEL has been running two courses that I co-teach: Getting Started with Competitive Programming (both summer and winter terms; the first edition was created in collaboration with Arjun Arul, and future editions have been supported by Atul) and Parameterized Algorithms (every winter term; joint with Saket Saurabh). Also, since 2022, I teach an elective course (Advanced Algorithms) that runs twice a year in the IIT Madras online BS program. For now, the materials for all these courses are available through their respective platforms. The CP course has a Discord server that is now peer-driven with TA support, and the BS course has its own Discourse community. In the near future, I hope to make most of these materials also directly available from here.\n\n\nOther Courses\nI also organize, every so often, short courses and workshops on technical and non-technical topics. Those are listed here too. A short course upcoming on the second weekend of March happens to be about card magic and will be offered by Prof. Ramprasad Saptharishi.\nIf you would like to offer a short course or workshop at IIT Gandhinagar (typically ~10 hours, either spread out as 2 hours per day across 5 weekday evenings, or held in bootcamp mode over a weekend), please ping me at neeldhara.m -AT- iitgn.ac.in.\n\nPS. I’ve also recently started organizing online reading groups for books. I now track them on a separate website.\nPPS. I omit from here records of summer and winter schools organized in the past. However, I hope to add these in the foreseeable future."
  },
  {
    "objectID": "2023/02-GAMES/index.html",
    "href": "2023/02-GAMES/index.html",
    "title": "CS 699 | Summer 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nWe are going to play some games! Here are some typical questions we will explore:\n\nWho is going to win assuming optimal play?\nWhat is the complexity of determining the winner (or a winning strategy) given the rules of a game?\n\nIf you are curious about how this typically goes, start with the excellent talks here and here.\nIf you want to play: here’s Subtraction, and here’s Sim.\nThis is an informal summer reading group.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou enjoy playing games,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course is self-contained and involves no pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nWinning Ways for your Mathematical Plays, the classic book that is an amazing ride through all parts of CGT.\nLessons in Play, an excellent text for upper level undergrads and grad students in math.\nCombinatorial Game Theory, a great text for advanced mathematicians.\nPlaying with Discrete Math. This text is appropriate for undergrads who may or may not be math majors.\nGames, puzzles and computation. This text, based on the thesis of Robert A. Hearn, explores computational aspects of games.\nIs NP-hard, a compendium of games with a lot of information about their complexity status.\nMath Games with Bad Drawings, another compendium of games, with — as the title suggestions — bad drawings and lots of trivia.\n\nNote. The descriptions for the first four books are borrowed from the Sprouts 2023 website.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nVenue: Online\nLectures: Everyday at 11AM\n\n\n\n\n\nNote: We stopped recording after a couple of weeks, however, the topics pursued are listed for the record :) Some initial notes — to be developed further — are here. The handwritten slides from the videos are not currently available.\n\n\n    \n        Date\n        Lecture\n        Video\n    \n    \n    \n                    \n            \n                22 May, 2023\n            \n            \n                1. Impartial Game Trees\n                (0.1, 0.2, 0.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                23 May, 2023\n            \n            \n                2. Game Sums\n                (0.4, 0.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                24 May, 2023\n            \n            \n                3. Game Equivalences\n                (0.4, 0.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                25 May, 2023\n            \n            \n                4. Nimbers\n                (0.6, 0.7 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Jun, 2023\n            \n            \n                5. Nim Sums\n                (0.6, 0.7 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Jun, 2023\n            \n            \n                6. Other Impartial Games\n                (0.8 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Jun, 2023\n            \n            \n                7. Sequences of impartial game values\n                (0.9 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Jun, 2023\n            \n            \n                8. Geography\n                (1.1 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Jun, 2023\n            \n            \n                9. Undirected Edge Geography\n                (1.2 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                10 Jun, 2023\n            \n            \n                10. Directed Geography\n                (1.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Jun, 2023\n            \n            \n                11. Partisan Game Notation\n                (2.1 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                12 Jun, 2023\n            \n            \n                12. Game Trees and Outcome Classes\n                (2.2 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                13 Jun, 2023\n            \n            \n                13. Partisan Game Sums\n                (2.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                14 Jun, 2023\n            \n            \n                14. Negatives and Equality\n                (2.4 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                15 Jun, 2023\n            \n            \n                15. Inequalities\n                (2.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                16 Jun, 2023\n            \n            \n                16. Dominated Options\n                (2.6 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jun, 2023\n            \n            \n                17. Integers\n                (3.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jun, 2023\n            \n            \n                18. Simplest Numbers\n                (3.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jun, 2023\n            \n            \n                19. Switches\n                (3.3 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jun, 2023\n            \n            \n                20. Other rational game value\n                (3.4 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Jun, 2023\n            \n            \n                21. Infinitesimals\n                (3.5 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jun, 2023\n            \n            \n                22. They-Love-Me-They-Love-Me-Nc\n                (4.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jun, 2023\n            \n            \n                23. Determining Winnability\n                (4.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jun, 2023\n            \n            \n                24. Which Move Should we Make?\n                (4.3 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jun, 2023\n            \n            \n                25. More strategy stealing.\n                (4.4 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Jun, 2023\n            \n            \n                26. Card games\n                (5.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jun, 2023\n            \n            \n                27. Dice and role-playing games\n                (5.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Jun, 2023\n            \n            \n                28. Birthdays\n                (6.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Jun, 2023\n            \n            \n                29. SUMMARY OF PART I\n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Jun, 2023\n            \n            \n                30. Introducing Complexity Classes and Constraint\n                Logic  (1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Jul, 2023\n            \n            \n                31. Constraint Graphs\n                (2.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Jul, 2023\n            \n            \n                32. Planar Constraint Graphs\n                (2.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Jul, 2023\n            \n            \n                33. Constraint-Graph Conversion Techniques\n                (2.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                04 Jul, 2023\n            \n            \n                34. Zero-Player Games (Simulations)\n                (3.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Jul, 2023\n            \n            \n                35. One-Player Games (Puzzles)\n                (3.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                06 Jul, 2023\n            \n            \n                36. Two-Player Games\n                (3.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Jul, 2023\n            \n            \n                37. Team Games\n                (3.4 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                08 Jul, 2023\n            \n            \n                38. Bounded Games (Zero-Player)\n                (4.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                09 Jul, 2023\n            \n            \n                39. Unbounded Games (Zero-Player)\n                (4.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Jul, 2023\n            \n            \n                40. Bounded Games (One-Player)\n                (5.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Jul, 2023\n            \n            \n                41. Unbounded Games (One-Player)\n                (5.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jul, 2023\n            \n            \n                42. Bounded Games (Two-Player)\n                (6.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Jul, 2023\n            \n            \n                43. Unbounded Games (Two-Player)\n                (6.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                14 Jul, 2023\n            \n            \n                44. No-Repeat Games (Two-Player)\n                (6.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Jul, 2023\n            \n            \n                45. Bounded Games (Team)\n                (7.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Jul, 2023\n            \n            \n                46. Unbounded Games (Team)\n                (7.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jul, 2023\n            \n            \n                47. TipOver\n                (9.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jul, 2023\n            \n            \n                48. Hitori\n                (9.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jul, 2023\n            \n            \n                49. Sliding-Block Puzzles\n                (9.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jul, 2023\n            \n            \n                50. The Warehouseman’s Problem\n                (9.4 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Jul, 2023\n            \n            \n                51. Sliding-Coin Puzzles\n                (9.5 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jul, 2023\n            \n            \n                52. Plank Puzzles\n                (9.6 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jul, 2023\n            \n            \n                53. Sokoban\n                (9.7 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jul, 2023\n            \n            \n                54. Push-2-F\n                (9.8 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jul, 2023\n            \n            \n                55. Rush Hour\n                (9.9 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Jul, 2023\n            \n            \n                56. Triangular Rush Hour\n                (9.10 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jul, 2023\n            \n            \n                57. Hinged Polygon Dissections\n                (9.11 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Jul, 2023\n            \n            \n                58. SUMMARY OF PART II\n                \n            \n            \n                \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/02-GAMES/index.html#reading-group-on-combinatorial-and-computational-aspects-of-games",
    "href": "2023/02-GAMES/index.html#reading-group-on-combinatorial-and-computational-aspects-of-games",
    "title": "CS 699 | Summer 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nWe are going to play some games! Here are some typical questions we will explore:\n\nWho is going to win assuming optimal play?\nWhat is the complexity of determining the winner (or a winning strategy) given the rules of a game?\n\nIf you are curious about how this typically goes, start with the excellent talks here and here.\nIf you want to play: here’s Subtraction, and here’s Sim.\nThis is an informal summer reading group.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou enjoy playing games,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course is self-contained and involves no pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nWinning Ways for your Mathematical Plays, the classic book that is an amazing ride through all parts of CGT.\nLessons in Play, an excellent text for upper level undergrads and grad students in math.\nCombinatorial Game Theory, a great text for advanced mathematicians.\nPlaying with Discrete Math. This text is appropriate for undergrads who may or may not be math majors.\nGames, puzzles and computation. This text, based on the thesis of Robert A. Hearn, explores computational aspects of games.\nIs NP-hard, a compendium of games with a lot of information about their complexity status.\nMath Games with Bad Drawings, another compendium of games, with — as the title suggestions — bad drawings and lots of trivia.\n\nNote. The descriptions for the first four books are borrowed from the Sprouts 2023 website.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nVenue: Online\nLectures: Everyday at 11AM\n\n\n\n\n\nNote: We stopped recording after a couple of weeks, however, the topics pursued are listed for the record :) Some initial notes — to be developed further — are here. The handwritten slides from the videos are not currently available.\n\n\n    \n        Date\n        Lecture\n        Video\n    \n    \n    \n                    \n            \n                22 May, 2023\n            \n            \n                1. Impartial Game Trees\n                (0.1, 0.2, 0.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                23 May, 2023\n            \n            \n                2. Game Sums\n                (0.4, 0.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                24 May, 2023\n            \n            \n                3. Game Equivalences\n                (0.4, 0.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                25 May, 2023\n            \n            \n                4. Nimbers\n                (0.6, 0.7 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Jun, 2023\n            \n            \n                5. Nim Sums\n                (0.6, 0.7 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Jun, 2023\n            \n            \n                6. Other Impartial Games\n                (0.8 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Jun, 2023\n            \n            \n                7. Sequences of impartial game values\n                (0.9 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Jun, 2023\n            \n            \n                8. Geography\n                (1.1 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Jun, 2023\n            \n            \n                9. Undirected Edge Geography\n                (1.2 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                10 Jun, 2023\n            \n            \n                10. Directed Geography\n                (1.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Jun, 2023\n            \n            \n                11. Partisan Game Notation\n                (2.1 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                12 Jun, 2023\n            \n            \n                12. Game Trees and Outcome Classes\n                (2.2 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                13 Jun, 2023\n            \n            \n                13. Partisan Game Sums\n                (2.3 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                14 Jun, 2023\n            \n            \n                14. Negatives and Equality\n                (2.4 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                15 Jun, 2023\n            \n            \n                15. Inequalities\n                (2.5 in PWDM)\n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                16 Jun, 2023\n            \n            \n                16. Dominated Options\n                (2.6 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jun, 2023\n            \n            \n                17. Integers\n                (3.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jun, 2023\n            \n            \n                18. Simplest Numbers\n                (3.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jun, 2023\n            \n            \n                19. Switches\n                (3.3 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jun, 2023\n            \n            \n                20. Other rational game value\n                (3.4 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Jun, 2023\n            \n            \n                21. Infinitesimals\n                (3.5 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jun, 2023\n            \n            \n                22. They-Love-Me-They-Love-Me-Nc\n                (4.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jun, 2023\n            \n            \n                23. Determining Winnability\n                (4.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jun, 2023\n            \n            \n                24. Which Move Should we Make?\n                (4.3 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jun, 2023\n            \n            \n                25. More strategy stealing.\n                (4.4 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Jun, 2023\n            \n            \n                26. Card games\n                (5.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jun, 2023\n            \n            \n                27. Dice and role-playing games\n                (5.2 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Jun, 2023\n            \n            \n                28. Birthdays\n                (6.1 in PWDM)\n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Jun, 2023\n            \n            \n                29. SUMMARY OF PART I\n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Jun, 2023\n            \n            \n                30. Introducing Complexity Classes and Constraint\n                Logic  (1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Jul, 2023\n            \n            \n                31. Constraint Graphs\n                (2.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Jul, 2023\n            \n            \n                32. Planar Constraint Graphs\n                (2.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Jul, 2023\n            \n            \n                33. Constraint-Graph Conversion Techniques\n                (2.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                04 Jul, 2023\n            \n            \n                34. Zero-Player Games (Simulations)\n                (3.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Jul, 2023\n            \n            \n                35. One-Player Games (Puzzles)\n                (3.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                06 Jul, 2023\n            \n            \n                36. Two-Player Games\n                (3.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Jul, 2023\n            \n            \n                37. Team Games\n                (3.4 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                08 Jul, 2023\n            \n            \n                38. Bounded Games (Zero-Player)\n                (4.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                09 Jul, 2023\n            \n            \n                39. Unbounded Games (Zero-Player)\n                (4.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Jul, 2023\n            \n            \n                40. Bounded Games (One-Player)\n                (5.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Jul, 2023\n            \n            \n                41. Unbounded Games (One-Player)\n                (5.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jul, 2023\n            \n            \n                42. Bounded Games (Two-Player)\n                (6.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Jul, 2023\n            \n            \n                43. Unbounded Games (Two-Player)\n                (6.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                14 Jul, 2023\n            \n            \n                44. No-Repeat Games (Two-Player)\n                (6.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Jul, 2023\n            \n            \n                45. Bounded Games (Team)\n                (7.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Jul, 2023\n            \n            \n                46. Unbounded Games (Team)\n                (7.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jul, 2023\n            \n            \n                47. TipOver\n                (9.1 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jul, 2023\n            \n            \n                48. Hitori\n                (9.2 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jul, 2023\n            \n            \n                49. Sliding-Block Puzzles\n                (9.3 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jul, 2023\n            \n            \n                50. The Warehouseman’s Problem\n                (9.4 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Jul, 2023\n            \n            \n                51. Sliding-Coin Puzzles\n                (9.5 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jul, 2023\n            \n            \n                52. Plank Puzzles\n                (9.6 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jul, 2023\n            \n            \n                53. Sokoban\n                (9.7 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jul, 2023\n            \n            \n                54. Push-2-F\n                (9.8 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jul, 2023\n            \n            \n                55. Rush Hour\n                (9.9 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Jul, 2023\n            \n            \n                56. Triangular Rush Hour\n                (9.10 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jul, 2023\n            \n            \n                57. Hinged Polygon Dissections\n                (9.11 in GPC)\n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Jul, 2023\n            \n            \n                58. SUMMARY OF PART II\n                \n            \n            \n                \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-ES242/quizzes/a03.html",
    "href": "2023/01-ES242/quizzes/a03.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n\\(6n\\)\n\\(4n\\)\n\\(3n\\)\nNone of the above\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nObserve that every guest knows at most six people: indeed, if some guest (say P) knows seven people, among the people s/he knows, there must be a pair (say A and B) that know each other; but then we would have a group of three guests, consisting of P, A, and B who all know each other, which contradicts the first condition. So the number of relationships leading to the giving of gifts in this party is at most \\(6n\\) (summing up, for all guests, the people they know), so \\(6n\\) is a valid upper bound for the total number of gifts given.\nThere can be parties where more than \\(4n\\) gifts are given. For example, consider a party where there are two groups of six people each: call these groups \\(X\\) and \\(Y\\). Suppose everyone in \\(X\\) knows everyone in \\(Y\\) and vice versa, but no pair of people in group \\(X\\) know each other and no pair of people in \\(Y\\) know each other either. Then there are \\(12\\) people, each of whom give six gifts each, amounting to a total of \\(72\\) gifts being given, which is more than \\(4n = 4 \\cdot 12 = 48\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: NO.\nConsider any person P in a party of six people and note that they either:\n\nknow three people or more, or\ndo not know three people or more.\n\nIndeed, if neither of the above holds, then they:\n\nknow at most two people, and\ndo not know at most two people,\n\nbut this only accounts for four people among the remaining five.\nNow suppose P knows three people: call them A, B, C. If any pair of these three people know each other, then we have three guests who are mutual friends: P along with this pair. If not, then we have a group of three guests who are mutual strangers. So at least one of these two scenarios is always unavoidable.\n\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: YES.\nConsider five people A, B, C, D, and E; where:\n\nA knows B\nB knows C\nC knows D\nD knows E\nE knows A\n\nDrawn out as a graph (with undirected edges representing the “knowing each other” relationship, which was given to be mutual), this will look like a pentagon or a cycle on five vertices. Note that there is no triangle, and no subset of three vertices with no edges between them. This is equivalent to saying that there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers, as asked."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a03.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/a03.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n\\(6n\\)\n\\(4n\\)\n\\(3n\\)\nNone of the above\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nObserve that every guest knows at most six people: indeed, if some guest (say P) knows seven people, among the people s/he knows, there must be a pair (say A and B) that know each other; but then we would have a group of three guests, consisting of P, A, and B who all know each other, which contradicts the first condition. So the number of relationships leading to the giving of gifts in this party is at most \\(6n\\) (summing up, for all guests, the people they know), so \\(6n\\) is a valid upper bound for the total number of gifts given.\nThere can be parties where more than \\(4n\\) gifts are given. For example, consider a party where there are two groups of six people each: call these groups \\(X\\) and \\(Y\\). Suppose everyone in \\(X\\) knows everyone in \\(Y\\) and vice versa, but no pair of people in group \\(X\\) know each other and no pair of people in \\(Y\\) know each other either. Then there are \\(12\\) people, each of whom give six gifts each, amounting to a total of \\(72\\) gifts being given, which is more than \\(4n = 4 \\cdot 12 = 48\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: NO.\nConsider any person P in a party of six people and note that they either:\n\nknow three people or more, or\ndo not know three people or more.\n\nIndeed, if neither of the above holds, then they:\n\nknow at most two people, and\ndo not know at most two people,\n\nbut this only accounts for four people among the remaining five.\nNow suppose P knows three people: call them A, B, C. If any pair of these three people know each other, then we have three guests who are mutual friends: P along with this pair. If not, then we have a group of three guests who are mutual strangers. So at least one of these two scenarios is always unavoidable.\n\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is: YES.\nConsider five people A, B, C, D, and E; where:\n\nA knows B\nB knows C\nC knows D\nD knows E\nE knows A\n\nDrawn out as a graph (with undirected edges representing the “knowing each other” relationship, which was given to be mutual), this will look like a pentagon or a cycle on five vertices. Note that there is no triangle, and no subset of three vertices with no edges between them. This is equivalent to saying that there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers, as asked."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a04.html",
    "href": "2023/01-ES242/quizzes/a04.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet \\(n\\) be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of \\(n\\) in binary.\nThe reverse of the representation of \\(n\\) in binary.\nMeaningless and has nothing to do with \\(n\\).\n\n\n\n\n\n\n\n\n\nClarification\n\n\n\nWhen we say “until the number is reduced to 0”, the successive divisions are meant to be applied on the quotient obtained from the previous divison operation. Also, note that we push to the top and pop from the bottom of the stack.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis is the standard algorithm for converting a number from decimal to binary notation. Let us look at an example execution with the number 19:\n\nthe first divison yields a remainder of 1 with a quotient of 9,\nthe second divison yields a remainder of 1 with a quotient of 4,\nthe third divison yields a remainder of 0 with a quotient of 2,\nthe fourth divison yields a remainder of 0 with a quotient of 1,\nthe fifth divison yields a remainder of 1 with a quotient of 0,\n\nWe push 1, 1, 0, 0, and 1 on to the stack in that order. We pop from the bottom, so the output we get is the numbers pushed on to the stack in the same order as they were pushed: 11001 — note that if we popped from the top, then the output would have reversed this order.\nThe correct answer is that the output is the reverse of the representation of \\(n\\) in binary. We omit here a formal justification of this fact, but you can convince yourself by combining your understanding of the standard conversion algorithm along with the behavior of the stack operations.\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\(\\ell\\) does NOT have an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is at least the number of B’s.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSince the described behavior of the stack implicitly guarantees a bijection between the A’s and B’s in the string, the first option is not true. Also, consider the sequence \\(\\ell\\) given by AB. It matches the described behavior, and does not begin with ABBA, so the second and fourth options are also false (set \\(k = 1\\) for option four).\nTo see that the third option is indeed true, notice that if it was not, then there exists some \\(k \\in [\\ell]\\) for which the first \\(k\\) entries of the sequence \\(\\ell\\) have strictly more B’s than A’s, but in this situation notice that we would have to attempt popping from an empty stack: but it is promised that this does happen.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\(\\ell\\) has an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is strictly more than the number of B’s.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe first option is not definitely true: for example, the sequence ABB would match the described behavior and does not have an equal number of A’s and B’s. The second option is also not necessarily true for similar reasons. The example of the sequence B rules out the third option. Note that the fourth option must be true, because if it were not, then we would have the behavior described in the previous question instead of what is described here.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNote that three rooms have five doors, so such a path is not possible."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a04.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/a04.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet \\(n\\) be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of \\(n\\) in binary.\nThe reverse of the representation of \\(n\\) in binary.\nMeaningless and has nothing to do with \\(n\\).\n\n\n\n\n\n\n\n\n\nClarification\n\n\n\nWhen we say “until the number is reduced to 0”, the successive divisions are meant to be applied on the quotient obtained from the previous divison operation. Also, note that we push to the top and pop from the bottom of the stack.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis is the standard algorithm for converting a number from decimal to binary notation. Let us look at an example execution with the number 19:\n\nthe first divison yields a remainder of 1 with a quotient of 9,\nthe second divison yields a remainder of 1 with a quotient of 4,\nthe third divison yields a remainder of 0 with a quotient of 2,\nthe fourth divison yields a remainder of 0 with a quotient of 1,\nthe fifth divison yields a remainder of 1 with a quotient of 0,\n\nWe push 1, 1, 0, 0, and 1 on to the stack in that order. We pop from the bottom, so the output we get is the numbers pushed on to the stack in the same order as they were pushed: 11001 — note that if we popped from the top, then the output would have reversed this order.\nThe correct answer is that the output is the reverse of the representation of \\(n\\) in binary. We omit here a formal justification of this fact, but you can convince yourself by combining your understanding of the standard conversion algorithm along with the behavior of the stack operations.\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\(\\ell\\) does NOT have an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is at least the number of B’s.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSince the described behavior of the stack implicitly guarantees a bijection between the A’s and B’s in the string, the first option is not true. Also, consider the sequence \\(\\ell\\) given by AB. It matches the described behavior, and does not begin with ABBA, so the second and fourth options are also false (set \\(k = 1\\) for option four).\nTo see that the third option is indeed true, notice that if it was not, then there exists some \\(k \\in [\\ell]\\) for which the first \\(k\\) entries of the sequence \\(\\ell\\) have strictly more B’s than A’s, but in this situation notice that we would have to attempt popping from an empty stack: but it is promised that this does happen.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\(\\ell\\) has an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is strictly more than the number of B’s.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe first option is not definitely true: for example, the sequence ABB would match the described behavior and does not have an equal number of A’s and B’s. The second option is also not necessarily true for similar reasons. The example of the sequence B rules out the third option. Note that the fourth option must be true, because if it were not, then we would have the behavior described in the previous question instead of what is described here.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNote that three rooms have five doors, so such a path is not possible."
  },
  {
    "objectID": "2023/01-ES242/quizzes/q02.html",
    "href": "2023/01-ES242/quizzes/q02.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02",
    "section": "",
    "text": "Issued: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\nSuppose \\(A\\) is the adjacency matrix of a simple undirected graph \\(G = (V,E)\\) with \\(n\\) vertices given by \\(\\{1,2,\\ldots,n\\}\\), that is,\n\\[\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\\]\nNote that \\(A[i,i] = 0\\) for all \\(i \\in \\{1,2,\\ldots,n\\}\\) since \\(G\\) is simple.\nSuppose \\((i,j) \\in E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\nSuppose \\((i,j) \\notin E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\nSuppose every vertex of a graph \\(G\\) on \\(n\\) vertices has \\(d\\) neighbors.\nWhat is the size of the edge list?\n\n\\(d \\cdot n\\)\n\\(d \\cdot n/2\\)\n\\(2d \\cdot n\\)\n\\((d + n)\\)\n\nIs it possible that both \\(d\\) and \\(n\\) are odd?\n\nYes\nNo"
  },
  {
    "objectID": "2023/01-ES242/quizzes/q02.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/q02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02",
    "section": "",
    "text": "Issued: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\nSuppose \\(A\\) is the adjacency matrix of a simple undirected graph \\(G = (V,E)\\) with \\(n\\) vertices given by \\(\\{1,2,\\ldots,n\\}\\), that is,\n\\[\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\\]\nNote that \\(A[i,i] = 0\\) for all \\(i \\in \\{1,2,\\ldots,n\\}\\) since \\(G\\) is simple.\nSuppose \\((i,j) \\in E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\nSuppose \\((i,j) \\notin E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\nSuppose every vertex of a graph \\(G\\) on \\(n\\) vertices has \\(d\\) neighbors.\nWhat is the size of the edge list?\n\n\\(d \\cdot n\\)\n\\(d \\cdot n/2\\)\n\\(2d \\cdot n\\)\n\\((d + n)\\)\n\nIs it possible that both \\(d\\) and \\(n\\) are odd?\n\nYes\nNo"
  },
  {
    "objectID": "2023/01-ES242/quizzes/q04.html",
    "href": "2023/01-ES242/quizzes/q04.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet \\(n\\) be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of \\(n\\) in binary.\nThe reverse of the representation of \\(n\\) in binary.\nMeaningless and has nothing to do with \\(n\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\(\\ell\\) does NOT have an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is at least the number of B’s.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\(\\ell\\) has an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is strictly more than the number of B’s.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo"
  },
  {
    "objectID": "2023/01-ES242/quizzes/q04.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/q04.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 04",
    "section": "",
    "text": "Issued: 24 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Divide by two\n\n\n\nLet \\(n\\) be a number given in decimal notation. Divide the number by two and push the remainder of each division onto to a cardstack until the number is reduced to 0. Then we pop all elements from the bottom. What is the output?\n\nThe representation of \\(n\\) in binary.\nThe reverse of the representation of \\(n\\) in binary.\nMeaningless and has nothing to do with \\(n\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Stacks I\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. You never had to pop from an empty stack, and at the end, your stack is empty. Which of the following is true?\n\nThe sequence \\(\\ell\\) does NOT have an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is at least the number of B’s.\nFor any \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is at least the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Stacks II\n\n\n\nYou have a sequence \\(\\ell\\) of A’s and B’s. You initialize an empty stack S.\nYou read the sequence \\(\\ell\\) from left to right. Every time you see an A, you push 0 on to S. Every time you see a B, you pop from S. At some point, you had to stop because you were trying to pop from an empty stack. Which of the following is definitely true?\n\nThe sequence \\(\\ell\\) has an equal number of A’s and B’s.\nThe sequence \\(\\ell\\) started with ABBA.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of A’s is strictly more than the number of B’s.\nFor some \\(1 \\leq k \\leq \\ell\\), if you read first \\(k\\) entries of the sequence \\(\\ell\\) the number of B’s is strictly more than the number of A’s.\n\n\n\n\n\n\n\n\n\nProblem 3. Navigate this apartment\n\n\n\nConsider the floor plan shown below of a 5-room apartment.\nCan you find a continuous line that pass through each door exactly once? The line does not have to end where it started. Note that there is space to move around the big enclosing rectangle.\n\n\n\nA floor plan\n\n\n\nYes\nNo"
  },
  {
    "objectID": "2023/01-ES242/exams/exam02.html",
    "href": "2023/01-ES242/exams/exam02.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 02",
    "section": "",
    "text": "Issued: 31 Mar, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\nPart 1 consists of 5 multiple choice questions, worth 2 points each and is available directly on Gradescope.\nPart 2 consists of 3 programming assignments. Attempt one of problems 1 and 2; and attempt problem 3. The problems are worth 5 points each.\nTotal marks are capped at 20, there is no partial grading or negative marking.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\nUseful resources that you can access during the exam:\n\nBFS/DFS lecture notes\nBFS implementation with sorted neighbors\nDFS implementation with reverse sorted neighbors (so that they are visited in the sorted order)\n\n\n\n\n\n\n\n\n\nProblem 1. Shortest Distance\n\n\n\nGiven an undirected graph \\(G = (V,E)\\) and two specified vertices \\(s\\) and \\(t\\), determine the length of the shortest path between \\(s\\) and \\(t\\), where the length of a path is defined as the number of edges on the path.\nHint: start a BFS at \\(s\\). The BFS layer number of \\(t\\) is the answer, where the layer number of vertex \\(s\\) is \\(0\\). If \\(t\\) does not appear in the BFS traversal starting from \\(s\\), then there no path from \\(s\\) to \\(t\\).\n\n\nThe first line of input is three space-separated integers n, m, s and t, denoting the number of vertices and edges of G, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: print a single integer d, the length of the shortest path between \\(s\\) and \\(t\\).\n\n\n\nSample Input\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n2\n\n\n\n\n\n\n\n\n\nProblem 2. Bags of Pebbles\n\n\n\nMahi and Brishti are playing with bags of pebbles. They have a row \\(a\\) of \\(n\\) bags of pebbles. The \\(i\\)-th bag has \\(a_i\\) pebbles. The bags are given to the players in the order from the first bag to the \\(n\\)-th bag.\nIf a bag has an even number of pebbles, Mahi grabs the bag. Otherwise, Brishti grabs the bag. Once a bag is grabbed, the number of pebbles in it gets added to the total number of pebbles of the player that took it.\nMahi wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no pebbles), Mahi will have strictly more pebbles than Brishti. Help Mahi find out if such a reordering exists.\n\n\n\nThe first line of the input contains an integer \\(t(1 \\leq t \\leq 1000)-\\) the number of test cases.\nThe first line of each test case contains a single integer \\(n(1 \\leq n \\leq 100)\\) - the number of bags in the array.\nThe second line of each test case contains \\(n\\) space-separated integers \\(a_i\\left(1 \\leq a_i \\leq 100\\right)\\) - the number of pebbles in each bag.\n\n\n\n\nFor each test case, output “YES” (without quotes) if such a reordering exists, and “NO” (without quotes) otherwise.\n\n\n\nSample Input\n3\n4\n1 2 3 4\n4\n1 1 1 2\n3\n1 4 3\nSample Output\nYES\nNO\nNO\nNote In the first test case, Mahi can reorder the array as follows: \\([4,1,2,3]\\). Then the process proceeds as follows: - the first bag has 4 pebbles, which is even, so Mahi takes it - Mahi has 4 pebbles, and Brishti has 0 . - the second bag has 1 pebbles, which is odd, so Brishti takes it - Mahi has 4 pebbles, and Brishti has 1. - the third bag has 2 pebbles, which is even, so Mahi takes it - Mahi has 6 pebbles, and Brishti has 1 . - the fourth bag has 3 pebbles, which is odd, so Brishti takes it - Mahi has 6 pebbles, and Brishti has 4. Since Mahi always has more pebbles than Brishti, this reordering works.\n\n\n\n\n\n\n\n\n\nProblem 3. Learning Languages\n\n\n\nIITGN has \\(n\\) students. These students can use \\(m\\) languages for correspondence. The languages are numbered with integers from \\(1\\) to \\(m\\). For each student we have the list of languages, which s/he knows. This list could be empty, i. e. a student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\nHint. Translate this into a graph where you have \\(n\\) vertices representing the students and \\(m\\) vertices representing languages. If this graph is fully connected then no money needs to be spent. Otherwise think of how much it costs to connect all the connected components of the graph. Which components do you need to worry about? Think about the special case when all students know no languages.\n\n\nThe first line contains two integers \\(n\\) and \\(m\\) \\((2 \\leqslant n, m \\leqslant 100)\\) — the number of students and the number of languages.\nThen \\(n\\) lines follow — each student’s language list. At the beginning of the \\(i\\)-th line is integer ki \\((0 \\leqslant k_i \\leqslant m)\\) — the number of languages the i-th student knows. Next, the \\(i\\)-th line contains \\(k_i\\) integers — \\(a_{ij}\\) \\((1 \\leqslant aij \\leqslant m)\\) — the identifiers of languages the \\(i\\)-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\nThe numbers in the lines are separated by single spaces.\n\n\n\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n\n\nSample Input\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\nSample Output\n0\nSample Input\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\nSample Output\n2\nSample Input\n2 2\n1 2\n0\nSample Output\n1\n\n\n\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\nIn the third sample student 2 must learn language 2."
  },
  {
    "objectID": "2023/01-ES242/exams/exam02.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/exams/exam02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Exam 02",
    "section": "",
    "text": "Issued: 31 Mar, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 2 at the usual classroom venue. The exam will be released on Gradescope by 9PM, and will be available until 10:30PM.\nPart 1 consists of 5 multiple choice questions, worth 2 points each and is available directly on Gradescope.\nPart 2 consists of 3 programming assignments. Attempt one of problems 1 and 2; and attempt problem 3. The problems are worth 5 points each.\nTotal marks are capped at 20, there is no partial grading or negative marking.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\nUseful resources that you can access during the exam:\n\nBFS/DFS lecture notes\nBFS implementation with sorted neighbors\nDFS implementation with reverse sorted neighbors (so that they are visited in the sorted order)\n\n\n\n\n\n\n\n\n\nProblem 1. Shortest Distance\n\n\n\nGiven an undirected graph \\(G = (V,E)\\) and two specified vertices \\(s\\) and \\(t\\), determine the length of the shortest path between \\(s\\) and \\(t\\), where the length of a path is defined as the number of edges on the path.\nHint: start a BFS at \\(s\\). The BFS layer number of \\(t\\) is the answer, where the layer number of vertex \\(s\\) is \\(0\\). If \\(t\\) does not appear in the BFS traversal starting from \\(s\\), then there no path from \\(s\\) to \\(t\\).\n\n\nThe first line of input is three space-separated integers n, m, s and t, denoting the number of vertices and edges of G, and the id of the source vertex and the target vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: print a single integer d, the length of the shortest path between \\(s\\) and \\(t\\).\n\n\n\nSample Input\n6 8 0 5\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n2\n\n\n\n\n\n\n\n\n\nProblem 2. Bags of Pebbles\n\n\n\nMahi and Brishti are playing with bags of pebbles. They have a row \\(a\\) of \\(n\\) bags of pebbles. The \\(i\\)-th bag has \\(a_i\\) pebbles. The bags are given to the players in the order from the first bag to the \\(n\\)-th bag.\nIf a bag has an even number of pebbles, Mahi grabs the bag. Otherwise, Brishti grabs the bag. Once a bag is grabbed, the number of pebbles in it gets added to the total number of pebbles of the player that took it.\nMahi wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no pebbles), Mahi will have strictly more pebbles than Brishti. Help Mahi find out if such a reordering exists.\n\n\n\nThe first line of the input contains an integer \\(t(1 \\leq t \\leq 1000)-\\) the number of test cases.\nThe first line of each test case contains a single integer \\(n(1 \\leq n \\leq 100)\\) - the number of bags in the array.\nThe second line of each test case contains \\(n\\) space-separated integers \\(a_i\\left(1 \\leq a_i \\leq 100\\right)\\) - the number of pebbles in each bag.\n\n\n\n\nFor each test case, output “YES” (without quotes) if such a reordering exists, and “NO” (without quotes) otherwise.\n\n\n\nSample Input\n3\n4\n1 2 3 4\n4\n1 1 1 2\n3\n1 4 3\nSample Output\nYES\nNO\nNO\nNote In the first test case, Mahi can reorder the array as follows: \\([4,1,2,3]\\). Then the process proceeds as follows: - the first bag has 4 pebbles, which is even, so Mahi takes it - Mahi has 4 pebbles, and Brishti has 0 . - the second bag has 1 pebbles, which is odd, so Brishti takes it - Mahi has 4 pebbles, and Brishti has 1. - the third bag has 2 pebbles, which is even, so Mahi takes it - Mahi has 6 pebbles, and Brishti has 1 . - the fourth bag has 3 pebbles, which is odd, so Brishti takes it - Mahi has 6 pebbles, and Brishti has 4. Since Mahi always has more pebbles than Brishti, this reordering works.\n\n\n\n\n\n\n\n\n\nProblem 3. Learning Languages\n\n\n\nIITGN has \\(n\\) students. These students can use \\(m\\) languages for correspondence. The languages are numbered with integers from \\(1\\) to \\(m\\). For each student we have the list of languages, which s/he knows. This list could be empty, i. e. a student may know no languages. But the students are willing to learn any number of languages, as long as the IITGN pays for their lessons. A study course in one language for one student costs 5000 rupees.\nFind the minimum sum of money the IITGN needs to spend so as any student could talk to any other one (their correspondence can be indirect, i. e. other students can help out translating).\nHint. Translate this into a graph where you have \\(n\\) vertices representing the students and \\(m\\) vertices representing languages. If this graph is fully connected then no money needs to be spent. Otherwise think of how much it costs to connect all the connected components of the graph. Which components do you need to worry about? Think about the special case when all students know no languages.\n\n\nThe first line contains two integers \\(n\\) and \\(m\\) \\((2 \\leqslant n, m \\leqslant 100)\\) — the number of students and the number of languages.\nThen \\(n\\) lines follow — each student’s language list. At the beginning of the \\(i\\)-th line is integer ki \\((0 \\leqslant k_i \\leqslant m)\\) — the number of languages the i-th student knows. Next, the \\(i\\)-th line contains \\(k_i\\) integers — \\(a_{ij}\\) \\((1 \\leqslant aij \\leqslant m)\\) — the identifiers of languages the \\(i\\)-th student knows. It is guaranteed that all the identifiers in one list are distinct. Note that an student may know zero languages.\nThe numbers in the lines are separated by single spaces.\n\n\n\nPrint a single integer — the minimum amount of money to pay so that in the end every student could communicate with every other one (other students can help out translating).\n\n\n\nSample Input\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\nSample Output\n0\nSample Input\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\nSample Output\n2\nSample Input\n2 2\n1 2\n0\nSample Output\n1\n\n\n\nIn the second sample the student 1 can learn language 2, and student 8 can learn language 4.\nIn the third sample student 2 must learn language 2."
  },
  {
    "objectID": "2023/01-ES242/exams/solutions01.html",
    "href": "2023/01-ES242/exams/solutions01.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 01 - Solutions",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nRemark\n\n\n\nThe question indices may be different from what you see on Gradescope because of the extra confidence rating questions. Multiply by two and subtract one from the question number to map it to Gradescope :)\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIf the top face is rotated then the bottom face is the only face that is certainly not affected. The top face itself may not be affected (for example, when all stickers on the top face have the same color), however, this is not guaranteed.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWhile the index of the location in the linked list can be calculated in constant time, since we do not have direct access, the linked list approach will require more steps in the worst case.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe answer is 32 by direct inspection.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe cubie approach requires employing a total of 40 units of memory, which is less than the 54 units we needed in the other two approaches.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four corner cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four edge cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFirst, let us argue that Z is a matching. Suppose not: this means that some woman appears in more than one pair. Suppose there are two men p and q who are both matched to a woman b. Then p and q both prefer b over their matched partners in the matching where they are not matched to b. Now:\n\nIf b prefers p over q, and p was matched to b in the matching X, then observe that b must have been matched to q in Y and (p,b) is a blocking pair for Y.\nIf b prefers p over q, and p was matched to b in the matching Y, then observe that b must have been matched to q in X and (p,b) is a blocking pair for X.\nIf b prefers q over p, and q was matched to b in the matching X, then observe that b must have been matched to p in Y and (q,b) is a blocking pair for Y.\nIf b prefers q over p, and q was matched to b in the matching Y, then observe that b must have been matched to p in X and (q,b) is a blocking pair for X.\n\nIn all cases, we have a contradiction to the assumption that both X and Y are stable.\nSo Z is a matching. We now argue that Z is stable. Suppose not, and let (a,b) be a blocking pair in Z, with a being the man and b being the woman. Further, let the matched partner of a in Z be p and the matched partner of b in Z be q.\nNote that b was matched to q in either X or Y. Suppose b was matched to q in X. In X, a is matched either to p or someone that a prefers less to p. Since a prefers b over p (since (a,b) is a blocking pair), a prefers b over his matched partner in X. We already know that b prefers a over q for the same reason. So, (a,b) remains a blocking pair in the matching X, which contradicts our assumption that X was stable.\nA similar argument holds if b was matched to q in Y, where we contradict the stability of Y instead.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIt turns out that Z is always a stable matching, the argument is analogous to the previous question.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array \\(A\\) and the number of days \\(D\\). Let \\(f(A,D)\\) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate \\(f(A,D)\\). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if \\(A\\) is the array (1,2,1,3) and \\(D = 0\\) then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and \\(D = 1\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n34\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf \\(A =\\) (500) and \\(D = 120\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and \\(D = 10\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf \\(A\\) has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. A Bit of a Graph\n\n\n\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex \\(u\\) is denoted by \\(b_u\\); and\nan edge from \\(u\\) to \\(v\\) if the corresponding bit strings are such that the last three bits of \\(b_u\\) is the same as the first three bits of \\(b_v\\).\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n16\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n32\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTwo\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYes"
  },
  {
    "objectID": "2023/01-ES242/exams/solutions01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/exams/solutions01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Exam 01 - Solutions",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nRemark\n\n\n\nThe question indices may be different from what you see on Gradescope because of the extra confidence rating questions. Multiply by two and subtract one from the question number to map it to Gradescope :)\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIf the top face is rotated then the bottom face is the only face that is certainly not affected. The top face itself may not be affected (for example, when all stickers on the top face have the same color), however, this is not guaranteed.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWhile the index of the location in the linked list can be calculated in constant time, since we do not have direct access, the linked list approach will require more steps in the worst case.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe answer is 32 by direct inspection.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe cubie approach requires employing a total of 40 units of memory, which is less than the 54 units we needed in the other two approaches.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four corner cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nSince only four edge cubes are involved in one rotation, the answer is 4. Note that the set of affected cubies is the same for 90 and 180 degree rotations of the top face.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFirst, let us argue that Z is a matching. Suppose not: this means that some woman appears in more than one pair. Suppose there are two men p and q who are both matched to a woman b. Then p and q both prefer b over their matched partners in the matching where they are not matched to b. Now:\n\nIf b prefers p over q, and p was matched to b in the matching X, then observe that b must have been matched to q in Y and (p,b) is a blocking pair for Y.\nIf b prefers p over q, and p was matched to b in the matching Y, then observe that b must have been matched to q in X and (p,b) is a blocking pair for X.\nIf b prefers q over p, and q was matched to b in the matching X, then observe that b must have been matched to p in Y and (q,b) is a blocking pair for Y.\nIf b prefers q over p, and q was matched to b in the matching Y, then observe that b must have been matched to p in X and (q,b) is a blocking pair for X.\n\nIn all cases, we have a contradiction to the assumption that both X and Y are stable.\nSo Z is a matching. We now argue that Z is stable. Suppose not, and let (a,b) be a blocking pair in Z, with a being the man and b being the woman. Further, let the matched partner of a in Z be p and the matched partner of b in Z be q.\nNote that b was matched to q in either X or Y. Suppose b was matched to q in X. In X, a is matched either to p or someone that a prefers less to p. Since a prefers b over p (since (a,b) is a blocking pair), a prefers b over his matched partner in X. We already know that b prefers a over q for the same reason. So, (a,b) remains a blocking pair in the matching X, which contradicts our assumption that X was stable.\nA similar argument holds if b was matched to q in Y, where we contradict the stability of Y instead.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIt turns out that Z is always a stable matching, the argument is analogous to the previous question.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array \\(A\\) and the number of days \\(D\\). Let \\(f(A,D)\\) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate \\(f(A,D)\\). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if \\(A\\) is the array (1,2,1,3) and \\(D = 0\\) then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and \\(D = 1\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n34\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf \\(A =\\) (500) and \\(D = 120\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and \\(D = 10\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf \\(A\\) has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. A Bit of a Graph\n\n\n\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex \\(u\\) is denoted by \\(b_u\\); and\nan edge from \\(u\\) to \\(v\\) if the corresponding bit strings are such that the last three bits of \\(b_u\\) is the same as the first three bits of \\(b_v\\).\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n16\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n32\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTwo\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYes"
  },
  {
    "objectID": "2023/01-ES242/index.html",
    "href": "2023/01-ES242/index.html",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely: and what that means is to work backwards from what you want to do with your information, so that your storage style is optimized for the specific way in which you need to work with your data.\nFor example, the notes you might be taking in this class is a kind of information.\nIf you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will understand such trade-offs in several scenarios.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures: Tuesdays and Thursdays, 9PM - 10:30PM\nLab: Fridays, 9PM - 10:30PM\nVenue: 1/102 (all sessions)\nNote: Please bring your laptops to all classes.\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nYash More\nGaurav Viramgami\nReuben Devanesan\nXhitij\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade. The first exam will be pen-and-paper exams, the second exam will be a lab exam, and the third exam will be a viva.\nLabs for Weeks 1 — 4 count for two points each on an all-or-none basis. The seven problems in labs for Weeks 6,8 and 10 have seven problems worth 2 points each. Labs for Weeks 12 and 13 will count for two points each on an all-or-none basis. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nQuizzes 2, 3, and 4 count for 2 points each. Assignments 1, 2, and 3 count for 7 points each. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nThere is no mandatory attendance requirement for this course, although it is strongly recommended that you attend classes, labs, and the ADH sessions.\n\n\n\n\n\n\n\n\n\n\nRegistration & Logistics\n\n\n\n\n\nIf you are at IIT Gandhinagar and would like to take up this course for credit, please fill up this form by midnight on the 30th of December to indicate your interest. \nAll weekly quizzes, labs, and exams will be managed via Gradescope. You can sign up using the entry code G2ZG3X.\nCourse announcements will be posted on this page. They will also be mirrored to this broadcast-only Whatsapp group.\nYou are welcome to post any comments/questions/feedback related to the course in the discussions tab of this page.\n\n\n\nNote: contents being actively updated at the time of this writing.\n\nLecturesLabsQuizzesExamsAnnouncementsDiscussions\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n03 Jan, 2023\n1. Introduction to Data Structures [W1]\nData Structures - philosophy and examples • Representing games\n\n\n\n\n\n05 Jan, 2023\n2. Stable Marriages [W1]\nThe Stable Marriage Problem • Gale-Shapley Algorithm\n\n\n\n\n\n10 Jan, 2023\n3. Representing Sequential Data [W2]\nArrays • Lists • Implementing the Gale-Shapley Algorithm\n\n\n\n\n\n12 Jan, 2023\n4. Representing Graphs [W2]\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n17 Jan, 2023\n5. Dequeues [W3]\nThe Gilbreath Shuffle • Properties of the shuffle\n\n\n\n\n\n19 Jan, 2023\n6. Dequeues [W3]\nQueues and Stacks as special cases of Dequeues\n\n\n\n\n\n24 Jan, 2023\n7. Euler Tours [W4]\nEuler Tour Demonstration • The Bridges of Königsberg\n\n\n\n\n\n31 Jan, 2023\n8. Euler Tours [W5]\nComputing Euler Tours • Hierholzer's algorithm\n\n\n\n\n\n02 Feb, 2023\n9. Recap Class [W5]\nReview of topics covered so far.\n\n\n\n\n\n09 Feb, 2023\n10. Navigating Graphs (BFS) [W6]\nBreadth-First Search • Correctness • Analysis of Running Time\n\n\n\n\n\n14 Feb, 2023\n11. BFS Applications [W7]\nShortest Paths • Pseudopolynomial algorithm for weighted graphs\n\n\n\n\n\n16 Feb, 2023\n12. Exam [W7]\nSyllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n\n\n\n\n\n21 Feb, 2023\n13. Navigating Graphs (DFS) - I [W8]\nDepth-First Search • Implementation with Stacks\n\n\n\n\n\n23 Feb, 2023\n14. Navigating Graphs (DFS) - II [W8]\nDepth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n\n\n\n\n\n03 Mar, 2023\n15. BFS and DFS Applications [W9]\nTesting Bipartiteness • Topological Sort\n\n\n\n\n\n16 Mar, 2023\n16. Sorting Algorithms [W10]\nExamples of Sorting Algorithms • Properties of sorting algorithms\n\n\n\n\n\n21 Mar, 2023\n17. Asymptotics [W10]\nComparing Algorithms by Performance • Big-O Notation\n\n\n\n\n\n28 Mar, 2023\n18. Heaps [W12]\nSupporting only Insert and FindMin • The challenge of ExtractMin • The Heap Property • Insert • FindMin • ExtractMin\n\n\n\n\n\n06 Apr, 2023\n19. Heaps [W13]\nRepresenting Heaps with Arrays • Analysis: Heapify in Linear Time\n\n\n\n\n\n11 Apr, 2023\n20. Trees [W14]\nRooted Trees • Inorder, Preorder, and Postorder Traversals\n\n\n\n\n\n13 Apr, 2023\n21. Search [W14]\nBinary Search • Ternary Search\n\n\n\n\n\n18 Apr, 2023\n22. Balanced Binary Search Trees [W15]\nIntroduction to BSTs • (2,3)-Trees\n\n\n\n\n\n20 Apr, 2023\n23. Balanced Binary Search Trees [W15]\nInsertion in (2,3)-Trees • Analysis of Height\n\n\n\n\n\n25 Apr, 2023\n24. Balanced Binary Search Trees [W16]\nDeletion in (2,3)-Trees\n\n\n\n\n\n27 Apr, 2023\n25. Recap [W16]\nReview of topics covered so far.\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                06 Jan, 2023\n            \n            \n                W01. Introduction to C\n                CountDown •  Life Goal •  Game of Trust •  Rock Papers Scissors •  Finding the Coefficient •  Validating a Self-Working Card Trick [Optional] •  Stable Marriage [Optional]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Jan, 2023\n            \n            \n                W02. Lists and Arrays\n                Sorting a List • Sorting a List: Challenge the Solution • Maintain a Network • Stable Matchings\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jan, 2023\n            \n            \n                W03. The Cardstack\n                Linked Lists • Parentheses • Challenge the Parentheses Solution • Print Alternate Cards\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jan, 2023\n            \n            \n                W04. Graph Representations and Euler Tours\n                Adjacency Matrix • Adjacency List • Edge List • Sanity Check • Which Way is the Highway? [Optional] • Edge Orientation Puzzle [Optional]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Feb, 2023\n            \n            \n                W05. Recap Lab\n                Reviewed unsolved and practice problems.\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Feb, 2023\n            \n            \n                W06. Navigating Graphs (BFS)\n                BFS Implementation • Unique Servers\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Feb, 2023\n            \n            \n                W07. No Lab\n                Classes Suspended\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Feb, 2023\n            \n            \n                W08. Navigating Graphs (DFS)\n                DFS Implementation • Is it a DAG?\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Feb, 2023\n            \n            \n                W09. BFS Implementation\n                BFS Implementation Recap\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Mar, 2023\n            \n            \n                W09. DFS Implementation\n                DFS Implementation Recap\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Mar, 2023\n            \n            \n                W10. BFS/DFS Practice Problems\n                Make It Happen • Switching Lines • Prolonged Vacation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Apr, 2023\n            \n            \n                W13. Heaps\n                Heap operations (ExtractMax, Delete, Insert) • Heapify • Heapsort\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuizzes will be administered online and in the classroom via Gradescope. If a quiz is submitted for evaluation in absence, then it amounts to a violation of the honor code and will result in a disqualification from the course.\nUpdate: The quizzes in the course have been discontinued, and will be replaced with assignments. There will be 12 assignments worth 2 points each that will be made available in due course.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                05 Jan, 2023\n            \n            \n                Quiz 01\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jan, 2023\n            \n            \n                Quiz 02\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jan, 2023\n            \n            \n                Quiz 03\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jan, 2023\n            \n            \n                Quiz 04\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                16 Feb, 2023\n            \n            \n                Exam 1\n                Syllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                \n            \n            \n                Exam 2 (Lab)\n                Syllabus: arrays, lists, stacks, queues, graphs, BFS/DFS\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                \n            \n            \n                Exam 3\n                Syllabus: BFS/DFS, heaps, sorting algorithms, tree traversals, 2,3-trees\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n02/17. Solutions to Exam 1 are now available.\n02/03. Lecture slides and notes up to date for the lectures so far.\n01/25. Solutions to Quiz 04 are now available.\n01/20. Solutions to Quiz 03 are now available.\n01/13. Solutions to Quiz 02 are now available.\n01/11. Materials for the first two weeks (i.e, notes and slides the first four lectures) are now available.\n01/10. Solutions to Quiz 01 are now available.\n01/01. The timings are now fixed. The lectures will be held on Tuesdays and Thursdays, 9PM - 10:30PM while the lab will be during Fridays, 9PM - 10:30PM. The venue for all sessions is AB 1/102. Please bring your laptops to all sessions.\n29/12. The course is open for enrolments and will be available from IMS soon. The timings are TBD. Please fill up this form to indicate your interest in joining the course."
  },
  {
    "objectID": "2023/01-ES242/index.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/index.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely: and what that means is to work backwards from what you want to do with your information, so that your storage style is optimized for the specific way in which you need to work with your data.\nFor example, the notes you might be taking in this class is a kind of information.\nIf you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will understand such trade-offs in several scenarios.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures: Tuesdays and Thursdays, 9PM - 10:30PM\nLab: Fridays, 9PM - 10:30PM\nVenue: 1/102 (all sessions)\nNote: Please bring your laptops to all classes.\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nYash More\nGaurav Viramgami\nReuben Devanesan\nXhitij\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade. The first exam will be pen-and-paper exams, the second exam will be a lab exam, and the third exam will be a viva.\nLabs for Weeks 1 — 4 count for two points each on an all-or-none basis. The seven problems in labs for Weeks 6,8 and 10 have seven problems worth 2 points each. Labs for Weeks 12 and 13 will count for two points each on an all-or-none basis. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nQuizzes 2, 3, and 4 count for 2 points each. Assignments 1, 2, and 3 count for 7 points each. The total number of points you can earn from quizzes and assignments combined is capped at 20.\nThere is no mandatory attendance requirement for this course, although it is strongly recommended that you attend classes, labs, and the ADH sessions.\n\n\n\n\n\n\n\n\n\n\nRegistration & Logistics\n\n\n\n\n\nIf you are at IIT Gandhinagar and would like to take up this course for credit, please fill up this form by midnight on the 30th of December to indicate your interest. \nAll weekly quizzes, labs, and exams will be managed via Gradescope. You can sign up using the entry code G2ZG3X.\nCourse announcements will be posted on this page. They will also be mirrored to this broadcast-only Whatsapp group.\nYou are welcome to post any comments/questions/feedback related to the course in the discussions tab of this page.\n\n\n\nNote: contents being actively updated at the time of this writing.\n\nLecturesLabsQuizzesExamsAnnouncementsDiscussions\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n03 Jan, 2023\n1. Introduction to Data Structures [W1]\nData Structures - philosophy and examples • Representing games\n\n\n\n\n\n05 Jan, 2023\n2. Stable Marriages [W1]\nThe Stable Marriage Problem • Gale-Shapley Algorithm\n\n\n\n\n\n10 Jan, 2023\n3. Representing Sequential Data [W2]\nArrays • Lists • Implementing the Gale-Shapley Algorithm\n\n\n\n\n\n12 Jan, 2023\n4. Representing Graphs [W2]\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n17 Jan, 2023\n5. Dequeues [W3]\nThe Gilbreath Shuffle • Properties of the shuffle\n\n\n\n\n\n19 Jan, 2023\n6. Dequeues [W3]\nQueues and Stacks as special cases of Dequeues\n\n\n\n\n\n24 Jan, 2023\n7. Euler Tours [W4]\nEuler Tour Demonstration • The Bridges of Königsberg\n\n\n\n\n\n31 Jan, 2023\n8. Euler Tours [W5]\nComputing Euler Tours • Hierholzer's algorithm\n\n\n\n\n\n02 Feb, 2023\n9. Recap Class [W5]\nReview of topics covered so far.\n\n\n\n\n\n09 Feb, 2023\n10. Navigating Graphs (BFS) [W6]\nBreadth-First Search • Correctness • Analysis of Running Time\n\n\n\n\n\n14 Feb, 2023\n11. BFS Applications [W7]\nShortest Paths • Pseudopolynomial algorithm for weighted graphs\n\n\n\n\n\n16 Feb, 2023\n12. Exam [W7]\nSyllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n\n\n\n\n\n21 Feb, 2023\n13. Navigating Graphs (DFS) - I [W8]\nDepth-First Search • Implementation with Stacks\n\n\n\n\n\n23 Feb, 2023\n14. Navigating Graphs (DFS) - II [W8]\nDepth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n\n\n\n\n\n03 Mar, 2023\n15. BFS and DFS Applications [W9]\nTesting Bipartiteness • Topological Sort\n\n\n\n\n\n16 Mar, 2023\n16. Sorting Algorithms [W10]\nExamples of Sorting Algorithms • Properties of sorting algorithms\n\n\n\n\n\n21 Mar, 2023\n17. Asymptotics [W10]\nComparing Algorithms by Performance • Big-O Notation\n\n\n\n\n\n28 Mar, 2023\n18. Heaps [W12]\nSupporting only Insert and FindMin • The challenge of ExtractMin • The Heap Property • Insert • FindMin • ExtractMin\n\n\n\n\n\n06 Apr, 2023\n19. Heaps [W13]\nRepresenting Heaps with Arrays • Analysis: Heapify in Linear Time\n\n\n\n\n\n11 Apr, 2023\n20. Trees [W14]\nRooted Trees • Inorder, Preorder, and Postorder Traversals\n\n\n\n\n\n13 Apr, 2023\n21. Search [W14]\nBinary Search • Ternary Search\n\n\n\n\n\n18 Apr, 2023\n22. Balanced Binary Search Trees [W15]\nIntroduction to BSTs • (2,3)-Trees\n\n\n\n\n\n20 Apr, 2023\n23. Balanced Binary Search Trees [W15]\nInsertion in (2,3)-Trees • Analysis of Height\n\n\n\n\n\n25 Apr, 2023\n24. Balanced Binary Search Trees [W16]\nDeletion in (2,3)-Trees\n\n\n\n\n\n27 Apr, 2023\n25. Recap [W16]\nReview of topics covered so far.\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                06 Jan, 2023\n            \n            \n                W01. Introduction to C\n                CountDown •  Life Goal •  Game of Trust •  Rock Papers Scissors •  Finding the Coefficient •  Validating a Self-Working Card Trick [Optional] •  Stable Marriage [Optional]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Jan, 2023\n            \n            \n                W02. Lists and Arrays\n                Sorting a List • Sorting a List: Challenge the Solution • Maintain a Network • Stable Matchings\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Jan, 2023\n            \n            \n                W03. The Cardstack\n                Linked Lists • Parentheses • Challenge the Parentheses Solution • Print Alternate Cards\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Jan, 2023\n            \n            \n                W04. Graph Representations and Euler Tours\n                Adjacency Matrix • Adjacency List • Edge List • Sanity Check • Which Way is the Highway? [Optional] • Edge Orientation Puzzle [Optional]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Feb, 2023\n            \n            \n                W05. Recap Lab\n                Reviewed unsolved and practice problems.\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Feb, 2023\n            \n            \n                W06. Navigating Graphs (BFS)\n                BFS Implementation • Unique Servers\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Feb, 2023\n            \n            \n                W07. No Lab\n                Classes Suspended\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Feb, 2023\n            \n            \n                W08. Navigating Graphs (DFS)\n                DFS Implementation • Is it a DAG?\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                28 Feb, 2023\n            \n            \n                W09. BFS Implementation\n                BFS Implementation Recap\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Mar, 2023\n            \n            \n                W09. DFS Implementation\n                DFS Implementation Recap\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Mar, 2023\n            \n            \n                W10. BFS/DFS Practice Problems\n                Make It Happen • Switching Lines • Prolonged Vacation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Apr, 2023\n            \n            \n                W13. Heaps\n                Heap operations (ExtractMax, Delete, Insert) • Heapify • Heapsort\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuizzes will be administered online and in the classroom via Gradescope. If a quiz is submitted for evaluation in absence, then it amounts to a violation of the honor code and will result in a disqualification from the course.\nUpdate: The quizzes in the course have been discontinued, and will be replaced with assignments. There will be 12 assignments worth 2 points each that will be made available in due course.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                05 Jan, 2023\n            \n            \n                Quiz 01\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jan, 2023\n            \n            \n                Quiz 02\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Jan, 2023\n            \n            \n                Quiz 03\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jan, 2023\n            \n            \n                Quiz 04\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                16 Feb, 2023\n            \n            \n                Exam 1\n                Syllabus: representations, arrays, lists, stacks, queues, dequeues, Euler tours, stable marriages\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                \n            \n            \n                Exam 2 (Lab)\n                Syllabus: arrays, lists, stacks, queues, graphs, BFS/DFS\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                \n            \n            \n                Exam 3\n                Syllabus: BFS/DFS, heaps, sorting algorithms, tree traversals, 2,3-trees\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n02/17. Solutions to Exam 1 are now available.\n02/03. Lecture slides and notes up to date for the lectures so far.\n01/25. Solutions to Quiz 04 are now available.\n01/20. Solutions to Quiz 03 are now available.\n01/13. Solutions to Quiz 02 are now available.\n01/11. Materials for the first two weeks (i.e, notes and slides the first four lectures) are now available.\n01/10. Solutions to Quiz 01 are now available.\n01/01. The timings are now fixed. The lectures will be held on Tuesdays and Thursdays, 9PM - 10:30PM while the lab will be during Fridays, 9PM - 10:30PM. The venue for all sessions is AB 1/102. Please bring your laptops to all sessions.\n29/12. The course is open for enrolments and will be available from IMS soon. The timings are TBD. Please fill up this form to indicate your interest in joining the course."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w06.html",
    "href": "2023/01-ES242/labs/lab-w06.html",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBreadth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement BFS\n\n\n\n\n\nIn this exercise your goal is to output a BFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0\n1 2 3 4\n5\n\n\n\n\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper printing of whitespace in the output.\n\n\n\n\n\n\nProblem 2. Unique Servers\n\n\n\n\n\nNetworking company Dagm is reponsible for extending internet services to town Xelo with n devices. To deploy such services, and guarantee their connection to the internet, Dagm has set up x services in its head office.\nYou are given a matrix same_server[n][n] which denotes if two devices are always connected to the same server. It implies, same_serve[i][j]=1 if device i and j are facilitated by the same server. Else, it is 0.\nYour task is compute the number x. That is, the number of unique servers set up by Dagm.\nYou are asked to complete the count_unique_servers() function in line 8\nConsider the illustration below:\n\n\n\nAn Example\n\n\nHere, number of unique servers is 2 (S1 and S2).\n\n\nThe first line contains an integer n, the number of devices in the city. The next n input line contains n space separated integers (0 or 1).\n\n\n\nOutput a single number representing the answer.\nSample Input 1\n7\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n0 0 0 1 0 1 1\nSample Output 1\n2\n\nSample Input 2\n10 \n1 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 1\nSample Output 2\n10\n\n\n\n\n\n\n\n\n\nWonderland Chase This Google Code Jam Finals problem from 2022 has a small test case that can be solved by brute force but you’d need to apply BFS to solve the advanced test set.\nBlizzard Basin This Day 24 AoC question from 2022 involves a constantly changing graph. Can you make your way out? Give it a shot!"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w06.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w06.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBreadth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement BFS\n\n\n\n\n\nIn this exercise your goal is to output a BFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is formatted as follows: if the BFS lasts for t rounds, there are t lines of output. The i-th line consists of a space-separated list of the vertices visited by BFS in the i-th round of the traversal in increasing order of labels.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0\n1 2 3 4\n5\n\n\n\n\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper printing of whitespace in the output.\n\n\n\n\n\n\nProblem 2. Unique Servers\n\n\n\n\n\nNetworking company Dagm is reponsible for extending internet services to town Xelo with n devices. To deploy such services, and guarantee their connection to the internet, Dagm has set up x services in its head office.\nYou are given a matrix same_server[n][n] which denotes if two devices are always connected to the same server. It implies, same_serve[i][j]=1 if device i and j are facilitated by the same server. Else, it is 0.\nYour task is compute the number x. That is, the number of unique servers set up by Dagm.\nYou are asked to complete the count_unique_servers() function in line 8\nConsider the illustration below:\n\n\n\nAn Example\n\n\nHere, number of unique servers is 2 (S1 and S2).\n\n\nThe first line contains an integer n, the number of devices in the city. The next n input line contains n space separated integers (0 or 1).\n\n\n\nOutput a single number representing the answer.\nSample Input 1\n7\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n1 1 1 0 1 0 0\n0 0 0 1 0 1 1\n0 0 0 1 0 1 1\nSample Output 1\n2\n\nSample Input 2\n10 \n1 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 1\nSample Output 2\n10"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w06.html#list-of-practice-problems",
    "href": "2023/01-ES242/labs/lab-w06.html#list-of-practice-problems",
    "title": "ES242. Data Structures and Algorithms I. Week 06 Lab",
    "section": "",
    "text": "Wonderland Chase This Google Code Jam Finals problem from 2022 has a small test case that can be solved by brute force but you’d need to apply BFS to solve the advanced test set.\nBlizzard Basin This Day 24 AoC question from 2022 involves a constantly changing graph. Can you make your way out? Give it a shot!"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w10.html",
    "href": "2023/01-ES242/labs/lab-w10.html",
    "title": "ES242. Data Structures and Algorithms I. Week 10 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBFS and DFS Puzzles\n\n\n\n\n\n\n\n\n\nProblem 1. Make It Happen\n\n\n\n\n\nYou are playing a game on a coordinate grid that has \\(n\\) special locations that we call magical. If you are at a magical location \\(L\\) at \\((p,q)\\), you can teleport to any other magical location that shares either the \\(x\\)-coordinate or the \\(y\\)-coordinate of \\(L\\). These teleports are your only way of moving in the landscape of the game.\nYou want to ensure that if you start at any magical location, you should be able to reach any other magical location. This may not be possible with the original set of magical locations. You can open up new magical locations anywhere you like, but opening a new location is expensive. Therefore, you want to open as few new ones as possible.\nThe goal in this problem is to determine the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\nThe first line of input contains a single integer n \\((1 \\leqslant n \\leqslant 100)\\) — the number of magical locations. Each of the following n lines contains two integers \\(x_i\\) and \\(y_i\\) (\\(1 \\leqslant x_i, y_i \\leqslant 1000\\)) — the coordinates of the i-th location.\nThe magical locations are all distinct.\n\n\n\nOutput the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\n\nSample Input\n2\n2 1\n1 2\nSample Output\n1\nSample Input\n2\n2 1\n4 1\nSample Output\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Switching Lines\n\n\n\n\n\nYou are trying to navigate the Ahmedabad Metro, which consists of N stations and M railway lines.\nThe stations are numbered 1 through N.\nEach line is operated by a company. Each company has an identification number.\nThe i-th (\\(1 \\leqslant i \\leqslant M\\)) line connects station \\(p_i\\) and \\(q_i\\) bidirectionally. There is no intermediate station. This line is operated by company \\(c_i\\).\nYou can change trains at a station where multiple lines are available.\nThe fare system used in this subway system works as follows.\n\nAs long as you only use lines that are operated by the same company, the fare remains 10 rupees.\nWhenever you change to a line that is operated by a different company from the current line, you will be charged an additional fare of 10 rupees.\nIn a case where you changed from some company A’s line to another company’s line, and then you change back to company A’s line, the additional fare is incurred again.\n\nYou begin at station 1 and you want to travel to station N using the metro. Find the minimum required fare.\n\n\nThe input is given in the following format. The first line consists of two space-separated integers, \\(N\\) and \\(M\\). Then, \\(M\\) lines follow. The i-th line consists of three space-separated numbers \\(p_i\\), \\(q_i\\) and \\(c_i\\).\nN M\np1 q1 c1\n.\n.\n.\npM qM cM\n\n\n\nPrint the minimum required fare. If it is impossible to get to station \\(N\\) by subway, print -1 instead.\nSample Input 1\n3 3\n1 2 1\n2 3 1\n3 1 2\nSample Output 1\n10\nUse only company 1’s lines.\nSample Input 2\n8 11\n1 3 1\n1 4 2\n2 3 1\n2 5 1\n3 4 3\n3 6 3\n3 7 3\n4 8 4\n5 6 1\n6 7 5\n7 8 5\nSample Output 2\n20\nFirst, use company 1’s lines: 1 → 3 → 2 → 5 → 6. Then, use company 5’s lines: 6 → 7 → 8.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Prolonged Vacation\n\n\n\n\n\nYou have won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, you want to max out on the prize and make the trip as long as possible.\nIn particular, you want to fly from Ahmedabad to Mumbai while visiting the maximum number of cities. You are given the list of possible flights, and you are also given that there are no directed cycles in the flight network.\n\n\nThe first input line has two integers \\(n\\) and \\(m\\): the number of cities and flights.\nThe cities are numbered \\(1,2,\\ldots,n\\).\nCity 1 is Ahmedabad, and City n is Mumbai.\nAfter this, there are \\(m\\) lines describing the flights. Each line has two integers \\(a\\) and \\(b\\): there is a flight from city \\(a\\) to city \\(b\\).\nNote that each flight is a one-way flight.\n\n\n\nFirst print the maximum number of cities on the route. If there are no solutions, print “IMPOSSIBLE”.\n(While this is not required for the lab submission, as a bonus problem, try to modify your code so that it also prints the cities in the order they will be visited.)\nSample Input\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\nSample Output\n4\nNote that 1 3 4 5 is a valid route."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w10.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w10.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 10 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nBFS and DFS Puzzles\n\n\n\n\n\n\n\n\n\nProblem 1. Make It Happen\n\n\n\n\n\nYou are playing a game on a coordinate grid that has \\(n\\) special locations that we call magical. If you are at a magical location \\(L\\) at \\((p,q)\\), you can teleport to any other magical location that shares either the \\(x\\)-coordinate or the \\(y\\)-coordinate of \\(L\\). These teleports are your only way of moving in the landscape of the game.\nYou want to ensure that if you start at any magical location, you should be able to reach any other magical location. This may not be possible with the original set of magical locations. You can open up new magical locations anywhere you like, but opening a new location is expensive. Therefore, you want to open as few new ones as possible.\nThe goal in this problem is to determine the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\nThe first line of input contains a single integer n \\((1 \\leqslant n \\leqslant 100)\\) — the number of magical locations. Each of the following n lines contains two integers \\(x_i\\) and \\(y_i\\) (\\(1 \\leqslant x_i, y_i \\leqslant 1000\\)) — the coordinates of the i-th location.\nThe magical locations are all distinct.\n\n\n\nOutput the smallest number of new magical locations that you have to open to achieve your goal of complete connectivity among magical locations.\n\n\n\nSample Input\n2\n2 1\n1 2\nSample Output\n1\nSample Input\n2\n2 1\n4 1\nSample Output\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Switching Lines\n\n\n\n\n\nYou are trying to navigate the Ahmedabad Metro, which consists of N stations and M railway lines.\nThe stations are numbered 1 through N.\nEach line is operated by a company. Each company has an identification number.\nThe i-th (\\(1 \\leqslant i \\leqslant M\\)) line connects station \\(p_i\\) and \\(q_i\\) bidirectionally. There is no intermediate station. This line is operated by company \\(c_i\\).\nYou can change trains at a station where multiple lines are available.\nThe fare system used in this subway system works as follows.\n\nAs long as you only use lines that are operated by the same company, the fare remains 10 rupees.\nWhenever you change to a line that is operated by a different company from the current line, you will be charged an additional fare of 10 rupees.\nIn a case where you changed from some company A’s line to another company’s line, and then you change back to company A’s line, the additional fare is incurred again.\n\nYou begin at station 1 and you want to travel to station N using the metro. Find the minimum required fare.\n\n\nThe input is given in the following format. The first line consists of two space-separated integers, \\(N\\) and \\(M\\). Then, \\(M\\) lines follow. The i-th line consists of three space-separated numbers \\(p_i\\), \\(q_i\\) and \\(c_i\\).\nN M\np1 q1 c1\n.\n.\n.\npM qM cM\n\n\n\nPrint the minimum required fare. If it is impossible to get to station \\(N\\) by subway, print -1 instead.\nSample Input 1\n3 3\n1 2 1\n2 3 1\n3 1 2\nSample Output 1\n10\nUse only company 1’s lines.\nSample Input 2\n8 11\n1 3 1\n1 4 2\n2 3 1\n2 5 1\n3 4 3\n3 6 3\n3 7 3\n4 8 4\n5 6 1\n6 7 5\n7 8 5\nSample Output 2\n20\nFirst, use company 1’s lines: 1 → 3 → 2 → 5 → 6. Then, use company 5’s lines: 6 → 7 → 8.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Prolonged Vacation\n\n\n\n\n\nYou have won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, you want to max out on the prize and make the trip as long as possible.\nIn particular, you want to fly from Ahmedabad to Mumbai while visiting the maximum number of cities. You are given the list of possible flights, and you are also given that there are no directed cycles in the flight network.\n\n\nThe first input line has two integers \\(n\\) and \\(m\\): the number of cities and flights.\nThe cities are numbered \\(1,2,\\ldots,n\\).\nCity 1 is Ahmedabad, and City n is Mumbai.\nAfter this, there are \\(m\\) lines describing the flights. Each line has two integers \\(a\\) and \\(b\\): there is a flight from city \\(a\\) to city \\(b\\).\nNote that each flight is a one-way flight.\n\n\n\nFirst print the maximum number of cities on the route. If there are no solutions, print “IMPOSSIBLE”.\n(While this is not required for the lab submission, as a bonus problem, try to modify your code so that it also prints the cities in the order they will be visited.)\nSample Input\n5 5\n1 2\n2 5\n1 3\n3 4\n4 5\nSample Output\n4\nNote that 1 3 4 5 is a valid route."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w01.html",
    "href": "2023/01-ES242/labs/lab-w01.html",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Practice problems to get used to C syntax.\n\n\n\nLearn C syntax:\n\nInteractive Tutorial\nCodeacademy Lessons\n\nMore practice problems:\n\nTry the first problem in any Codechef/Codeforces contest.\n\n\n\n\n\n\n\nProblem 1. CountDown\n\n\n\n\n\nPrint all non-negative integers less than or equal to \\(N\\) in descending order.\n\n\n\n\\(1 \\leq N \\leq 100\\)\n\\(N\\) is an integer.\n\n\n\n\nThe input is given from Standard Input in the following format:\nN\n\n\n\nPrint \\(X\\) lines, where \\(X\\) is the number of non-negative integers less than or equal to \\(N\\). For each \\(i = 1, 2, \\ldots, X\\), the \\(i\\)-th line should contain the \\(i\\)-th greatest non-negative integer less than or equal to N.\n\n\n\nSample Input\n22\nExpected Output\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Life Goal\n\n\n\n\n\n\nYou are standing at the origin of a number line. You want to make it to a treasure chest at coordinate \\(X\\).\nThere is a guard at coordinate \\(Y\\), who will block you if you encounter him on the way.\nHowever, there is a magic phrase written on a paper which is kept at coordinate \\(Z\\). If you pick up that paper, then you can whisper the magic phrase to the guard, who will then let you go.\nDetermine whether you can reach the goal. If you can, find the minimum total distance you need to travel to do so.\n\n\n\n\\(−1000 \\leq X,Y,Z \\leq 1000\\)\n\\(X, Y, Z\\) are distinct, and none of them is \\(0\\).\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format:\nX Y Z \n\n\n\nIf you can reach the goal, print the minimum total distance he needs to travel to do so. If he cannot, print -1 instead.\n\n\n\nSample Input\n10 -10 1\nSample Output\n10\nYou can go straight to the goal.\nSample Input\n20 10 -10\nSample Output\n40\nThe goal is beyond the guard. You can get there by first picking up the magic phrase and then getting past the guard.\nSample Input\n100 1 1000\nSample Output\n-1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by an always cheat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the always cheat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n5\n1 1 1 0 1\nExpected Output\n12 -4\n\n\n\n\n\n\n\n\n\n\nProblem 4. Rock Papers Scissors\n\n\n\n\n\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nYou are preparing for your first big RPS match. Someone has tipped you off with a strategy guide against your opponent on the first match, which consists of many rounds. The strategy guide can be interpreted as follows:\n\nThe first column of the i-th row is what your opponent is going to play in the i-th round: A for Rock, B for Paper, and C for Scissors.\nThe second column of the i-th row is what you should play in response in the i-th round: X for Rock, Y for Paper, and Z for Scissors.\n\nWinning every time would be suspicious, so the responses must have been carefully chosen.\nYour total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nYour task is to calculate the score you would get if you were to follow the strategy guide.\n\n\nThe first line of the input is a number N, which is the total number of rounds. The next N lines contain two space separated characters. The first character is one of A or B or C, and the second character is one of X or Y or Z.\n\n\n\nThe output shound be a single integer, your total score across all rounds based on the strategy guide.\n\n\n\nSample Input\n3\nA Y\nB X\nC Z\nExpected Output\n15\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\n\n\n\n\n\n\n\n\n\nProblem 5. Finding the Coefficient\n\n\n\n\n\n\\(p(x)\\) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of \\(p(2)\\) and a number \\(d\\).\nReturn YES if the coefficient of \\(x^d\\) in \\(p(x)\\) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. Validating a Self-Working Card Trick [Optional]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true.\n\n\n\n\n\n\n\n\n\nProblem 7. Stable Marriage [Optional]\n\n\n\n\n\nImplement the Stable Marriage algorithm discussed in class. You can practice on this Codechef problem."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Practice problems to get used to C syntax.\n\n\n\nLearn C syntax:\n\nInteractive Tutorial\nCodeacademy Lessons\n\nMore practice problems:\n\nTry the first problem in any Codechef/Codeforces contest.\n\n\n\n\n\n\n\nProblem 1. CountDown\n\n\n\n\n\nPrint all non-negative integers less than or equal to \\(N\\) in descending order.\n\n\n\n\\(1 \\leq N \\leq 100\\)\n\\(N\\) is an integer.\n\n\n\n\nThe input is given from Standard Input in the following format:\nN\n\n\n\nPrint \\(X\\) lines, where \\(X\\) is the number of non-negative integers less than or equal to \\(N\\). For each \\(i = 1, 2, \\ldots, X\\), the \\(i\\)-th line should contain the \\(i\\)-th greatest non-negative integer less than or equal to N.\n\n\n\nSample Input\n22\nExpected Output\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Life Goal\n\n\n\n\n\n\nYou are standing at the origin of a number line. You want to make it to a treasure chest at coordinate \\(X\\).\nThere is a guard at coordinate \\(Y\\), who will block you if you encounter him on the way.\nHowever, there is a magic phrase written on a paper which is kept at coordinate \\(Z\\). If you pick up that paper, then you can whisper the magic phrase to the guard, who will then let you go.\nDetermine whether you can reach the goal. If you can, find the minimum total distance you need to travel to do so.\n\n\n\n\\(−1000 \\leq X,Y,Z \\leq 1000\\)\n\\(X, Y, Z\\) are distinct, and none of them is \\(0\\).\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format:\nX Y Z \n\n\n\nIf you can reach the goal, print the minimum total distance he needs to travel to do so. If he cannot, print -1 instead.\n\n\n\nSample Input\n10 -10 1\nSample Output\n10\nYou can go straight to the goal.\nSample Input\n20 10 -10\nSample Output\n40\nThe goal is beyond the guard. You can get there by first picking up the magic phrase and then getting past the guard.\nSample Input\n100 1 1000\nSample Output\n-1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by an always cheat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the always cheat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n5\n1 1 1 0 1\nExpected Output\n12 -4\n\n\n\n\n\n\n\n\n\n\nProblem 4. Rock Papers Scissors\n\n\n\n\n\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nYou are preparing for your first big RPS match. Someone has tipped you off with a strategy guide against your opponent on the first match, which consists of many rounds. The strategy guide can be interpreted as follows:\n\nThe first column of the i-th row is what your opponent is going to play in the i-th round: A for Rock, B for Paper, and C for Scissors.\nThe second column of the i-th row is what you should play in response in the i-th round: X for Rock, Y for Paper, and Z for Scissors.\n\nWinning every time would be suspicious, so the responses must have been carefully chosen.\nYour total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nYour task is to calculate the score you would get if you were to follow the strategy guide.\n\n\nThe first line of the input is a number N, which is the total number of rounds. The next N lines contain two space separated characters. The first character is one of A or B or C, and the second character is one of X or Y or Z.\n\n\n\nThe output shound be a single integer, your total score across all rounds based on the strategy guide.\n\n\n\nSample Input\n3\nA Y\nB X\nC Z\nExpected Output\n15\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\n\n\n\n\n\n\n\n\n\nProblem 5. Finding the Coefficient\n\n\n\n\n\n\\(p(x)\\) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of \\(p(2)\\) and a number \\(d\\).\nReturn YES if the coefficient of \\(x^d\\) in \\(p(x)\\) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. Validating a Self-Working Card Trick [Optional]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true.\n\n\n\n\n\n\n\n\n\nProblem 7. Stable Marriage [Optional]\n\n\n\n\n\nImplement the Stable Marriage algorithm discussed in class. You can practice on this Codechef problem."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w02.html",
    "href": "2023/01-ES242/labs/lab-w02.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Arrays and Linked Lists\n\n\n\n\n\n\n\n\n\nProblem 1. Sorting a List\n\n\n\n\n\nYou are given a permutation \\(p\\)1 of length \\(n\\) and a positive integer \\(k \\leq n\\).\nIn one operation, you:\n\nChoose \\(k\\) distinct elements \\(p_{i_1}, p_{i_2}, \\ldots, p_{i_k}\\).\nRemove them and then add them sorted in increasing order to the end of the permutation.\n\nFor example, if \\(p=[2,5,1,3,4]\\) and \\(k=2\\) and you choose \\(5\\) and \\(3\\) as the elements for the operation, then:\n\\[[2,5,1,3,4] \\rightarrow[2,1,4,3,5].\\]\nFind the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so.\n\n\nThe first line contains a single integer \\(t\\left(1 \\leq t \\leq 10^4\\right)-\\) the number of test cases. The description of test cases follows.\nThe first line of each test case contains two integers \\(n\\) and \\(k\\left(2 \\leq n \\leq 10^5, 1 \\leq k \\leq n\\right)\\).\nThe second line of each test case contains \\(n\\) integers \\(p_1, p_2, \\ldots, p_n\\left(1 \\leq p_i \\leq n\\right)\\). It is guaranteed that \\(p\\) is a permutation.\nIt is guaranteed that the sum of \\(n\\) over all test cases does not exceed \\(10^5\\).\n\n\n\nFor each test case output a single integer - the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.\n\n\n\nSample Input\n4\n3 2\n1 2 3\n3 1\n3 1 2\n4 2\n1 3 2 4\n4 2\n2 3 1 4\nSample Output\n0\n1\n1\n2\nExplanation\nIn the first test case, the permutation is already sorted.\nIn the second test case, you can choose element \\(3\\), and the permutation will become sorted as follows: \\([3,1,2]\\rightarrow[1,2,3]\\).\nIn the third test case, you can choose elements \\(3\\) and \\(4\\), and the permutation will become sorted as follows: \\([1,3,2,4]\\rightarrow[1,2,3,4]\\)\nIn the fourth test case, it can be shown that it is impossible to sort the permutation in one operation. However, if you choose elements \\(2\\) and \\(1\\) in the first operation, and choose elements \\(3\\) and \\(4\\) in the second operation, the permutation will become sorted as follows: \\([2,3,1,4]\\rightarrow[3,4,1,2]\\rightarrow[1,2,3,4]\\).\n\n\n\n\n\n\n\n\n\n\nProblem 2. Sorting a List: Challenge the Solution\n\n\n\n\n\nConsider the following algorithm for solving the first problem:\ncurrent = 1\nanswer = 0\nwhile current &lt; n:\n    if the array is sorted:\n        break\n    if current + k - 1 &lt;= n:\n        Apply the operation to the elements [current, current+1, ..., current+k-1]\n    else:\n        Apply the operation to the elements [current, current+1, ..., n] \n    answer += 1\n    current += k\nreturn answer\nGive an example of input where this algorithm fails.\nName your input file tests.txt and make sure it has exactly two lines in the following format:\nN K\np1 p2 ... pn\nwhere the first line consists of two space-separated integers corresponding to N and K and the second line has n space-separated integers that form a permutation. You get a full score on this problem if your input is valid, and it causes the algorithm above to output a sub-optimal solution.\n\n\n\n\n\n\n\n\n\nProblem 3. Maintain a Network\n\n\n\n\n\nYou have just launched a social network for the IITGN community, called GYAN.\n\\(Q\\) operations have been performed since GYAN was launched. The \\(i\\)-th \\((1 \\leq i \\leq Q)\\) operation is represented by three integers \\(T_i, A_i\\), and \\(B_i\\), whose meanings are as follows:\n\nIf \\(T_i=1\\) : it means that user \\(A_i\\) follows user \\(B_i\\). If user \\(A_i\\) is already following user \\(B_i\\) at the time of this operation, it does not make any change.\nIf \\(T_i=2\\) : it means that user \\(A_i\\) unfollows user \\(B_i\\). If user \\(A_i\\) is not following user \\(B_i\\) at the time of this operation, it does not make any change.\nIf \\(T_i=3\\) : it means that you are asked to determine if users \\(A_i\\) and \\(B_i\\) are following each other. You need to print Yes if user \\(A_i\\) is following user \\(B_i\\) and user \\(B_i\\) is following user \\(A_i\\), and No otherwise.\n\nWhen the service was launched, no users were following any users.\nPrint the correct answers for all operations such that \\(T_i=3\\) in ascending order of \\(i\\).\n\n\n\n\\(2 \\leq N \\leq 10^4\\)\n\\(1 \\leq Q \\leq 2 \\times 10^5\\)\n\\(T_i=1,2,3(1 \\leq i \\leq Q)\\)\n\\(1 \\leq A_i \\leq N(1 \\leq i \\leq Q)\\)\n\\(1 \\leq B_i \\leq N(1 \\leq i \\leq Q)\\)\n\\(A_i \\neq B_i(1 \\leq i \\leq Q)\\)\nThere exists \\(i(1 \\leq i \\leq Q)\\) such that \\(T_i=3\\).\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format: \\[\n\\begin{array}{lll}\nN & Q & \\\\\nT_1 & A_1 & B_1 \\\\\nT_2 & A_2 & B_2 \\\\\n\\vdots & & \\\\\nT_Q & A_Q & B_Q\n\\end{array}\n\\]\n\n\n\nPrint \\(X\\) lines, where \\(X\\) is the number of \\(i\\) ’s \\((1 \\leq i \\leq Q)\\) such that \\(T_i=3\\). The \\(j\\)-th \\((1 \\leq j \\leq X)\\) line should contain the answer to the \\(j\\)-th operation such that \\(T_i=3\\).\n\n\n\nSample Input\n3 9\n1 1 2\n3 1 2\n1 2 1\n3 1 2\n1 2 3\n1 3 2\n3 1 3\n2 1 2\n3 1 2\nSample Output\nNo\nYes\nNo\nNo\nSample Input\n2 8\n1 1 2\n1 2 1\n3 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n3 1 2\nSample Output\nYes\nNo\nSample Input\n10 30\n3 1 6\n3 5 4\n1 6 1\n3 1 7\n3 8 4\n1 1 6\n2 4 3\n1 6 5\n1 5 6\n1 1 8\n1 8 1\n2 3 10\n1 7 6\n3 5 6\n1 6 7\n3 6 7\n1 9 5\n3 8 6\n3 3 8\n2 6 9\n1 7 1\n3 10 8\n2 9 2\n1 10 9\n2 6 10\n2 6 8\n3 1 6\n3 1 8\n2 8 5\n1 9 10\nSample Output\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nYes\n\n\n\n\n\n\n\n\n\n\nProblem 4. Stable Matchings\n\n\n\n\n\nThere are \\(n\\) men and \\(n\\) women. Each woman ranks all men in order of her preference (her first choice, her second choice, and so on). Similarly, each man sorts all women according to his preference. The goal is to arrange n marriages in such a way that if a man \\(m\\) prefers some woman \\(w\\) more than his wife, and \\(w\\) prefers \\(m\\) more then her husband a new marriage occurs between \\(w\\) and \\(m\\). If \\(w\\) prefers her husband more, then she stays married to him. This problem always has a solution and your task is to find one.\n\n\nThe first line contains a positive integer t&lt;=100 indicating the number of test cases. Each test case is an instance of the stable marriage problem defined above. The first line of each test case is a positive integer n&lt;=500 (the number of marriages to find). The next n lines are the woman’s preferences: i-th line contains the number i (which means that this is the list given by the ith woman) and the numbers of men (the first choice of ith woman, the second choice,…). Then, the men’s preferences follow in the same format.\n\n\n\nFor each test case print n lines, where each line contains two numbers m and w, which means that the man number m and the woman number w should get married.\n\n\n\nSample Input\n2\n4\n1 4 3 1 2\n2 2 1 3 4\n3 1 3 4 2\n4 4 3 1 2\n1 3 2 4 1\n2 2 3 1 4\n3 3 1 2 4\n4 3 2 4 1\n7\n1 3 4 2 1 6 7 5\n2 6 4 2 3 5 1 7\n3 6 3 5 7 2 4 1\n4 1 6 3 2 4 7 5\n5 1 6 5 3 4 7 2\n6 1 7 3 4 5 6 2\n7 5 6 2 4 3 7 1\n1 4 5 3 7 2 6 1\n2 5 6 4 7 3 2 1\n3 1 6 5 4 3 7 2\n4 3 5 6 7 2 4 1\n5 1 7 6 4 3 5 2\n6 6 3 7 5 2 4 1\n7 1 7 4 2 6 5 3\nSample Output\n1 3\n2 2\n3 1\n4 4\n1 4\n2 5\n3 1\n4 3\n5 7\n6 6\n7 2\n\n\n\n\n\n\n\n\n\n\nProblem 5. Linked Lists\n\n\n\n\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head-&gt;data   = 10;\n  middle-&gt;data = 20;\n  last-&gt;data   = 30;\n\n  //connecting each nodes. head-&gt;middle-&gt;last\n  head-&gt;next   = middle;\n  middle-&gt;next = last;\n  last-&gt;next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d-&gt;\",temp-&gt;data);\n      temp = temp-&gt;next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, \\(p_1, \\ldots, p_n\\).\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input \\(i\\), output the number in the linked list that comes before the number \\(i\\).\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w02.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Arrays and Linked Lists\n\n\n\n\n\n\n\n\n\nProblem 1. Sorting a List\n\n\n\n\n\nYou are given a permutation \\(p\\)1 of length \\(n\\) and a positive integer \\(k \\leq n\\).\nIn one operation, you:\n\nChoose \\(k\\) distinct elements \\(p_{i_1}, p_{i_2}, \\ldots, p_{i_k}\\).\nRemove them and then add them sorted in increasing order to the end of the permutation.\n\nFor example, if \\(p=[2,5,1,3,4]\\) and \\(k=2\\) and you choose \\(5\\) and \\(3\\) as the elements for the operation, then:\n\\[[2,5,1,3,4] \\rightarrow[2,1,4,3,5].\\]\nFind the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so.\n\n\nThe first line contains a single integer \\(t\\left(1 \\leq t \\leq 10^4\\right)-\\) the number of test cases. The description of test cases follows.\nThe first line of each test case contains two integers \\(n\\) and \\(k\\left(2 \\leq n \\leq 10^5, 1 \\leq k \\leq n\\right)\\).\nThe second line of each test case contains \\(n\\) integers \\(p_1, p_2, \\ldots, p_n\\left(1 \\leq p_i \\leq n\\right)\\). It is guaranteed that \\(p\\) is a permutation.\nIt is guaranteed that the sum of \\(n\\) over all test cases does not exceed \\(10^5\\).\n\n\n\nFor each test case output a single integer - the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.\n\n\n\nSample Input\n4\n3 2\n1 2 3\n3 1\n3 1 2\n4 2\n1 3 2 4\n4 2\n2 3 1 4\nSample Output\n0\n1\n1\n2\nExplanation\nIn the first test case, the permutation is already sorted.\nIn the second test case, you can choose element \\(3\\), and the permutation will become sorted as follows: \\([3,1,2]\\rightarrow[1,2,3]\\).\nIn the third test case, you can choose elements \\(3\\) and \\(4\\), and the permutation will become sorted as follows: \\([1,3,2,4]\\rightarrow[1,2,3,4]\\)\nIn the fourth test case, it can be shown that it is impossible to sort the permutation in one operation. However, if you choose elements \\(2\\) and \\(1\\) in the first operation, and choose elements \\(3\\) and \\(4\\) in the second operation, the permutation will become sorted as follows: \\([2,3,1,4]\\rightarrow[3,4,1,2]\\rightarrow[1,2,3,4]\\).\n\n\n\n\n\n\n\n\n\n\nProblem 2. Sorting a List: Challenge the Solution\n\n\n\n\n\nConsider the following algorithm for solving the first problem:\ncurrent = 1\nanswer = 0\nwhile current &lt; n:\n    if the array is sorted:\n        break\n    if current + k - 1 &lt;= n:\n        Apply the operation to the elements [current, current+1, ..., current+k-1]\n    else:\n        Apply the operation to the elements [current, current+1, ..., n] \n    answer += 1\n    current += k\nreturn answer\nGive an example of input where this algorithm fails.\nName your input file tests.txt and make sure it has exactly two lines in the following format:\nN K\np1 p2 ... pn\nwhere the first line consists of two space-separated integers corresponding to N and K and the second line has n space-separated integers that form a permutation. You get a full score on this problem if your input is valid, and it causes the algorithm above to output a sub-optimal solution.\n\n\n\n\n\n\n\n\n\nProblem 3. Maintain a Network\n\n\n\n\n\nYou have just launched a social network for the IITGN community, called GYAN.\n\\(Q\\) operations have been performed since GYAN was launched. The \\(i\\)-th \\((1 \\leq i \\leq Q)\\) operation is represented by three integers \\(T_i, A_i\\), and \\(B_i\\), whose meanings are as follows:\n\nIf \\(T_i=1\\) : it means that user \\(A_i\\) follows user \\(B_i\\). If user \\(A_i\\) is already following user \\(B_i\\) at the time of this operation, it does not make any change.\nIf \\(T_i=2\\) : it means that user \\(A_i\\) unfollows user \\(B_i\\). If user \\(A_i\\) is not following user \\(B_i\\) at the time of this operation, it does not make any change.\nIf \\(T_i=3\\) : it means that you are asked to determine if users \\(A_i\\) and \\(B_i\\) are following each other. You need to print Yes if user \\(A_i\\) is following user \\(B_i\\) and user \\(B_i\\) is following user \\(A_i\\), and No otherwise.\n\nWhen the service was launched, no users were following any users.\nPrint the correct answers for all operations such that \\(T_i=3\\) in ascending order of \\(i\\).\n\n\n\n\\(2 \\leq N \\leq 10^4\\)\n\\(1 \\leq Q \\leq 2 \\times 10^5\\)\n\\(T_i=1,2,3(1 \\leq i \\leq Q)\\)\n\\(1 \\leq A_i \\leq N(1 \\leq i \\leq Q)\\)\n\\(1 \\leq B_i \\leq N(1 \\leq i \\leq Q)\\)\n\\(A_i \\neq B_i(1 \\leq i \\leq Q)\\)\nThere exists \\(i(1 \\leq i \\leq Q)\\) such that \\(T_i=3\\).\nAll values in the input are integers.\n\n\n\n\nThe input is given from Standard Input in the following format: \\[\n\\begin{array}{lll}\nN & Q & \\\\\nT_1 & A_1 & B_1 \\\\\nT_2 & A_2 & B_2 \\\\\n\\vdots & & \\\\\nT_Q & A_Q & B_Q\n\\end{array}\n\\]\n\n\n\nPrint \\(X\\) lines, where \\(X\\) is the number of \\(i\\) ’s \\((1 \\leq i \\leq Q)\\) such that \\(T_i=3\\). The \\(j\\)-th \\((1 \\leq j \\leq X)\\) line should contain the answer to the \\(j\\)-th operation such that \\(T_i=3\\).\n\n\n\nSample Input\n3 9\n1 1 2\n3 1 2\n1 2 1\n3 1 2\n1 2 3\n1 3 2\n3 1 3\n2 1 2\n3 1 2\nSample Output\nNo\nYes\nNo\nNo\nSample Input\n2 8\n1 1 2\n1 2 1\n3 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n3 1 2\nSample Output\nYes\nNo\nSample Input\n10 30\n3 1 6\n3 5 4\n1 6 1\n3 1 7\n3 8 4\n1 1 6\n2 4 3\n1 6 5\n1 5 6\n1 1 8\n1 8 1\n2 3 10\n1 7 6\n3 5 6\n1 6 7\n3 6 7\n1 9 5\n3 8 6\n3 3 8\n2 6 9\n1 7 1\n3 10 8\n2 9 2\n1 10 9\n2 6 10\n2 6 8\n3 1 6\n3 1 8\n2 8 5\n1 9 10\nSample Output\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nYes\n\n\n\n\n\n\n\n\n\n\nProblem 4. Stable Matchings\n\n\n\n\n\nThere are \\(n\\) men and \\(n\\) women. Each woman ranks all men in order of her preference (her first choice, her second choice, and so on). Similarly, each man sorts all women according to his preference. The goal is to arrange n marriages in such a way that if a man \\(m\\) prefers some woman \\(w\\) more than his wife, and \\(w\\) prefers \\(m\\) more then her husband a new marriage occurs between \\(w\\) and \\(m\\). If \\(w\\) prefers her husband more, then she stays married to him. This problem always has a solution and your task is to find one.\n\n\nThe first line contains a positive integer t&lt;=100 indicating the number of test cases. Each test case is an instance of the stable marriage problem defined above. The first line of each test case is a positive integer n&lt;=500 (the number of marriages to find). The next n lines are the woman’s preferences: i-th line contains the number i (which means that this is the list given by the ith woman) and the numbers of men (the first choice of ith woman, the second choice,…). Then, the men’s preferences follow in the same format.\n\n\n\nFor each test case print n lines, where each line contains two numbers m and w, which means that the man number m and the woman number w should get married.\n\n\n\nSample Input\n2\n4\n1 4 3 1 2\n2 2 1 3 4\n3 1 3 4 2\n4 4 3 1 2\n1 3 2 4 1\n2 2 3 1 4\n3 3 1 2 4\n4 3 2 4 1\n7\n1 3 4 2 1 6 7 5\n2 6 4 2 3 5 1 7\n3 6 3 5 7 2 4 1\n4 1 6 3 2 4 7 5\n5 1 6 5 3 4 7 2\n6 1 7 3 4 5 6 2\n7 5 6 2 4 3 7 1\n1 4 5 3 7 2 6 1\n2 5 6 4 7 3 2 1\n3 1 6 5 4 3 7 2\n4 3 5 6 7 2 4 1\n5 1 7 6 4 3 5 2\n6 6 3 7 5 2 4 1\n7 1 7 4 2 6 5 3\nSample Output\n1 3\n2 2\n3 1\n4 4\n1 4\n2 5\n3 1\n4 3\n5 7\n6 6\n7 2\n\n\n\n\n\n\n\n\n\n\nProblem 5. Linked Lists\n\n\n\n\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head-&gt;data   = 10;\n  middle-&gt;data = 20;\n  last-&gt;data   = 30;\n\n  //connecting each nodes. head-&gt;middle-&gt;last\n  head-&gt;next   = middle;\n  middle-&gt;next = last;\n  last-&gt;next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d-&gt;\",temp-&gt;data);\n      temp = temp-&gt;next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, \\(p_1, \\ldots, p_n\\).\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input \\(i\\), output the number in the linked list that comes before the number \\(i\\).\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w02.html#footnotes",
    "href": "2023/01-ES242/labs/lab-w02.html#footnotes",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA permutation of length \\(n\\) is an array consisting of \\(n\\) distinct integers from 1 to \\(n\\) in arbitrary order. For example, \\([2,3,1,5,4]\\) is a permutation, but \\([1,2,2]\\) is not a permutation (since \\(2\\) appears twice in the array), and \\([1,3,4]\\) is also not a permutation \\(n=3\\) but there is \\(4\\) in the array).↩︎"
  },
  {
    "objectID": "2023/03-33/22/index.html",
    "href": "2023/03-33/22/index.html",
    "title": "#22. In How Many Ways Can a Man Tile a Board?",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nIt would be nice to have a (hopefully simpler) self-contained argument that demonstrates the “easy” signing algorithm on just the grid, which would be enough to address the question that the miniature begins with.\nSince we talked about planar graphs, here’s a pointer to a puzzle-based game involving drawing planar graphs, shared during the discussion (IIRC!)."
  },
  {
    "objectID": "2023/03-33/13/index.html",
    "href": "2023/03-33/13/index.html",
    "title": "#13. Three Petersens Are Not Enough",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to Recording\n\nPrompts for discussion:\nI suppose the same question can be asked about fitting p disjoint copies of a graph \\(G\\) (in this case, the Petersen graph) into a graph \\(H\\) (in this case, \\(K_10\\): does this style of proof generalize or serve to be useful for other examples?"
  },
  {
    "objectID": "2023/03-33/15/index.html",
    "href": "2023/03-33/15/index.html",
    "title": "#15. Only Two Distances",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nThe proof for the bound on the number of equidistant points was borrowed from this answer.\nA natural question seems to be: what about three distances? Or \\(n\\) points and \\(k\\) distinct distances?\nWhat the number of points where one distance is seen at most \\(p\\) times and the other is seen at most \\(q\\) times? In particular, I was wondering if we could get to an “almost one distance” situation by saying that the “other distance” does not manifest frequently."
  },
  {
    "objectID": "2023/03-33/24/index.html",
    "href": "2023/03-33/24/index.html",
    "title": "#24. Perfect Matchings and Determinants",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\nGiven that this was the miniature that introduced the Schwartz-Zippel Lemma, here is an interesting blog post that provides a historical perspective."
  },
  {
    "objectID": "2023/03-33/01/index.html",
    "href": "2023/03-33/01/index.html",
    "title": "#1. Fibonacci Numbers, Quickly",
    "section": "",
    "text": "(Back to course page.)\nLink to slides · Link to recording\n\nPrompts for discussion:\nZeckendorf showed that each non-negative integer has a unique representation as a sum of Fibonacci numbers in which no two consecutive Fibonacci numbers occur. This observation leads to a numeral system. A natural question for a numeral system is how can we perform arithmetic operations on numbers in such a system, and how fast can we do it.\nIn particular:\n\nCan you add and subtract \\(n\\)-digit numbers in the Zeckendorf system in \\(O(n)\\) time, as fast as in the binary system?\nCan you multiply \\(n\\)-digit numbers in the Zeckendorf system in \\(O(n \\log n)\\) time, as fast as in the binary system?\n\nSource"
  },
  {
    "objectID": "2023/03-33/30/index.html",
    "href": "2023/03-33/30/index.html",
    "title": "#30. Equilateral Sets",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nWhat bounds can we get if we are looking for sets of points that are approximately equilateral in two distances? This question combines the setting in this miniature with the one we saw when we discussed the two distances setting. Concretely, a set of points is approximately equal in \\(p,q\\) if the distance between any pair of points lies in \\([p - \\varepsilon, p + \\varepsilon] \\cup [q - \\varepsilon, q + \\varepsilon]\\), with \\(\\varepsilon = 1/\\sqrt{n}\\).\nAre there other sets with \\(2d\\) points that are equilateral with respect to the \\(\\ell_1\\) distance?"
  },
  {
    "objectID": "2023/03-33/09/index.html",
    "href": "2023/03-33/09/index.html",
    "title": "#9. Equiangular Lines",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to Recording\n\nPrompts for discussion:\n\nCan we generalize the construction for \\(d = 3\\) to 10 equiangular lines in \\(\\mathbb{R}^4\\)? What’s the best general construction that we can come up with?\nWith \\(n\\) lines in \\(\\mathbb{R}^2\\), what’s the largest number of pairs that we can show to have the same angles? For example, with \\(n = 4\\), we can get 4 pairs to have the same angle; can we get 5?\n\n\nPS. Although I was quite sure I went “live” on Youtube, I am unable to locate the recording of the session :( Sorry about this!\nPPS. The slides are updated with the \\(\\mathbf{x}^T M \\mathbf{x}\\) calculation, which makes more explicit that \\(M\\) is positive definite."
  },
  {
    "objectID": "2023/03-33/21/index.html",
    "href": "2023/03-33/21/index.html",
    "title": "#21. Counting Spanning Trees",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording: Part 1 and Part 2\n\nPrompts for discussion:\n\nWe spent time on the determinant of the Laplacian of a graph here (short of one vertex). Is there a structural interpretation of the determinant of the adjacency matrix? There are some thoughts here.\nGraham and Pollak showed that the determinant of the distance matrix of a tree \\(T\\) on \\(n\\) vertices - the \\(n \\times n\\) matrix whose each \\((v, w) \\in V(T) \\times V(T)\\) entry is the ordinary graph distance between \\(v\\) and \\(w\\)-depends only on \\(n\\). In fact, they gave a formula: \\(-(n-1)(-2)^{n-2}\\). I thought this was really neat: the determinant seems to be completely independent of the structure of the tree! 🤯"
  },
  {
    "objectID": "2023/03-33/26/index.html",
    "href": "2023/03-33/26/index.html",
    "title": "#26. Counting Compositions",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nThere are \\(2^{n!}\\) subsets of \\(S_n\\). It would be interesting to know, even in terms of rough estimates, how the sizes of \\(|P \\circ P|\\) are distributed over these subsets. I wonder if subsets that are “close to being subgroups” would report values on the lower end of their range, and it would be nice if this can be quantified in terms of the “distance from being a subgroup”, which is a somewhat vague idea :)\nOther ideas for algorithms that count \\(|P \\circ P|\\), randomized or otherwise?\n\nVinay suggested a nice alternate proof for the main argument that did not involve invoking SZ. This is a note-to-self to add the description to the slides and/or these notes."
  },
  {
    "objectID": "2023/03-33/10/index.html",
    "href": "2023/03-33/10/index.html",
    "title": "#10. Where is the Triangle?",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to Video\n\nPrompts for discussion:\n\nCan we generalize the construction for \\(d = 3\\) to 10 equiangular lines in \\(\\mathbb{R}^4\\)? What’s the best general construction that we can come up with?\nWith \\(n\\) lines in \\(\\mathbb{R}^2\\), what’s the largest number of pairs that we can show to have the same angles? For example, with \\(n = 4\\), we can get 4 pairs to have the same angle; can we get 5?\n\n\nPS. Although I was quite sure I went “live” on Youtube, I am unable to locate the recording of the session :( I re-recorded it separately, and that’s the link in this post.\nPPS. The slides are updated with the \\(\\mathbf{x}^T M \\mathbf{x}\\) calculation, which makes more explicit that \\(M\\) is positive definite."
  },
  {
    "objectID": "2023/03-33/28/index.html",
    "href": "2023/03-33/28/index.html",
    "title": "#28. The Secret Agent and the Umbrella",
    "section": "",
    "text": "(Back to course page.)\nComing soon!"
  },
  {
    "objectID": "2023/03-33/29/index.html",
    "href": "2023/03-33/29/index.html",
    "title": "#29. Shannon Capacity of the Union: A Tale of Two Field",
    "section": "",
    "text": "(Back to course page.)\nComing soon!"
  },
  {
    "objectID": "2023/03-33/27/index.html",
    "href": "2023/03-33/27/index.html",
    "title": "#27. Is It Associative?",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nIt would be nice to construct explicit examples of operations that have only a single (or \\(O(1)\\)) violations of non-associativity.\nHow common are the non-associative operations as a fraction of the total number of binary operations on \\(n\\) elements?"
  },
  {
    "objectID": "2023/03-33/20/index.html",
    "href": "2023/03-33/20/index.html",
    "title": "#20. Walking in the Yard",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nDefine a \\(\\ell\\)-safe walk to be a walk that involves stepping out of the safe region at most \\(\\ell\\) times (where stepping out involves going out of the safe region and coming back into the safe region in the very next step). The theorem we saw was for \\(\\ell\\)-safe walks with \\(d = 0\\). For \\(d = 1\\), can we prove a similar result with a smaller safe region?\nIt would be nice to find out about the improved bounds known in two dimensions."
  },
  {
    "objectID": "2023/03-33/05/index.html",
    "href": "2023/03-33/05/index.html",
    "title": "#5. Error-Correcting Codes",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording: Part 1 and Part 2\n\nPrompts for discussion:\n\nExplain the first two attempts (repeating the string twice and using parity checks for rows and columns) in linear-algebraic terms.\nWork through the nearly-impossible chessboard puzzle. Here’s a related tweet thread."
  },
  {
    "objectID": "2023/03-33/32/index.html",
    "href": "2023/03-33/32/index.html",
    "title": "#32. Rotating the Cube",
    "section": "",
    "text": "(Back to course page.)\nComing soon!"
  },
  {
    "objectID": "2023/03-33/03/index.html",
    "href": "2023/03-33/03/index.html",
    "title": "#3. The Clubs of Oddtown",
    "section": "",
    "text": "(Back to course page.)\nLink to slides · Link to recording\n\nPrompts for discussion:\n\nThe odd town rules can be thought of as (odd,even); reflecting the parity constraints on the sizes of the clubs and the sizes of the pairwise intersections, respectively. What about other towns with (odd,odd), (even,odd), and (even, even)? What bounds do we get? Are they tight?\nWhat about generalized constraints of the form \\(\\equiv p \\mod q\\)?"
  },
  {
    "objectID": "2023/03-BSCS4021/index.html",
    "href": "2023/03-BSCS4021/index.html",
    "title": "BSCS4021 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-BSCS4021/index.html#bscs4021.",
    "href": "2023/03-BSCS4021/index.html#bscs4021.",
    "title": "BSCS4021 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-noc23-cs103/index.html",
    "href": "2023/03-noc23-cs103/index.html",
    "title": "noc23-cs103 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-noc23-cs103/index.html#noc23-cs103.",
    "href": "2023/03-noc23-cs103/index.html#noc23-cs103.",
    "title": "noc23-cs103 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/02-ADVALG.bak/index.html",
    "href": "2023/02-ADVALG.bak/index.html",
    "title": "CS 614 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis course is an introduction to techniques in achieving specific trade-offs, and understanding the theoretical foundations of frameworks that help us establish when certain tradeoffs are simply not feasible.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nOnline\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nThis course is meant for students of the IITM online BS program. If you are not enrolled in this program, but are interested in following along, please feel free to do so by going through the materials here. Send me an email if you would like to have access to the assignment problems.\n\n\n\n\nLecturesWeekly PracticeExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n03 Jun, 2023\n1. Greedy Algorithms\n• Storing Files on Tape I\n• Storing Files on Tape II\n• Scheduling Classes I\n• Scheduling Classes II\n• Stable Matchings I\n• Stable Matchings II\n• Stable Matchings III\n\n\n\n\n\n\n10 Jun, 2023\n2. Matroids\n• A Generic Optimization Problem\n• Motivating the Definition\n• Greedy Works!\n• Examples of Matroids I\n• Examples of Matroids II\n• Scheduling with Deadlines I\n• Scheduling with Deadlines II\n\n\n\n\n\n\n17 Jun, 2023\n3. Dynamic Programming\n• Longest Increasing Subsequence\n• Edit Distance I\n• Edit Distance II\n• Subset Sum\n• Optimal BSTs I\n• Optimal BSTs II\n• Optimal BSTs III\n\n\n\n\n\n\n24 Jun, 2023\n4. Maximum Flows\n• Flows\n• Cuts\n• Maxflow-Mincut I\n• Maxflow-Mincut II\n• Augmenting Paths\n• Bipartite Matchings\n• Other Settings\n\n\n\n\n\n\n01 Jul, 2023\n5. Applications of Flows\n• Exam Scheduling I\n• Exam Scheduling II\n• Baseball Elimination I\n• Baseball Elimination II\n• Baseball Elimination III\n• Project Selection I\n• Project Selection II\n\n\n\n\n\n\n08 Jul, 2023\n6. NP-hardness\n• P, NP, NP-hardness, NP-completeness I\n• P, NP, NP-hardness, NP-completeness II\n• Reductions and SAT\n• 3SAT\n• Maximum Independent Set\n• Graph Coloring\n• Subset Sum\n\n\n\n\n\n\n15 Jul, 2023\n7. Approximation Algorithms\n• Introduction to Approximation Frameworks\n• Vertex Cover via Maximal Matchings\n• Vertex Cover via LP rounding\n• TSP\n• Metric TSP\n• Set Cover I\n• Set Cover II\n\n\n\n\n\n\n22 Jul, 2023\n8. Randomized Algorithms\n• Monte Carlo v. Las Vegas\n• Min-Cut Algorithm\n• MAX SAT via the Probabilistic Method I\n• MAX SAT via the Probabilistic Method II\n• 2SAT via Markov Chains I\n• 2SAT via Markov Chains II\n• Primality Testing\n\n\n\n\n\n\n29 Jul, 2023\n9. Exact Algorithms\n• Branch and Bound\n• An Inclusion-Exclusion approach to Hamiltonian Path I\n• An Inclusion-Exclusion approach to Hamiltonian Path II\n• Dynamic Programming for TSP I\n• Dynamic Programming for TSP II\n• Local Search I\n• Local Search II\n\n\n\n\n\n\n05 Aug, 2023\n10. Parameterized Algorithms\n• Closest String I\n• Closest String II\n• Iterative Compression for FVS I\n• Iterative Compression for FVS II\n• Randomized Algorithm for k-Path I\n• Randomized Algorithm for k-Path II\n• DP over subsets - Set Cover\n\n\n\n\n\n\n12 Aug, 2023\n11. Kernelization\n• Vertex Cover I (High-degree rule)\n• Vertex Cover II (LP-based Reduction)\n• Matrix Rigidity\n• Feedback Arc Set on Tournaments I\n• Feedback Arc Set on Tournaments II\n• Max Sat\n• Edge Clique Cover\n\n\n\n\n\n\n19 Aug, 2023\n12. Practical Approaches to Coping with Hardness\n• SAT Sovlers\n• SAT reductions I\n• SAT reductions II\n• LP solvers\n• LP reductions I\n• LP reductions II\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                03 Jun, 2023\n            \n            \n                Greedy Algorithms\n                • Storing Files on Tape  • Scheduling Classes  • Stable Matchings \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Jun, 2023\n            \n            \n                Matroids\n                • A Generic Optimization Problem • Motivating the Definition • Greedy Works! • Examples of Matroids  • Scheduling with Deadlines \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jun, 2023\n            \n            \n                Dynamic Programming\n                • Longest Increasing Subsequence • Edit Distance  • Subset Sum • Optimal BSTs \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jun, 2023\n            \n            \n                Maximum Flows\n                • Flows • Cuts • Maxflow-Mincut  • Augmenting Paths • Bipartite Matchings • Other Settings\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Jul, 2023\n            \n            \n                Applications of Flows\n                • Exam Scheduling  • Baseball Elimination  • Project Selection \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                08 Jul, 2023\n            \n            \n                NP-hardness\n                • P, NP, NP-hardness, NP-completeness  • Reductions and SAT • 3SAT • Maximum Independent Set • Graph Coloring • Subset Sum\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Jul, 2023\n            \n            \n                Approximation Algorithms\n                • Introduction to Approximation Frameworks • Vertex Cover via Maximal Matchings • Vertex Cover via LP rounding • TSP • Metric TSP • Set Cover \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jul, 2023\n            \n            \n                Randomized Algorithms\n                • Monte Carlo v. Las Vegas • Min-Cut Algorithm • MAX SAT via the Probabilistic Method  • 2SAT via Markov Chains \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Jul, 2023\n            \n            \n                Exact Algorithms\n                • Branch and Bound • An Inclusion-Exclusion approach to Hamiltonian Path  • Dynamic Programming for TSP  • Local Search \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Aug, 2023\n            \n            \n                Parameterized Algorithms\n                • Closest String  • Iterative Compression for FVS  • Randomized Algorithm for k-Path  • DP over subsets - Set Cover\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Aug, 2023\n            \n            \n                Kernelization\n                • Vertex Cover • Matrix Rigidity • Feedback Arc Set on Tournaments  • MaxSat  • Edge Clique Cover\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Aug, 2023\n            \n            \n                Practical Approaches to Coping with Hardness\n                • SAT Sovlers • SAT reductions  • LP solvers • LP reductions \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Mid-Term Quiz\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Final Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Practice Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/02-ADVALG.bak/index.html#advanced-algorithms-a-part-of-the-iitm-online-undergraduate-program.",
    "href": "2023/02-ADVALG.bak/index.html#advanced-algorithms-a-part-of-the-iitm-online-undergraduate-program.",
    "title": "CS 614 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis course is an introduction to techniques in achieving specific trade-offs, and understanding the theoretical foundations of frameworks that help us establish when certain tradeoffs are simply not feasible.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nOnline\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nThis course is meant for students of the IITM online BS program. If you are not enrolled in this program, but are interested in following along, please feel free to do so by going through the materials here. Send me an email if you would like to have access to the assignment problems.\n\n\n\n\nLecturesWeekly PracticeExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n03 Jun, 2023\n1. Greedy Algorithms\n• Storing Files on Tape I\n• Storing Files on Tape II\n• Scheduling Classes I\n• Scheduling Classes II\n• Stable Matchings I\n• Stable Matchings II\n• Stable Matchings III\n\n\n\n\n\n\n10 Jun, 2023\n2. Matroids\n• A Generic Optimization Problem\n• Motivating the Definition\n• Greedy Works!\n• Examples of Matroids I\n• Examples of Matroids II\n• Scheduling with Deadlines I\n• Scheduling with Deadlines II\n\n\n\n\n\n\n17 Jun, 2023\n3. Dynamic Programming\n• Longest Increasing Subsequence\n• Edit Distance I\n• Edit Distance II\n• Subset Sum\n• Optimal BSTs I\n• Optimal BSTs II\n• Optimal BSTs III\n\n\n\n\n\n\n24 Jun, 2023\n4. Maximum Flows\n• Flows\n• Cuts\n• Maxflow-Mincut I\n• Maxflow-Mincut II\n• Augmenting Paths\n• Bipartite Matchings\n• Other Settings\n\n\n\n\n\n\n01 Jul, 2023\n5. Applications of Flows\n• Exam Scheduling I\n• Exam Scheduling II\n• Baseball Elimination I\n• Baseball Elimination II\n• Baseball Elimination III\n• Project Selection I\n• Project Selection II\n\n\n\n\n\n\n08 Jul, 2023\n6. NP-hardness\n• P, NP, NP-hardness, NP-completeness I\n• P, NP, NP-hardness, NP-completeness II\n• Reductions and SAT\n• 3SAT\n• Maximum Independent Set\n• Graph Coloring\n• Subset Sum\n\n\n\n\n\n\n15 Jul, 2023\n7. Approximation Algorithms\n• Introduction to Approximation Frameworks\n• Vertex Cover via Maximal Matchings\n• Vertex Cover via LP rounding\n• TSP\n• Metric TSP\n• Set Cover I\n• Set Cover II\n\n\n\n\n\n\n22 Jul, 2023\n8. Randomized Algorithms\n• Monte Carlo v. Las Vegas\n• Min-Cut Algorithm\n• MAX SAT via the Probabilistic Method I\n• MAX SAT via the Probabilistic Method II\n• 2SAT via Markov Chains I\n• 2SAT via Markov Chains II\n• Primality Testing\n\n\n\n\n\n\n29 Jul, 2023\n9. Exact Algorithms\n• Branch and Bound\n• An Inclusion-Exclusion approach to Hamiltonian Path I\n• An Inclusion-Exclusion approach to Hamiltonian Path II\n• Dynamic Programming for TSP I\n• Dynamic Programming for TSP II\n• Local Search I\n• Local Search II\n\n\n\n\n\n\n05 Aug, 2023\n10. Parameterized Algorithms\n• Closest String I\n• Closest String II\n• Iterative Compression for FVS I\n• Iterative Compression for FVS II\n• Randomized Algorithm for k-Path I\n• Randomized Algorithm for k-Path II\n• DP over subsets - Set Cover\n\n\n\n\n\n\n12 Aug, 2023\n11. Kernelization\n• Vertex Cover I (High-degree rule)\n• Vertex Cover II (LP-based Reduction)\n• Matrix Rigidity\n• Feedback Arc Set on Tournaments I\n• Feedback Arc Set on Tournaments II\n• Max Sat\n• Edge Clique Cover\n\n\n\n\n\n\n19 Aug, 2023\n12. Practical Approaches to Coping with Hardness\n• SAT Sovlers\n• SAT reductions I\n• SAT reductions II\n• LP solvers\n• LP reductions I\n• LP reductions II\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                03 Jun, 2023\n            \n            \n                Greedy Algorithms\n                • Storing Files on Tape  • Scheduling Classes  • Stable Matchings \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Jun, 2023\n            \n            \n                Matroids\n                • A Generic Optimization Problem • Motivating the Definition • Greedy Works! • Examples of Matroids  • Scheduling with Deadlines \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Jun, 2023\n            \n            \n                Dynamic Programming\n                • Longest Increasing Subsequence • Edit Distance  • Subset Sum • Optimal BSTs \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Jun, 2023\n            \n            \n                Maximum Flows\n                • Flows • Cuts • Maxflow-Mincut  • Augmenting Paths • Bipartite Matchings • Other Settings\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Jul, 2023\n            \n            \n                Applications of Flows\n                • Exam Scheduling  • Baseball Elimination  • Project Selection \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                08 Jul, 2023\n            \n            \n                NP-hardness\n                • P, NP, NP-hardness, NP-completeness  • Reductions and SAT • 3SAT • Maximum Independent Set • Graph Coloring • Subset Sum\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Jul, 2023\n            \n            \n                Approximation Algorithms\n                • Introduction to Approximation Frameworks • Vertex Cover via Maximal Matchings • Vertex Cover via LP rounding • TSP • Metric TSP • Set Cover \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jul, 2023\n            \n            \n                Randomized Algorithms\n                • Monte Carlo v. Las Vegas • Min-Cut Algorithm • MAX SAT via the Probabilistic Method  • 2SAT via Markov Chains \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Jul, 2023\n            \n            \n                Exact Algorithms\n                • Branch and Bound • An Inclusion-Exclusion approach to Hamiltonian Path  • Dynamic Programming for TSP  • Local Search \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Aug, 2023\n            \n            \n                Parameterized Algorithms\n                • Closest String  • Iterative Compression for FVS  • Randomized Algorithm for k-Path  • DP over subsets - Set Cover\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Aug, 2023\n            \n            \n                Kernelization\n                • Vertex Cover • Matrix Rigidity • Feedback Arc Set on Tournaments  • MaxSat  • Edge Clique Cover\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Aug, 2023\n            \n            \n                Practical Approaches to Coping with Hardness\n                • SAT Sovlers • SAT reductions  • LP solvers • LP reductions \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Mid-Term Quiz\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Final Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Practice Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-ES214/tutorials/A01.html",
    "href": "2023/03-ES214/tutorials/A01.html",
    "title": "ES214. Discrete Mathematics. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe circuits of the graphic matroid are the cycles of the graph \\(G\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c,d\\}\\) with the edges \\(\\{ab, cd, ad\\}\\).\nThere are two matchings in this instance:\n\n\\(M_1 := \\{ab,cd\\}\\)\n\\(M_2: \\{ad\\}\\)\n\nHowever, although \\(|M_1| &gt; |M_2|\\), neither of the edges from \\(M_1\\) can be added to \\(M_2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c\\}\\) with the edges \\(\\{ab, ac\\}\\). There are two independent sets: \\(S_1 := \\{b,c\\}\\) and \\(M_2: \\{a\\}\\), but neither of the vertices from \\(S_1\\) can be added to \\(S_2\\).\n\nIf the independent sets formed a matroid the problem of finding a maximum independent set would not be NP-complete. {{&lt; bi emoji-smile-upside-down &gt;}}\n— Comment in class"
  },
  {
    "objectID": "2023/03-ES214/tutorials/A01.html#es214.-discrete-mathematics.",
    "href": "2023/03-ES214/tutorials/A01.html#es214.-discrete-mathematics.",
    "title": "ES214. Discrete Mathematics. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe circuits of the graphic matroid are the cycles of the graph \\(G\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c,d\\}\\) with the edges \\(\\{ab, cd, ad\\}\\).\nThere are two matchings in this instance:\n\n\\(M_1 := \\{ab,cd\\}\\)\n\\(M_2: \\{ad\\}\\)\n\nHowever, although \\(|M_1| &gt; |M_2|\\), neither of the edges from \\(M_1\\) can be added to \\(M_2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c\\}\\) with the edges \\(\\{ab, ac\\}\\). There are two independent sets: \\(S_1 := \\{b,c\\}\\) and \\(M_2: \\{a\\}\\), but neither of the vertices from \\(S_1\\) can be added to \\(S_2\\).\n\nIf the independent sets formed a matroid the problem of finding a maximum independent set would not be NP-complete. {{&lt; bi emoji-smile-upside-down &gt;}}\n— Comment in class"
  },
  {
    "objectID": "2023/03-ES214/index.html",
    "href": "2023/03-ES214/index.html",
    "title": "ES 214 | Aug-Nov 2023",
    "section": "",
    "text": "(co-instructor with Prof. Anirban Dasgupta.)\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nThis is a first course in discrete mathematics and has a broad scope: we introduce elementary concepts in logic, set theory, combinatorics, graph theory, number theory, and probability. The course is designed to be accessible to students from all disciplines, and is a core course for the B.Tech. program at IITGN. We hope that students taking this course discover the beauty of mathematical methods and their applications.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou think counting the number of ways in which you can complete your graduation requirements is a fun problem to think about,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges, or\nyou are enrolled in a program for which this course is in the core.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course is self-contained and involves no pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nDiscrete Mathematics and Its Applications by Kenneth Rosen\nOpen Textbook on Discrete Mathematics\nProofs: A Long-Form Mathematics Textbook by Jay Cummings\nPlaying with Discrete Math by Kyle Burke and Craig Tennenhouse\nOnline Course (with lecture videos): Math 4190, Summer I 2019\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 1/101\nLectures:\n\nTuesdays 3:30PM — 5:00PM\nWednesdays 11:30 — 12:50\n\nTutorials\n\nThursdays 3:30PM — 5:00PM\n\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\n\nHarshil Mittal\nSaraswati Nanoti\nEshwar Dhande\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1. Intro to Proofs - I\nGeneral Methods • Chessboard Tilings • Game of Chomp\n\n\n\n\n\n03 Aug, 2023\n2. Intro to Proofs - II\nPigeonhole Principle • Illustrative Examples\n\n\n\n\n\n08 Aug, 2023\n3. Sets\nDefinitions • Operations • Showing Containment • Showing Equality\n\n\n\n\n\n09 Aug, 2023\n4. Functions and Relations\nInjections, Surjections, Bijections • Compositions • Equivalence Classes\n\n\n\n\n\n16 Aug, 2023\n5. Induction\nDominoes, Ladders, and Chips • Examples • Non-Examples • Strong Induction\n\n\n\n\n\n22 Aug, 2023\n6. Propositional and Predicate Logic\nSyntax • Truth Tables • Quantifiers\n\n\n\n\n\n23 Aug, 2023\n7. Inference Systems\nInference Rules (e.g, Modus Ponens, Modus Tollens, Resolution, etc) • Paradoxes\n\n\n\n\n\n29 Aug, 2023\n8. Elementary Counting Methods\nPermutations • Combinations • Binomial Coefficients\n\n\n\n\n\n30 Aug, 2023\n9. The Method of Double Counting\nExamples of proofs by double-counting\n\n\n\n\n\n12 Sep, 2023\n10. Intro to Graphs: Euler Tours\nNecessary and Sufficient Conditions for Euler Tours • Computing Euler Tours\n\n\n\n\n\n13 Sep, 2023\n11. Hall's Theorem\nMatchings • Congestion in Bipartite Graphs • Hall's Theorem • Applications\n\n\n\n\n\n19 Sep, 2023\n12. Graph Coloring\nMap Coloring • Greedy Algorithms • Bipartite Graphs • k-Degenerate Graphs\n\n\n\n\n\n20 Sep, 2023\n13. Planarity\nPlanar Graphs are Five-Colorable • Obstructions to Planarity\n\n\n\n\n\n26 Sep, 2023\n14. Graphs Recap\n~\n\n\n\n\n\n27 Sep, 2023\n15. Probability Intro\nBasics of Discrete Probability • Monty Hall • Conditional Probability\n\n\n\n\n\n03 Oct, 2023\n16. The Probabilistic Method - I\nAn Introduction to the Method • Applications in Graph Theory\n\n\n\n\n\n04 Oct, 2023\n17. The Probabilistic Method - II\nRamsey Number • Sum-Free Sets\n\n\n\n\n\n10 Oct, 2023\n18. Recap\n~\n\n\n\n\n\n17 Oct, 2023\n19. The Linear Algebra Method - I\nOddTown and EvenTown\n\n\n\n\n\n18 Oct, 2023\n20. The Linear Algebra Method - II\nVC Dimension of a Set System • Sauer's Lemma\n\n\n\n\n\n31 Oct, 2023\n21. Intro to Groups: Rotations and Symmetries\nTBA\n\n\n\n\n\n01 Nov, 2023\n22. Permutation and Cyclic Groups\nTBA\n\n\n\n\n\n07 Nov, 2023\n23. Homomorphisms\nTBA\n\n\n\n\n\n08 Nov, 2023\n24. Quotient Groups and First Isomorphism Theorem\nTBA\n\n\n\n\n\n14 Nov, 2023\n25. Intro to Number Theory: Extended Euclid's Algorithm\nTBA\n\n\n\n\n\n15 Nov, 2023\n26. Chinese Remainder Theorem\nTBA\n\n\n\n\n\n21 Nov, 2023\n27. Applications I: RSA\nTBA\n\n\n\n\n\n22 Nov, 2023\n28. Applications II: PageRank\nTBA\n\n\n\n\n\n23 Nov, 2023\n29. Recap\n~\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\nWeekly practice problems are posted to Google Classroom. There is no need to submit these assignments, but please make sure to get feedback from your peers, instructors and TAs as you go along. We also strongly encourage you to explore the problems from the courses available through Brilliant (access details have been shared on Google Classroom as well).\n\n\n\n\nProblems and solutions for weekly quizzes are available from within Mathematize. \n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                Syllabus: topics in lectures 1 to 9 (inclusive)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                Syllabus: topics in lectures 10 to 18 (inclusive)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                Syllabus: topics in lectures 21 to 26 (inclusive)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-ES214/index.html#es214.-discrete-mathematics",
    "href": "2023/03-ES214/index.html#es214.-discrete-mathematics",
    "title": "ES 214 | Aug-Nov 2023",
    "section": "",
    "text": "(co-instructor with Prof. Anirban Dasgupta.)\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nThis is a first course in discrete mathematics and has a broad scope: we introduce elementary concepts in logic, set theory, combinatorics, graph theory, number theory, and probability. The course is designed to be accessible to students from all disciplines, and is a core course for the B.Tech. program at IITGN. We hope that students taking this course discover the beauty of mathematical methods and their applications.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou think counting the number of ways in which you can complete your graduation requirements is a fun problem to think about,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges, or\nyou are enrolled in a program for which this course is in the core.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course is self-contained and involves no pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nDiscrete Mathematics and Its Applications by Kenneth Rosen\nOpen Textbook on Discrete Mathematics\nProofs: A Long-Form Mathematics Textbook by Jay Cummings\nPlaying with Discrete Math by Kyle Burke and Craig Tennenhouse\nOnline Course (with lecture videos): Math 4190, Summer I 2019\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 1/101\nLectures:\n\nTuesdays 3:30PM — 5:00PM\nWednesdays 11:30 — 12:50\n\nTutorials\n\nThursdays 3:30PM — 5:00PM\n\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\n\nHarshil Mittal\nSaraswati Nanoti\nEshwar Dhande\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1. Intro to Proofs - I\nGeneral Methods • Chessboard Tilings • Game of Chomp\n\n\n\n\n\n03 Aug, 2023\n2. Intro to Proofs - II\nPigeonhole Principle • Illustrative Examples\n\n\n\n\n\n08 Aug, 2023\n3. Sets\nDefinitions • Operations • Showing Containment • Showing Equality\n\n\n\n\n\n09 Aug, 2023\n4. Functions and Relations\nInjections, Surjections, Bijections • Compositions • Equivalence Classes\n\n\n\n\n\n16 Aug, 2023\n5. Induction\nDominoes, Ladders, and Chips • Examples • Non-Examples • Strong Induction\n\n\n\n\n\n22 Aug, 2023\n6. Propositional and Predicate Logic\nSyntax • Truth Tables • Quantifiers\n\n\n\n\n\n23 Aug, 2023\n7. Inference Systems\nInference Rules (e.g, Modus Ponens, Modus Tollens, Resolution, etc) • Paradoxes\n\n\n\n\n\n29 Aug, 2023\n8. Elementary Counting Methods\nPermutations • Combinations • Binomial Coefficients\n\n\n\n\n\n30 Aug, 2023\n9. The Method of Double Counting\nExamples of proofs by double-counting\n\n\n\n\n\n12 Sep, 2023\n10. Intro to Graphs: Euler Tours\nNecessary and Sufficient Conditions for Euler Tours • Computing Euler Tours\n\n\n\n\n\n13 Sep, 2023\n11. Hall's Theorem\nMatchings • Congestion in Bipartite Graphs • Hall's Theorem • Applications\n\n\n\n\n\n19 Sep, 2023\n12. Graph Coloring\nMap Coloring • Greedy Algorithms • Bipartite Graphs • k-Degenerate Graphs\n\n\n\n\n\n20 Sep, 2023\n13. Planarity\nPlanar Graphs are Five-Colorable • Obstructions to Planarity\n\n\n\n\n\n26 Sep, 2023\n14. Graphs Recap\n~\n\n\n\n\n\n27 Sep, 2023\n15. Probability Intro\nBasics of Discrete Probability • Monty Hall • Conditional Probability\n\n\n\n\n\n03 Oct, 2023\n16. The Probabilistic Method - I\nAn Introduction to the Method • Applications in Graph Theory\n\n\n\n\n\n04 Oct, 2023\n17. The Probabilistic Method - II\nRamsey Number • Sum-Free Sets\n\n\n\n\n\n10 Oct, 2023\n18. Recap\n~\n\n\n\n\n\n17 Oct, 2023\n19. The Linear Algebra Method - I\nOddTown and EvenTown\n\n\n\n\n\n18 Oct, 2023\n20. The Linear Algebra Method - II\nVC Dimension of a Set System • Sauer's Lemma\n\n\n\n\n\n31 Oct, 2023\n21. Intro to Groups: Rotations and Symmetries\nTBA\n\n\n\n\n\n01 Nov, 2023\n22. Permutation and Cyclic Groups\nTBA\n\n\n\n\n\n07 Nov, 2023\n23. Homomorphisms\nTBA\n\n\n\n\n\n08 Nov, 2023\n24. Quotient Groups and First Isomorphism Theorem\nTBA\n\n\n\n\n\n14 Nov, 2023\n25. Intro to Number Theory: Extended Euclid's Algorithm\nTBA\n\n\n\n\n\n15 Nov, 2023\n26. Chinese Remainder Theorem\nTBA\n\n\n\n\n\n21 Nov, 2023\n27. Applications I: RSA\nTBA\n\n\n\n\n\n22 Nov, 2023\n28. Applications II: PageRank\nTBA\n\n\n\n\n\n23 Nov, 2023\n29. Recap\n~\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\nWeekly practice problems are posted to Google Classroom. There is no need to submit these assignments, but please make sure to get feedback from your peers, instructors and TAs as you go along. We also strongly encourage you to explore the problems from the courses available through Brilliant (access details have been shared on Google Classroom as well).\n\n\n\n\nProblems and solutions for weekly quizzes are available from within Mathematize. \n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                Syllabus: topics in lectures 1 to 9 (inclusive)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                Syllabus: topics in lectures 10 to 18 (inclusive)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                Syllabus: topics in lectures 21 to 26 (inclusive)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L19.html",
    "href": "2023/01-CS614/quizzes/L19.html",
    "title": "CS614. Advanced Algorithms. L19 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Bin Packing\n\n\n\nConsider the bin-packing problem:\nInput: \\(n\\) items with sizes \\(a_1 \\cdots a_n\\) respectively, a positive integer \\(B\\) (bin capacity) and a positive integer \\(k\\) (number of bins). Question: Is there a partition of the set \\(\\{1 \\cdots n\\}\\) into sets \\(S_1, \\ldots, S_k\\) such that for each \\(i \\in\\{1 \\cdots k\\}\\) we have that \\(\\sum_{j \\in S_i} a_j \\leq B\\)?\nShow that Bin Packing is NP-complete.\n\n\n\n\n\n\n\n\nProblem 2. BOX-DEPTH\n\n\n\nConsider the following problem, called BOX-DEPTH: Given a set of \\(n\\) axisaligned rectangles in the plane, how big is the largest subset of these rectangles that contain a common point?\n\nDescribe a polynomial-time reduction from BOX-DEPTH to MAXCLIQUE.\nDescribe and analyze a polynomial-time algorithm for BOX-DEPTH. [Hint: \\(O\\left(n^3\\right)\\) time should be easy, but \\(O(n \\log n)\\) time is possible.]\nWhy don’t these two results imply that \\(\\mathrm{P}=\\mathrm{NP}\\)?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L19.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L19.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L19 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Bin Packing\n\n\n\nConsider the bin-packing problem:\nInput: \\(n\\) items with sizes \\(a_1 \\cdots a_n\\) respectively, a positive integer \\(B\\) (bin capacity) and a positive integer \\(k\\) (number of bins). Question: Is there a partition of the set \\(\\{1 \\cdots n\\}\\) into sets \\(S_1, \\ldots, S_k\\) such that for each \\(i \\in\\{1 \\cdots k\\}\\) we have that \\(\\sum_{j \\in S_i} a_j \\leq B\\)?\nShow that Bin Packing is NP-complete.\n\n\n\n\n\n\n\n\nProblem 2. BOX-DEPTH\n\n\n\nConsider the following problem, called BOX-DEPTH: Given a set of \\(n\\) axisaligned rectangles in the plane, how big is the largest subset of these rectangles that contain a common point?\n\nDescribe a polynomial-time reduction from BOX-DEPTH to MAXCLIQUE.\nDescribe and analyze a polynomial-time algorithm for BOX-DEPTH. [Hint: \\(O\\left(n^3\\right)\\) time should be easy, but \\(O(n \\log n)\\) time is possible.]\nWhy don’t these two results imply that \\(\\mathrm{P}=\\mathrm{NP}\\)?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L09.html",
    "href": "2023/01-CS614/quizzes/L09.html",
    "title": "CS614. Advanced Algorithms. L09 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Dominating Set\n\n\n\nA dominating set of a graph \\(G\\) is a subset of vertices \\(S\\) such that every vertex in \\(G\\) either belongs to \\(S\\) or has a neighbor in \\(S\\).\nSuppose you have an instance of dominating set given by \\((G,k)\\), which is a YES-instance if and only if \\(G\\) has a dominating set of size at most \\(k\\).\nIs the following reduction rule safe?\nRR. If \\(d(v) &gt; k\\), then return \\((G-v,k-1)\\).\n( ) Yes (X) No\nBriefly justify your answer:\n|____|\n\n\n\n\n\n\n\n\nProblem 2. Connected Vertex Cover\n\n\n\nA connected vertex cover of a graph \\(G\\) is a subset of vertices \\(S\\) such that: (a) \\(S\\) is a vertex cover of \\(G\\), and (b) \\(G[S]\\) is a connected subgraph of \\(G\\).\nSuppose you have an instance of connected vertex cover given by \\((G,k)\\), which is a YES-instance if and only if \\(G\\) has a connected vertex cover of size at most \\(k\\).\n\n\n\n\n\n\nProblem 2.1 Connected Vertex Cover I.\n\n\n\nDesign a \\(\\mathcal{O}(2^k)\\) vertex kernel for Connected Vertex Cover.\nHint: What can you say about high degree vertices? How many can \\(G\\) have?\nFollow up hint: What can you say about two vertices that have the same neighbourhood among the high-degree vertices?\n\n\n\n\n\n\n\n\nProblem 2.2 Connected Vertex Cover II.\n\n\n\nObserve that the kernelization argument that we made for Vertex Cover does not work as-is for connected vertex cover. Recall that the reduction rules were the following:\n\nR0. If \\(k \\leqslant 0\\) and \\(E\\) is non-empty, return a trivial no-instance.\nR1. If \\(k \\geqslant 0\\) and \\(E\\) is empty, return a trivial yes-instance.\nR2. If \\(v\\) is a degree zero vertex, return \\((G\\setminus \\{v\\},k)\\), i.e, delete \\(v\\) from \\(G\\) and keep the budget the same.\nR3. If \\(v\\) is vertex whose degree is more than \\(k\\), return \\((G\\setminus \\{v\\},k-1)\\), i.e, delete \\(v\\) from \\(G\\) and reduce the budget by one.\n\nWhere does it fail? Justify, if possible, with an example."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L09.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L09.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L09 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Dominating Set\n\n\n\nA dominating set of a graph \\(G\\) is a subset of vertices \\(S\\) such that every vertex in \\(G\\) either belongs to \\(S\\) or has a neighbor in \\(S\\).\nSuppose you have an instance of dominating set given by \\((G,k)\\), which is a YES-instance if and only if \\(G\\) has a dominating set of size at most \\(k\\).\nIs the following reduction rule safe?\nRR. If \\(d(v) &gt; k\\), then return \\((G-v,k-1)\\).\n( ) Yes (X) No\nBriefly justify your answer:\n|____|\n\n\n\n\n\n\n\n\nProblem 2. Connected Vertex Cover\n\n\n\nA connected vertex cover of a graph \\(G\\) is a subset of vertices \\(S\\) such that: (a) \\(S\\) is a vertex cover of \\(G\\), and (b) \\(G[S]\\) is a connected subgraph of \\(G\\).\nSuppose you have an instance of connected vertex cover given by \\((G,k)\\), which is a YES-instance if and only if \\(G\\) has a connected vertex cover of size at most \\(k\\).\n\n\n\n\n\n\nProblem 2.1 Connected Vertex Cover I.\n\n\n\nDesign a \\(\\mathcal{O}(2^k)\\) vertex kernel for Connected Vertex Cover.\nHint: What can you say about high degree vertices? How many can \\(G\\) have?\nFollow up hint: What can you say about two vertices that have the same neighbourhood among the high-degree vertices?\n\n\n\n\n\n\n\n\nProblem 2.2 Connected Vertex Cover II.\n\n\n\nObserve that the kernelization argument that we made for Vertex Cover does not work as-is for connected vertex cover. Recall that the reduction rules were the following:\n\nR0. If \\(k \\leqslant 0\\) and \\(E\\) is non-empty, return a trivial no-instance.\nR1. If \\(k \\geqslant 0\\) and \\(E\\) is empty, return a trivial yes-instance.\nR2. If \\(v\\) is a degree zero vertex, return \\((G\\setminus \\{v\\},k)\\), i.e, delete \\(v\\) from \\(G\\) and keep the budget the same.\nR3. If \\(v\\) is vertex whose degree is more than \\(k\\), return \\((G\\setminus \\{v\\},k-1)\\), i.e, delete \\(v\\) from \\(G\\) and reduce the budget by one.\n\nWhere does it fail? Justify, if possible, with an example."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L20.html",
    "href": "2023/01-CS614/quizzes/L20.html",
    "title": "CS614. Advanced Algorithms. L20 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Monotone Satisfiability with Few True Variables\n\n\n\nConsider an instance of the Satisfiability Problem, specified by clauses \\(C_1, \\ldots, C_k\\) over a set of Boolean variables \\(x_1, \\ldots, x_n\\). We say that the instance is monotone if each term in each clause consists of a nonnegated variable; that is, each term is equal to \\(x_i\\), for some \\(i\\), rather than \\(\\bar{x}_i\\). Monotone instances of Satisfiability are very easy to solve: They are always satisfiable, by setting each variable equal to 1 . For example, suppose we have the three clauses \\[\n\\left(x_1 \\vee x_2\\right),\\left(x_1 \\vee x_3\\right),\\left(x_2 \\vee x_3\\right) .\n\\] This is monotone, and indeed the assignment that sets all three variables to 1 satisfies all the clauses. But we can observe that this is not the only satisfying assignment; we could also have set \\(x_1\\) and \\(x_2\\) to 1 , and \\(x_3\\) to 0 . Indeed, for any monotone instance, it is natural to ask how few variables we need to set to 1 in order to satisfy it.\nGiven a monotone instance of Satisfiability, together with a number \\(k\\), the problem of Monotone Satisfiability with Few True Variables asks: Is there a satisfying assignment for the instance in which at most \\(k\\) variables are set to 1?\nProve this problem is NP-complete. Hint: reduce from vertex cover.\n\n\n\n\n\n\n\n\nProblem 2. ALL-or-NOTHING-3SAT\n\n\n\nThe problem ALL-or-NOTHING-3SAT asks, given a 3CNF boolean formula, whether there is an assignment to the variables such that each clause either has three TRUE literals or has three FALSE literals.\n\nDescribe a polynomial-time algorithm to solve ALL-or-NOTHING-3SAT.\nBut 3SAT is NP-hard! Why doesn’t the existence of this algorithm prove that P=NP?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L20.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L20.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L20 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Monotone Satisfiability with Few True Variables\n\n\n\nConsider an instance of the Satisfiability Problem, specified by clauses \\(C_1, \\ldots, C_k\\) over a set of Boolean variables \\(x_1, \\ldots, x_n\\). We say that the instance is monotone if each term in each clause consists of a nonnegated variable; that is, each term is equal to \\(x_i\\), for some \\(i\\), rather than \\(\\bar{x}_i\\). Monotone instances of Satisfiability are very easy to solve: They are always satisfiable, by setting each variable equal to 1 . For example, suppose we have the three clauses \\[\n\\left(x_1 \\vee x_2\\right),\\left(x_1 \\vee x_3\\right),\\left(x_2 \\vee x_3\\right) .\n\\] This is monotone, and indeed the assignment that sets all three variables to 1 satisfies all the clauses. But we can observe that this is not the only satisfying assignment; we could also have set \\(x_1\\) and \\(x_2\\) to 1 , and \\(x_3\\) to 0 . Indeed, for any monotone instance, it is natural to ask how few variables we need to set to 1 in order to satisfy it.\nGiven a monotone instance of Satisfiability, together with a number \\(k\\), the problem of Monotone Satisfiability with Few True Variables asks: Is there a satisfying assignment for the instance in which at most \\(k\\) variables are set to 1?\nProve this problem is NP-complete. Hint: reduce from vertex cover.\n\n\n\n\n\n\n\n\nProblem 2. ALL-or-NOTHING-3SAT\n\n\n\nThe problem ALL-or-NOTHING-3SAT asks, given a 3CNF boolean formula, whether there is an assignment to the variables such that each clause either has three TRUE literals or has three FALSE literals.\n\nDescribe a polynomial-time algorithm to solve ALL-or-NOTHING-3SAT.\nBut 3SAT is NP-hard! Why doesn’t the existence of this algorithm prove that P=NP?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A03.html",
    "href": "2023/01-CS614/quizzes/A03.html",
    "title": "CS614. Advanced Algorithms. L03 Solutions.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet \\((U := U_1 \\cup \\cdots \\cup U_\\ell, \\mathcal{F})\\) be a partition matroid with budgets \\(a_1,\\ldots,a_\\ell\\).\nSuppose \\(S, T \\subseteq U_1 \\cup \\cdots \\cup U_\\ell\\) such that \\(S,T \\in \\mathcal{F}\\), and \\(|T| &gt; |S|\\).\nThen, there exists at least one part \\(U_i\\) where \\(|T \\cap U_i| &gt; |S \\cap U_i|\\). Now let \\(x \\in (T \\setminus S) \\cap U_i\\). Note that \\(S \\cup \\{x\\} \\in \\mathcal{F}\\) since:\n\\[\\begin{equation*}\n    |S \\cap U_j| =\n    \\begin{cases}\n      &lt; a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\nand therefore:\n\\[\\begin{equation*}\n    |(S \\cup \\{x\\}) \\cap U_j| =\n    \\begin{cases}\n      |S \\cap U_i| + 1 \\leqslant a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\n\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph \\(G\\) can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge \\(e\\) has \\(+1\\) in the row for one endpoint, \\(-1\\) in the row for the other endpoint, and \\(0\\) elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose we have a subset of edges that contains a cycle. For simplicity, suppose the cycle is given by:\n\\[\\{pq, qr, rs, st\\}\\]\nNow consider the column vectors \\(c_p, c_q, c_r, c_s\\):\n\\[\\begin{bmatrix}\nc_p & c_q & c_r & c_s\\\\\n1 & 0 & 0 & -1 \\\\\n-1 & 1 & 0 & 0 \\\\\n0 & -1 & -1 & 0 \\\\\n0 & 0 & 1 & 1\n\\end{bmatrix}\\]\nNote that:\n\\[1 \\cdot c_p + 1 \\cdot c_q + (-1) \\cdot c_r + 1 \\cdot c_s\\]\nis a linear combination with constants \\((1,1,-1,1)\\) that establish that these vectors are linearly dependent. In general, write down the columns in the order in which they appear on the cycle. If the first entry in the column is not \\(+1\\), then multiply the column by \\(-1\\) (except the last column, where we do the reverse: if the first entry is \\(+1\\), then we multiply the column by \\(-1\\)). This way, we have a situation where every row contains exactly one \\(+1\\) entry and one \\(-1\\) entry, and the linear combination sums to \\(0\\).\nThis shows that dependent subsets of the matroid correspond to linearly dependent columns of \\(M\\).\nTo see that independent subsets \\(S \\subseteq E(G)\\) correspond to linearly independent columns, consider the set of columns that correspond to \\(S\\):\n\\[\\{c_e ~|~ e \\in S\\    }\\]\nSuppose, for the sake of contradiction, that there was some non-trivial linear combination of these columns that vanished, i.e, for non-empty subset \\(T \\subseteq S\\), there exist constants \\(\\{\\alpha_e\\}_{e \\in T}\\) where:\n\\[\\sum_{e \\in T} \\alpha_e c_e = 0\\]\nBut now consider the subgraph consisting of the edges in \\(T\\). Note that the minimum degree of \\(T\\) must be two (suppose \\(u \\in T\\) has degree one, and its unique neighbor is \\(v\\): then consider the entry in the row corresponding to \\(u\\) in the column corresponding to the edge \\(uv\\): this is non-zero and there is no cancelation possible in the sum above). However, a graph whose minimum degree is two cannot be acyclic, and this is a contradiction."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A03.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A03.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L03 Solutions.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet \\((U := U_1 \\cup \\cdots \\cup U_\\ell, \\mathcal{F})\\) be a partition matroid with budgets \\(a_1,\\ldots,a_\\ell\\).\nSuppose \\(S, T \\subseteq U_1 \\cup \\cdots \\cup U_\\ell\\) such that \\(S,T \\in \\mathcal{F}\\), and \\(|T| &gt; |S|\\).\nThen, there exists at least one part \\(U_i\\) where \\(|T \\cap U_i| &gt; |S \\cap U_i|\\). Now let \\(x \\in (T \\setminus S) \\cap U_i\\). Note that \\(S \\cup \\{x\\} \\in \\mathcal{F}\\) since:\n\\[\\begin{equation*}\n    |S \\cap U_j| =\n    \\begin{cases}\n      &lt; a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\nand therefore:\n\\[\\begin{equation*}\n    |(S \\cup \\{x\\}) \\cap U_j| =\n    \\begin{cases}\n      |S \\cap U_i| + 1 \\leqslant a_j & \\text{if } j = i,\\\\\n      \\leqslant a_j & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\n\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph \\(G\\) can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge \\(e\\) has \\(+1\\) in the row for one endpoint, \\(-1\\) in the row for the other endpoint, and \\(0\\) elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose we have a subset of edges that contains a cycle. For simplicity, suppose the cycle is given by:\n\\[\\{pq, qr, rs, st\\}\\]\nNow consider the column vectors \\(c_p, c_q, c_r, c_s\\):\n\\[\\begin{bmatrix}\nc_p & c_q & c_r & c_s\\\\\n1 & 0 & 0 & -1 \\\\\n-1 & 1 & 0 & 0 \\\\\n0 & -1 & -1 & 0 \\\\\n0 & 0 & 1 & 1\n\\end{bmatrix}\\]\nNote that:\n\\[1 \\cdot c_p + 1 \\cdot c_q + (-1) \\cdot c_r + 1 \\cdot c_s\\]\nis a linear combination with constants \\((1,1,-1,1)\\) that establish that these vectors are linearly dependent. In general, write down the columns in the order in which they appear on the cycle. If the first entry in the column is not \\(+1\\), then multiply the column by \\(-1\\) (except the last column, where we do the reverse: if the first entry is \\(+1\\), then we multiply the column by \\(-1\\)). This way, we have a situation where every row contains exactly one \\(+1\\) entry and one \\(-1\\) entry, and the linear combination sums to \\(0\\).\nThis shows that dependent subsets of the matroid correspond to linearly dependent columns of \\(M\\).\nTo see that independent subsets \\(S \\subseteq E(G)\\) correspond to linearly independent columns, consider the set of columns that correspond to \\(S\\):\n\\[\\{c_e ~|~ e \\in S\\    }\\]\nSuppose, for the sake of contradiction, that there was some non-trivial linear combination of these columns that vanished, i.e, for non-empty subset \\(T \\subseteq S\\), there exist constants \\(\\{\\alpha_e\\}_{e \\in T}\\) where:\n\\[\\sum_{e \\in T} \\alpha_e c_e = 0\\]\nBut now consider the subgraph consisting of the edges in \\(T\\). Note that the minimum degree of \\(T\\) must be two (suppose \\(u \\in T\\) has degree one, and its unique neighbor is \\(v\\): then consider the entry in the row corresponding to \\(u\\) in the column corresponding to the edge \\(uv\\): this is non-zero and there is no cancelation possible in the sum above). However, a graph whose minimum degree is two cannot be acyclic, and this is a contradiction."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A05.html",
    "href": "2023/01-CS614/quizzes/A05.html",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nFollow up question\n\n\n\n\n\nWhat are examples of graphs where the 2-approximate solution via maximal matchings is close to optimal? The empty and complete graphs come to mind, are there others?\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEven if the input graph is an edge, a star, or a matching, the 2-approximate solution is already worse by a factor of two.\n\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be \\(S\\).\nLet \\(I := V(G) \\setminus S\\).\nIf \\(I = \\emptyset\\), then let \\(v \\in V(G)\\) be an arbitrary vertex; set \\(I := \\{v\\}\\).\n\nLet:\n\n\\(p\\) denote the size of a largest independent set in \\(G\\)\n\\(q\\) denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\n\\(r\\) denote \\(\\max(q,1)\\)\n\nNote that \\(r\\) is the size of the independent set output by the algorithm above.\nCome up with a graph where \\(p\\) can be a factor of \\(cn\\) larger than \\(r\\) for some constant \\(c\\).\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nIt was not explicit in the question: \\(G\\) denotes the input graph and \\(n\\) denotes the number of vertices in \\(G\\).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet \\(n = 2p\\) and consider a complete bipartite graph \\(K_{p,p}\\). The optimal independent set has size \\(p\\) but the algorithm above returns \\(1\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph \\(G\\) form a matroid over the universe \\(V(G)\\)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA subset of a vertex cover need not be a vertex cover; and in particular, the empty set is also not a vertex cover (although this axiom was not offered as an option)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A05.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A05.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nFollow up question\n\n\n\n\n\nWhat are examples of graphs where the 2-approximate solution via maximal matchings is close to optimal? The empty and complete graphs come to mind, are there others?\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEven if the input graph is an edge, a star, or a matching, the 2-approximate solution is already worse by a factor of two.\n\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be \\(S\\).\nLet \\(I := V(G) \\setminus S\\).\nIf \\(I = \\emptyset\\), then let \\(v \\in V(G)\\) be an arbitrary vertex; set \\(I := \\{v\\}\\).\n\nLet:\n\n\\(p\\) denote the size of a largest independent set in \\(G\\)\n\\(q\\) denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\n\\(r\\) denote \\(\\max(q,1)\\)\n\nNote that \\(r\\) is the size of the independent set output by the algorithm above.\nCome up with a graph where \\(p\\) can be a factor of \\(cn\\) larger than \\(r\\) for some constant \\(c\\).\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nIt was not explicit in the question: \\(G\\) denotes the input graph and \\(n\\) denotes the number of vertices in \\(G\\).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLet \\(n = 2p\\) and consider a complete bipartite graph \\(K_{p,p}\\). The optimal independent set has size \\(p\\) but the algorithm above returns \\(1\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph \\(G\\) form a matroid over the universe \\(V(G)\\)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA subset of a vertex cover need not be a vertex cover; and in particular, the empty set is also not a vertex cover (although this axiom was not offered as an option)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A06.html",
    "href": "2023/01-CS614/quizzes/A06.html",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 2/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 1/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf we increase the threshold \\(t\\) beyond \\(0.5\\), then the output may not even be a vertex cover: for example, consider the example of a complete graph where the LPOPT sets all variables to \\(0.5\\): in this case our output will be the empty set with any threshold higher than \\(0.5\\).\nIf we decrease the threshold \\(t\\) below \\(0.5\\), then the output will be a vertex cover — indeed, if any edge \\((u,v)\\) is uncovered, then both \\(u\\) and \\(v\\) were set to values less than \\(t\\), and in particular less than \\(0.5\\), so we will violate our edge constraint just as we do when working with a threshold of \\(0.5\\). However, by choosing a lower value, we worsen the approximation ratio: in particular, if \\(t = 1/3\\) then the output is a \\(3\\)-approximation.\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least \\(0.5\\) after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is \\(V=\\left\\{v_1, \\ldots, v_n\\right\\}\\) and we denote the associated variable of \\(v_i\\) by \\(x_i\\) then the cover \\(C\\) is computed as follows:\n\\(C:=\\left\\{v_i \\in V:\\right.\\) there is an edge \\(\\left(v_i, v_j\\right)\\) such that \\(\\left(x_i&gt;x_j\\right)\\) or \\(\\left(x_i=x_j\\right.\\) and \\(\\left.\\left.i&gt;j\\right)\\right\\}\\)\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\).\nThis gives a valid solution, and the approximation ratio of the algorithm becomes \\(3/2\\).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution is valid: indeed, let \\((u,v)\\) be an edge, and recall that the algorithm worked as follows:\nWe look at every edge, \nand then we round up the variable of the endpoint with the highest value, \nwhere in case of ties we take the endpoint with the highest index. \nSince one of the endpoints was rounded up, the edge is covered; and this is evidently true of every edge.\nThe solution with respect to this rounding may be better than the threshold-based rounding: for example, consider again a complete graph where the LPOPT sets all variables to \\(1/2\\): the threshold-based rounding leads to a solution of cost \\(n\\), while the cost here will be strictly less.\nHowever, to see that the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\), consider, for example, a cycle on \\(n\\) vertices: one can choose a suitably large value of \\(n\\) to bring the approximation ratio arbitrarily close to \\(2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nAs was clarified in class, this question is in the context of minimization problems.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution to the relaxed LP is a useful lower bound for the OPT. The value of the OPT for the 0/1-LP is exactly equal to the OPT (in a presumed exact formulation of the problem) and does not, by itself, provide information about the behavior of the relaxed LP.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on \\(n\\) vertices, where all vertices have weight 1?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nILPOPT = \\(n-1\\) and LPOPT = \\(n/2\\); so the integrality gap is \\(2 \\cdot (n-1)/n = 2(1 - \\frac{1}{n})\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A06.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A06.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 2/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 1/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf we increase the threshold \\(t\\) beyond \\(0.5\\), then the output may not even be a vertex cover: for example, consider the example of a complete graph where the LPOPT sets all variables to \\(0.5\\): in this case our output will be the empty set with any threshold higher than \\(0.5\\).\nIf we decrease the threshold \\(t\\) below \\(0.5\\), then the output will be a vertex cover — indeed, if any edge \\((u,v)\\) is uncovered, then both \\(u\\) and \\(v\\) were set to values less than \\(t\\), and in particular less than \\(0.5\\), so we will violate our edge constraint just as we do when working with a threshold of \\(0.5\\). However, by choosing a lower value, we worsen the approximation ratio: in particular, if \\(t = 1/3\\) then the output is a \\(3\\)-approximation.\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least \\(0.5\\) after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is \\(V=\\left\\{v_1, \\ldots, v_n\\right\\}\\) and we denote the associated variable of \\(v_i\\) by \\(x_i\\) then the cover \\(C\\) is computed as follows:\n\\(C:=\\left\\{v_i \\in V:\\right.\\) there is an edge \\(\\left(v_i, v_j\\right)\\) such that \\(\\left(x_i&gt;x_j\\right)\\) or \\(\\left(x_i=x_j\\right.\\) and \\(\\left.\\left.i&gt;j\\right)\\right\\}\\)\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\).\nThis gives a valid solution, and the approximation ratio of the algorithm becomes \\(3/2\\).\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution is valid: indeed, let \\((u,v)\\) be an edge, and recall that the algorithm worked as follows:\nWe look at every edge, \nand then we round up the variable of the endpoint with the highest value, \nwhere in case of ties we take the endpoint with the highest index. \nSince one of the endpoints was rounded up, the edge is covered; and this is evidently true of every edge.\nThe solution with respect to this rounding may be better than the threshold-based rounding: for example, consider again a complete graph where the LPOPT sets all variables to \\(1/2\\): the threshold-based rounding leads to a solution of cost \\(n\\), while the cost here will be strictly less.\nHowever, to see that the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\), consider, for example, a cycle on \\(n\\) vertices: one can choose a suitably large value of \\(n\\) to bring the approximation ratio arbitrarily close to \\(2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nRemark\n\n\n\n\n\nAs was clarified in class, this question is in the context of minimization problems.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe solution to the relaxed LP is a useful lower bound for the OPT. The value of the OPT for the 0/1-LP is exactly equal to the OPT (in a presumed exact formulation of the problem) and does not, by itself, provide information about the behavior of the relaxed LP.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on \\(n\\) vertices, where all vertices have weight 1?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nILPOPT = \\(n-1\\) and LPOPT = \\(n/2\\); so the integrality gap is \\(2 \\cdot (n-1)/n = 2(1 - \\frac{1}{n})\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L04.html",
    "href": "2023/01-CS614/quizzes/L04.html",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph \\(D=(V, E \\subseteq V \\times V)\\). A set \\(T \\subseteq E\\) is an arborescence (oriented forest) if:\n\n\\(T\\) does not contain a cycle (ignoring directions of edges).\nEvery vertex in \\(V\\) has at most one incoming edge.\n\nAn arborescence \\(T\\) with \\(|T|=n-1\\) will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph \\(G_D = (V,E)\\) associated with \\(D\\) (this is the graph obtained by “erasing the arrows” in \\(D\\)). Consider the universe given by \\(E\\). Suggest two matroids \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\) for which set of arborescences is given by the sets independent in both \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\nHint: these are both matroids seen in class. Further, you might find it useful to partition \\(E\\) into \\(|V|\\) many parts as follows — the part \\(P_v\\) contains all edges that are incoming arcs for the vertex \\(v\\) in \\(D\\). Can you define a matroid based on this partition?\nDescribe \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L04.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L04.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph \\(D=(V, E \\subseteq V \\times V)\\). A set \\(T \\subseteq E\\) is an arborescence (oriented forest) if:\n\n\\(T\\) does not contain a cycle (ignoring directions of edges).\nEvery vertex in \\(V\\) has at most one incoming edge.\n\nAn arborescence \\(T\\) with \\(|T|=n-1\\) will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph \\(G_D = (V,E)\\) associated with \\(D\\) (this is the graph obtained by “erasing the arrows” in \\(D\\)). Consider the universe given by \\(E\\). Suggest two matroids \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\) for which set of arborescences is given by the sets independent in both \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\nHint: these are both matroids seen in class. Further, you might find it useful to partition \\(E\\) into \\(|V|\\) many parts as follows — the part \\(P_v\\) contains all edges that are incoming arcs for the vertex \\(v\\) in \\(D\\). Can you define a matroid based on this partition?\nDescribe \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L06.html",
    "href": "2023/01-CS614/quizzes/L06.html",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 2/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 1/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least \\(0.5\\) after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is \\(V=\\left\\{v_1, \\ldots, v_n\\right\\}\\) and we denote the associated variable of \\(v_i\\) by \\(x_i\\) then the cover \\(C\\) is computed as follows:\n\\(C:=\\left\\{v_i \\in V:\\right.\\) there is an edge \\(\\left(v_i, v_j\\right)\\) such that \\(\\left(x_i&gt;x_j\\right)\\) or \\(\\left(x_i=x_j\\right.\\) and \\(\\left.\\left.i&gt;j\\right)\\right\\}\\)\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\).\nThis gives a valid solution, and the approximation ratio of the algorithm becomes \\(3/2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on \\(n\\) vertices, where all vertices have weight 1?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L06.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L06.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L06 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the Coursera course on Approximation Algorithms taught by Mark de Berg.\n\n\n\n\n\n\n\n\nProblem 1. Changing the threshold\n\n\n\nConsider the algorithm LPAPX-WVC from the class.\n\n\n\n\n\n\nProblem 1.1 Increasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 2/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nSuppose that instead of putting a vertex \\(v_i\\) into the cover when \\(x_i \\geqslant 1/2\\), we put \\(v_i\\) into the cover when \\(x_i \\geqslant 1/3\\). What happens?\n\nWe still get a valid solution, and the algorithm remains a 2-approximation.\nWe still get a valid solution, and the algorithm becomes a (3/2)-approximation.\nWe still get a valid solution, and the algorithm becomes a 3-approximation.\nWe may no longer get a valid solution.\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Changing the rounding scheme\n\n\n\nConsider a different rounding strategy for the LP relaxation of the vertex cover problem. Instead of rounding up every vertex whose value is at least \\(0.5\\) after running the LP, we do the following:\nWe look at every edge, and then we round up the variable of the endpoint with the highest value, where in case of ties we take the endpoint with the highest index.\nIn other words, if the vertex set is \\(V=\\left\\{v_1, \\ldots, v_n\\right\\}\\) and we denote the associated variable of \\(v_i\\) by \\(x_i\\) then the cover \\(C\\) is computed as follows:\n\\(C:=\\left\\{v_i \\in V:\\right.\\) there is an edge \\(\\left(v_i, v_j\\right)\\) such that \\(\\left(x_i&gt;x_j\\right)\\) or \\(\\left(x_i=x_j\\right.\\) and \\(\\left.\\left.i&gt;j\\right)\\right\\}\\)\nWhich statement is true?\n\nThis does not work, because we might report an invalid solution.\nThis gives a valid solution, but the approximation ratio becomes worse.\nThis gives a valid solution, and in fact the solution is always exactly the same as in the original rounding scheme.\nThis gives a valid solution. We sometimes report a better solution than in the original rounding scheme, but the approximation ratio of the algorithm is still more than \\(2 - \\epsilon\\) for any \\(\\epsilon &gt; 0\\).\nThis gives a valid solution, and the approximation ratio of the algorithm becomes \\(3/2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Lower Bound\n\n\n\nSuppose you have created an algorithm for a certain problem using LP relaxation and you want to say something about its approximation ratio. Which lower bound on the optimal solution can you use?\n\nThe solution to the 0/1-LP.\nThe solution to the relaxed LP.\nDepends on the problem.\n\n\n\n\n\n\n\n\n\nProblem 4. Integrality Gap\n\n\n\nWhat is the integrality gap of the vertex-cover LP for the complete graph on \\(n\\) vertices, where all vertices have weight 1?"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L13.html",
    "href": "2023/01-CS614/quizzes/L13.html",
    "title": "CS614. Advanced Algorithms. L13 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. FVS: is this FPT?\n\n\n\nRecall the following branching algorithm for Feedback Vertex Set (FVS) discussed in class:\n\nPreprocess to eliminate vertices of degree at most two, resulting in an equivlaent multigraph.\nPreprocess to force vertices with self-loops in the solution and adjust the budget as appropriate.\nIf a pair of vertices have more than two edges between them, delete all but two of these edges.\nSTOP if the graph is a forest or if we are out of budget.\nFind a shortest cycle and branch on all its vertices.\n\nSince a graph of minimum degree three that is not acyclic always has a cycle of length \\(O(\\lg n)\\), this algorithm has a running time of \\(O^\\star((\\lg n)^k)\\). Argue that this running time in fact shows that FVS is FPT in \\(k\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L13.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L13.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L13 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. FVS: is this FPT?\n\n\n\nRecall the following branching algorithm for Feedback Vertex Set (FVS) discussed in class:\n\nPreprocess to eliminate vertices of degree at most two, resulting in an equivlaent multigraph.\nPreprocess to force vertices with self-loops in the solution and adjust the budget as appropriate.\nIf a pair of vertices have more than two edges between them, delete all but two of these edges.\nSTOP if the graph is a forest or if we are out of budget.\nFind a shortest cycle and branch on all its vertices.\n\nSince a graph of minimum degree three that is not acyclic always has a cycle of length \\(O(\\lg n)\\), this algorithm has a running time of \\(O^\\star((\\lg n)^k)\\). Argue that this running time in fact shows that FVS is FPT in \\(k\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L03.html",
    "href": "2023/01-CS614/quizzes/L03.html",
    "title": "CS614. Advanced Algorithms. L03 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph \\(G\\) can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge \\(e\\) has \\(+1\\) in the row for one endpoint, \\(-1\\) in the row for the other endpoint, and \\(0\\) elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L03.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L03.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L03 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Partition Matroid\n\n\n\nShow that the exchange axiom holds for the Partition Matroid defined in class.\n\n\n\n\n\n\n\n\nProblem 2. Representing the Graphic Matroid\n\n\n\nThe graphic matroid of a graph \\(G\\) can be represented by the following matrix: we have one row for each vertex, and one column for each edge. The column for edge \\(e\\) has \\(+1\\) in the row for one endpoint, \\(-1\\) in the row for the other endpoint, and \\(0\\) elsewhere; the choice of which endpoint to give which sign is arbitrary.\nArgue that this is a valid representation (i.e, that the forests correspond to linearly independent columns and the subsets of edges that have cycles in them correspond to dependent columns)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L14.html",
    "href": "2023/01-CS614/quizzes/L14.html",
    "title": "CS614. Advanced Algorithms. L14 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 2. High-Degree Branching for FVS\n\n\n\nApply the same preprocessing steps as in the previous problem.\nLet \\(\\left(v_1, v_2, \\ldots, v_n\\right)\\) be a descending ordering of \\(V(G)\\) according to vertex degrees, i.e., \\(d\\left(v_1\\right) \\geq d\\left(v_2\\right) \\geq \\ldots \\geq d\\left(v_n\\right)\\). Let \\(V_{3 k}=\\left\\{v_1, \\ldots, v_{3 k}\\right\\}\\).\nRecall that the minimum vertex degree of \\(G\\) is at least 3. Show that every feedback vertex set in \\(G\\) of size at most \\(k\\) contains at least one vertex of \\(V_{3 k}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L14.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L14.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L14 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 2. High-Degree Branching for FVS\n\n\n\nApply the same preprocessing steps as in the previous problem.\nLet \\(\\left(v_1, v_2, \\ldots, v_n\\right)\\) be a descending ordering of \\(V(G)\\) according to vertex degrees, i.e., \\(d\\left(v_1\\right) \\geq d\\left(v_2\\right) \\geq \\ldots \\geq d\\left(v_n\\right)\\). Let \\(V_{3 k}=\\left\\{v_1, \\ldots, v_{3 k}\\right\\}\\).\nRecall that the minimum vertex degree of \\(G\\) is at least 3. Show that every feedback vertex set in \\(G\\) of size at most \\(k\\) contains at least one vertex of \\(V_{3 k}\\)."
  },
  {
    "objectID": "2023/01-CS614/exams/E03.html",
    "href": "2023/01-CS614/exams/E03.html",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nEXACT MATCH (3 points)\n\n\n\nGiven a graph \\(G\\) and an integer \\(k\\), the EXACT MATCH problem asks for an induced matching of size \\(k\\), that is, \\(k\\) edges \\(x_1 y_1, \\ldots, x_k y_k\\) such that the \\(2k\\) endpoints are all distinct and there is no edge between \\(\\left\\{x_i, y_i\\right\\}\\) and \\(\\left\\{x_j, y_j\\right\\}\\) for any \\(i \\neq j\\).\nProve that EXACT MATCH parameterized by \\(k\\) is as hard as INDEPENDENT SET parameterized by \\(k\\).\n\n\n\n\n\n\n\n\nDominating Set on Restricted Classes\n\n\n\nConsider the Dominating Set problem.\n\n\n\n\n\n\nProblem 2.1 Understanding graph classes (1 point)\n\n\n\n\n\nLet \\(\\mathcal{A}\\) be the graphs excluding the star \\(K_{1,4}\\) as an induced subgraph. That is, a graph \\(G\\) belongs to \\(\\mathcal{A}\\) if and only if there is no copy of a star on four leaves as an induced subgraph (but you may still have vertices of degree four or more).\nSimilarly, let \\(\\mathcal{B}\\) be the graphs excluding the star \\(K_{1,2}\\) as an induced subgraph.\nWhich of the following is true?\n\n\\(\\mathcal{A} \\subseteq \\mathcal{B}\\)\n\\(\\mathcal{B} \\subseteq \\mathcal{A}\\)\nneither of the above\n\n\n\n\n\n\n\n\n\n\nProblem 2.2 An Easy Case (2 points)\n\n\n\n\n\nCan you solve Dominating Set in polynomial time if your input graph does not contain the star \\(K_{1,2}\\) as an induced subgraph?\n\n\n\n\n\n\n\n\n\nProblem 2.3 A Hard Case (4 points)\n\n\n\n\n\nProve that Dominating Set restricted to graphs excluding the star \\(K_{1,4}\\) as an induced subgraph is as hard as Dominating Set on general graphs.\nHint: look up the textbook (Theorem 13.15) reduction for Connected Dominating Set and adapt it.\n\n\n\n\n\n\n\n\n\n\n\nPERMUTATION COMPOSITION (3 points)\n\n\n\nThe EXACT UNIQUE HITTING SET problem is the following:\nInput: A universe \\(U\\), a set \\(A\\) of subsets of \\(U\\), and an integer \\(k\\). Question: Does there exist a set \\(X \\subseteq U\\) of size exactly \\(k\\) such that \\(|A \\cap X|=1\\) for every \\(A \\in A\\)?\nIn the PERMUTATION COMPOSITION problem, the input consists of a family \\(\\mathcal{P}\\) of permutations of a finite universe \\(U\\), additional permutation \\(\\pi\\) of \\(U\\), and an integer \\(k\\), and the question is whether one can find a sequence \\(\\pi_1, \\pi_2, \\ldots, \\pi_k \\in \\mathcal{P}\\) such that:\n\\[\\pi=\\pi_1 \\circ \\pi_2 \\circ \\ldots \\circ \\pi_k.\\]\nShow a reduction from EXACT UNIQUE HITTING SET to PERMUTATION COMPOSITION.\n\n\n\n\n\n\n\n\nNICE SUBSET (3 points)\n\n\n\nLet \\(G=\\left(X, Y, E\\right)\\) be an undirected bipartite graph, that is, a graph whose nodes are divided into two sets, \\(X\\) and \\(Y\\), such that every edge in \\(E\\) connects a node in \\(X\\) to a node in \\(Y\\). The nodes in \\(X\\) are all labeled with non-negative integers.\nSome of the nodes in \\(Y\\) can be removed to leave a subset \\(W \\subseteq Y\\). A subset \\(W\\) is called nice with \\(G\\) if every node in \\(X\\) which has been assigned a number \\(m\\) is connected to exactly \\(m\\) nodes in \\(W\\). An example of a nice set is in the image below.\nThe problem is to determine whether a nice \\(W\\) exists. Demonstrate a reduction from 3SAT to this problem.\n\n\n\nImage showing an example\n\n\n\n\n\n\n\n\n\n\nNP-completeness Examples (4 points)\n\n\n\nPick any two problems below and show that they are NP-complete.\n\n\n\n\n\n\nProblem 5.1\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) contain a simple path that visits all but 9 vertices?\n\n\n\n\n\n\n\n\n\nProblem 5.2\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) have a spanning tree in which every node has degree at most 32?\n\n\n\n\n\n\n\n\n\nProblem 5.3\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) have a spanning tree with at most 5 leaves?\n\n\n\n\n\n\n\n\n\nProblem 5.4\n\n\n\n\n\nGiven an undirected graph \\(G=(V, E)\\), what is the size of the largest subset of vertices \\(S \\subseteq V\\) such that at most 50 edges in \\(E\\) have both endpoints in \\(S\\)?"
  },
  {
    "objectID": "2023/01-CS614/exams/E03.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/exams/E03.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nEXACT MATCH (3 points)\n\n\n\nGiven a graph \\(G\\) and an integer \\(k\\), the EXACT MATCH problem asks for an induced matching of size \\(k\\), that is, \\(k\\) edges \\(x_1 y_1, \\ldots, x_k y_k\\) such that the \\(2k\\) endpoints are all distinct and there is no edge between \\(\\left\\{x_i, y_i\\right\\}\\) and \\(\\left\\{x_j, y_j\\right\\}\\) for any \\(i \\neq j\\).\nProve that EXACT MATCH parameterized by \\(k\\) is as hard as INDEPENDENT SET parameterized by \\(k\\).\n\n\n\n\n\n\n\n\nDominating Set on Restricted Classes\n\n\n\nConsider the Dominating Set problem.\n\n\n\n\n\n\nProblem 2.1 Understanding graph classes (1 point)\n\n\n\n\n\nLet \\(\\mathcal{A}\\) be the graphs excluding the star \\(K_{1,4}\\) as an induced subgraph. That is, a graph \\(G\\) belongs to \\(\\mathcal{A}\\) if and only if there is no copy of a star on four leaves as an induced subgraph (but you may still have vertices of degree four or more).\nSimilarly, let \\(\\mathcal{B}\\) be the graphs excluding the star \\(K_{1,2}\\) as an induced subgraph.\nWhich of the following is true?\n\n\\(\\mathcal{A} \\subseteq \\mathcal{B}\\)\n\\(\\mathcal{B} \\subseteq \\mathcal{A}\\)\nneither of the above\n\n\n\n\n\n\n\n\n\n\nProblem 2.2 An Easy Case (2 points)\n\n\n\n\n\nCan you solve Dominating Set in polynomial time if your input graph does not contain the star \\(K_{1,2}\\) as an induced subgraph?\n\n\n\n\n\n\n\n\n\nProblem 2.3 A Hard Case (4 points)\n\n\n\n\n\nProve that Dominating Set restricted to graphs excluding the star \\(K_{1,4}\\) as an induced subgraph is as hard as Dominating Set on general graphs.\nHint: look up the textbook (Theorem 13.15) reduction for Connected Dominating Set and adapt it.\n\n\n\n\n\n\n\n\n\n\n\nPERMUTATION COMPOSITION (3 points)\n\n\n\nThe EXACT UNIQUE HITTING SET problem is the following:\nInput: A universe \\(U\\), a set \\(A\\) of subsets of \\(U\\), and an integer \\(k\\). Question: Does there exist a set \\(X \\subseteq U\\) of size exactly \\(k\\) such that \\(|A \\cap X|=1\\) for every \\(A \\in A\\)?\nIn the PERMUTATION COMPOSITION problem, the input consists of a family \\(\\mathcal{P}\\) of permutations of a finite universe \\(U\\), additional permutation \\(\\pi\\) of \\(U\\), and an integer \\(k\\), and the question is whether one can find a sequence \\(\\pi_1, \\pi_2, \\ldots, \\pi_k \\in \\mathcal{P}\\) such that:\n\\[\\pi=\\pi_1 \\circ \\pi_2 \\circ \\ldots \\circ \\pi_k.\\]\nShow a reduction from EXACT UNIQUE HITTING SET to PERMUTATION COMPOSITION.\n\n\n\n\n\n\n\n\nNICE SUBSET (3 points)\n\n\n\nLet \\(G=\\left(X, Y, E\\right)\\) be an undirected bipartite graph, that is, a graph whose nodes are divided into two sets, \\(X\\) and \\(Y\\), such that every edge in \\(E\\) connects a node in \\(X\\) to a node in \\(Y\\). The nodes in \\(X\\) are all labeled with non-negative integers.\nSome of the nodes in \\(Y\\) can be removed to leave a subset \\(W \\subseteq Y\\). A subset \\(W\\) is called nice with \\(G\\) if every node in \\(X\\) which has been assigned a number \\(m\\) is connected to exactly \\(m\\) nodes in \\(W\\). An example of a nice set is in the image below.\nThe problem is to determine whether a nice \\(W\\) exists. Demonstrate a reduction from 3SAT to this problem.\n\n\n\nImage showing an example\n\n\n\n\n\n\n\n\n\n\nNP-completeness Examples (4 points)\n\n\n\nPick any two problems below and show that they are NP-complete.\n\n\n\n\n\n\nProblem 5.1\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) contain a simple path that visits all but 9 vertices?\n\n\n\n\n\n\n\n\n\nProblem 5.2\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) have a spanning tree in which every node has degree at most 32?\n\n\n\n\n\n\n\n\n\nProblem 5.3\n\n\n\n\n\nGiven an undirected graph \\(G\\), does \\(G\\) have a spanning tree with at most 5 leaves?\n\n\n\n\n\n\n\n\n\nProblem 5.4\n\n\n\n\n\nGiven an undirected graph \\(G=(V, E)\\), what is the size of the largest subset of vertices \\(S \\subseteq V\\) such that at most 50 edges in \\(E\\) have both endpoints in \\(S\\)?"
  },
  {
    "objectID": "2023/01-CS614/index.html",
    "href": "2023/01-CS614/index.html",
    "title": "CS 614 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis course is an introduction to techniques in achieving specific trade-offs, and understanding the theoretical foundations of frameworks that help us establish when certain tradeoffs are simply not feasible.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary. For students of IITGN, this course naturally follows up on DSA-II.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\nSpecific Pointers:\n\nMatroids: Erickson, the entire chapter and Section 12.2.1 from Parameterized Algorithms.\nVertex Cover:\n\nBranching: see Section 3.1 in Parameterized Algorithms.\nKernels: see Section 2.2.1 for the simple kernel, and Section 2.3.1 for the kernel based on Crown Decomposition in Parameterized Algorithms.\n2-approximation via matchings and LP: Section 21.3 in these notes.\n\nSet Cover:\n\n\\(f\\)-Approximation via LP rounding: Section 1.2 and 1.3 in The Design of Approximation Algorithms.\nRounding a dual solution: Sections 1.4 and 1.5 in The Design of Approximation Algorithms. Also see Chapter A in the appendix for more background on weak duality and complementary slackness.\nGreedy approximation: Section 1.6 in The Design of Approximation Algorithms.\n\nFeedback Vertex Set:\n\nThe \\(O(\\log n)\\)-approximation: Section 7.2 in The Design of Approximation Algorithms.\nThe \\(2\\)-approximation: Section 14.2 in The Design of Approximation Algorithms.\n\nMiscellaneous\n\nColor Coding: Section 5.2 in Parameterized Algorithms.\nInclusion-Exclusion for Hamiltonian Path: Section 10.1.1 in Parameterized Algorithms.\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures on Mondays: 9PM — 10:30PM (7/206)\nLectures on Wednesdays: 2PM — 3:30PM (7/206)\nOffice Hours: By email.\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach class will have a quiz worth 2 points. The quizzes will be integrated into the lecture via Mentimeter. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThe are three assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual and on Gradescope via course code 485628.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\n\n\n\n\nLecturesQuizzesExamsReflections\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2023\n1. Matroids and Greedy Algorithms - I\nMatroids - definitions and examples • GreedyBasis Algorithm • Example: Scheduling with Deadlines\n\n\n\n\n\n09 Jan, 2023\n2. Matroids and Greedy Algorithms - II\nProof of correctness of GreedyBasis\n\n\n\n\n\n11 Jan, 2023\n3. Matroid Intersection - I\nMatroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n\n\n\n\n\n16 Jan, 2023\n4. Matroid Intersection - II\nA polynomial time algorithm for Matroid Intersection\n\n\n\n\n\n18 Jan, 2023\n5. Vertex Cover\nDefinition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n\n\n\n\n\n23 Jan, 2023\n6. Vertex Cover\nIntroduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n\n\n\n\n\n25 Jan, 2023\n7. Vertex Cover\nIntroduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n\n\n\n\n\n01 Feb, 2023\n8. Vertex Cover\nIntroduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n\n\n\n\n\n02 Feb, 2023\n9. Vertex Cover\nA Linear Kernel for Vertex Cover based on the LP formulation\n\n\n\n\n\n13 Feb, 2023\n10. Set Cover\nA Greedy Approximation Algorithm • A LP formulation\n\n\n\n\n\n15 Feb, 2023\n11. Set Cover\nDual LP formulation • Weak Duality • Complementary Slackness Conditions • Rounding a Dual Solution\n\n\n\n\n\n20 Feb, 2023\n12. Detour: Long Path\nPrinciple of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n\n\n\n\n\n22 Feb, 2023\n13. Feedback Vertex Set\nDual LP Recap • Introduction to Feedback Vertex Set\n\n\n\n\n\n27 Feb, 2023\n14. Feedback Vertex Set\nA first Primal-Dual-based O(log n)-approximation for FVS\n\n\n\n\n\n01 Mar, 2023\n15. No Class\n\n\n\n\n\n\n13 Mar, 2023\n16. Feedback Vertex Set\nA 2-approximation algorithm for FVS: motivating the formulation\n\n\n\n\n\n15 Mar, 2023\n17. Feedback Vertex Set\nA 2-approximation algorithm for FVS: the key combinatorial lemma\n\n\n\n\n\n20 Mar, 2023\n18. Feedback Vertex Set\nIterative Compression • An O*(3.619^k) algorithm for FVS on general graphs\n\n\n\n\n\n27 Mar, 2023\n19. Lower Bounds\nIntroduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n\n\n\n\n\n29 Mar, 2023\n20. Lower Bounds\nReductions from 3-Partition\n\n\n\n\n\n03 Apr, 2023\n21. Lower Bounds\nSAT and Circuit SAT • CNF SAT • 3SAT • 3SAT-4 • Monotone 3SAT • Polynomial-time variants\n\n\n\n\n\n05 Apr, 2023\n22. Lower Bounds\nSchaefer's Dichotomy Theorem • 2-colorable perfect matching\n\n\n\n\n\n10 Apr, 2023\n23. Lower Bounds\nParameterized Intractability • The W-hierarchy • Reductions from CLIQUE\n\n\n\n\n\n12 Apr, 2023\n24. Lower Bounds\nKernel Lower Bounds • Composition and Distillation • Examples of compositions • Parameter preserving transformations\n\n\n\n\n\n17 Apr, 2023\n25. Lower Bounds\nThe (Strong) Exponential Time Hypothesis • Sparsification Lemma • Implications for parameterized algorithms\n\n\n\n\n\n19 Apr, 2023\n26. Lower Bounds\nReductions based on the ETH\n\n\n\n\n\n24 Apr, 2023\n27. Lower Bounds\nInapproximability Introduction • NP optimization problems • PTAS, APX • Stronger notions of reductions that preserve approximability • APX-hardness of vertex cover\n\n\n\n\n\n26 Apr, 2023\n28. Lower Bounds\nGap Inapproximability • Gap Problems • Gap-producing and gap-preserving reductions • PCP theorem • Unique Games Conjecture\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                09 Jan, 2023\n            \n            \n                Matroids and Greedy Algorithms - II\n                Proof of correctness of GreedyBasis\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Matroid Intersection - I\n                Matroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Jan, 2023\n            \n            \n                Matroid Intersection - II\n                A polynomial time algorithm for Matroid Intersection\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jan, 2023\n            \n            \n                Vertex Cover\n                Definition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Feb, 2023\n            \n            \n                Vertex Cover\n                Introduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Feb, 2023\n            \n            \n                Vertex Cover\n                A Linear Kernel for Vertex Cover based on the LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Set Cover\n                A Greedy Approximation Algorithm • A LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Detour: Long Path\n                Principle of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                An O(log n)-approximation via primal dual\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                A 2-approximation algorithm using a different LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                Iterative Compression • An O*(3.619^k) algorithm for FVS on general graphs • A polynomial-time algorithm on graphs of maximum degree 3\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Lower Bounds\n                Introduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Mar, 2023\n            \n            \n                Lower Bounds\n                Reductions from 3-Partition\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Apr, 2023\n            \n            \n                Lower Bounds\n                Schaefer's Dichotomy Theorem • 2-colorable perfect matching\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                18 Feb, 2023\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Exam 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Apr, 2023\n            \n            \n                Exam 3\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\nThis course had seven attendees, and included Btech/Mtech/PhD students.\nI’d like to thank everyone for keeping all the classes — which were all traditional whiteboard lectuers — very interactive, and frequently helping me out with several arguments. Everyone also put in a lot of effort everyone into the various assessments: kudos on your successful completion of the course!"
  },
  {
    "objectID": "2023/01-CS614/index.html#cs614.-advanced-algorithms",
    "href": "2023/01-CS614/index.html#cs614.-advanced-algorithms",
    "title": "CS 614 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis course is an introduction to techniques in achieving specific trade-offs, and understanding the theoretical foundations of frameworks that help us establish when certain tradeoffs are simply not feasible.\n\n\n\nFig. Exploring tradeoffs between the demands of accuracy, speed, and coverage.\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary. For students of IITGN, this course naturally follows up on DSA-II.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\nSpecific Pointers:\n\nMatroids: Erickson, the entire chapter and Section 12.2.1 from Parameterized Algorithms.\nVertex Cover:\n\nBranching: see Section 3.1 in Parameterized Algorithms.\nKernels: see Section 2.2.1 for the simple kernel, and Section 2.3.1 for the kernel based on Crown Decomposition in Parameterized Algorithms.\n2-approximation via matchings and LP: Section 21.3 in these notes.\n\nSet Cover:\n\n\\(f\\)-Approximation via LP rounding: Section 1.2 and 1.3 in The Design of Approximation Algorithms.\nRounding a dual solution: Sections 1.4 and 1.5 in The Design of Approximation Algorithms. Also see Chapter A in the appendix for more background on weak duality and complementary slackness.\nGreedy approximation: Section 1.6 in The Design of Approximation Algorithms.\n\nFeedback Vertex Set:\n\nThe \\(O(\\log n)\\)-approximation: Section 7.2 in The Design of Approximation Algorithms.\nThe \\(2\\)-approximation: Section 14.2 in The Design of Approximation Algorithms.\n\nMiscellaneous\n\nColor Coding: Section 5.2 in Parameterized Algorithms.\nInclusion-Exclusion for Hamiltonian Path: Section 10.1.1 in Parameterized Algorithms.\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures on Mondays: 9PM — 10:30PM (7/206)\nLectures on Wednesdays: 2PM — 3:30PM (7/206)\nOffice Hours: By email.\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach class will have a quiz worth 2 points. The quizzes will be integrated into the lecture via Mentimeter. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThe are three assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual and on Gradescope via course code 485628.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\n\n\n\n\nLecturesQuizzesExamsReflections\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2023\n1. Matroids and Greedy Algorithms - I\nMatroids - definitions and examples • GreedyBasis Algorithm • Example: Scheduling with Deadlines\n\n\n\n\n\n09 Jan, 2023\n2. Matroids and Greedy Algorithms - II\nProof of correctness of GreedyBasis\n\n\n\n\n\n11 Jan, 2023\n3. Matroid Intersection - I\nMatroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n\n\n\n\n\n16 Jan, 2023\n4. Matroid Intersection - II\nA polynomial time algorithm for Matroid Intersection\n\n\n\n\n\n18 Jan, 2023\n5. Vertex Cover\nDefinition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n\n\n\n\n\n23 Jan, 2023\n6. Vertex Cover\nIntroduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n\n\n\n\n\n25 Jan, 2023\n7. Vertex Cover\nIntroduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n\n\n\n\n\n01 Feb, 2023\n8. Vertex Cover\nIntroduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n\n\n\n\n\n02 Feb, 2023\n9. Vertex Cover\nA Linear Kernel for Vertex Cover based on the LP formulation\n\n\n\n\n\n13 Feb, 2023\n10. Set Cover\nA Greedy Approximation Algorithm • A LP formulation\n\n\n\n\n\n15 Feb, 2023\n11. Set Cover\nDual LP formulation • Weak Duality • Complementary Slackness Conditions • Rounding a Dual Solution\n\n\n\n\n\n20 Feb, 2023\n12. Detour: Long Path\nPrinciple of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n\n\n\n\n\n22 Feb, 2023\n13. Feedback Vertex Set\nDual LP Recap • Introduction to Feedback Vertex Set\n\n\n\n\n\n27 Feb, 2023\n14. Feedback Vertex Set\nA first Primal-Dual-based O(log n)-approximation for FVS\n\n\n\n\n\n01 Mar, 2023\n15. No Class\n\n\n\n\n\n\n13 Mar, 2023\n16. Feedback Vertex Set\nA 2-approximation algorithm for FVS: motivating the formulation\n\n\n\n\n\n15 Mar, 2023\n17. Feedback Vertex Set\nA 2-approximation algorithm for FVS: the key combinatorial lemma\n\n\n\n\n\n20 Mar, 2023\n18. Feedback Vertex Set\nIterative Compression • An O*(3.619^k) algorithm for FVS on general graphs\n\n\n\n\n\n27 Mar, 2023\n19. Lower Bounds\nIntroduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n\n\n\n\n\n29 Mar, 2023\n20. Lower Bounds\nReductions from 3-Partition\n\n\n\n\n\n03 Apr, 2023\n21. Lower Bounds\nSAT and Circuit SAT • CNF SAT • 3SAT • 3SAT-4 • Monotone 3SAT • Polynomial-time variants\n\n\n\n\n\n05 Apr, 2023\n22. Lower Bounds\nSchaefer's Dichotomy Theorem • 2-colorable perfect matching\n\n\n\n\n\n10 Apr, 2023\n23. Lower Bounds\nParameterized Intractability • The W-hierarchy • Reductions from CLIQUE\n\n\n\n\n\n12 Apr, 2023\n24. Lower Bounds\nKernel Lower Bounds • Composition and Distillation • Examples of compositions • Parameter preserving transformations\n\n\n\n\n\n17 Apr, 2023\n25. Lower Bounds\nThe (Strong) Exponential Time Hypothesis • Sparsification Lemma • Implications for parameterized algorithms\n\n\n\n\n\n19 Apr, 2023\n26. Lower Bounds\nReductions based on the ETH\n\n\n\n\n\n24 Apr, 2023\n27. Lower Bounds\nInapproximability Introduction • NP optimization problems • PTAS, APX • Stronger notions of reductions that preserve approximability • APX-hardness of vertex cover\n\n\n\n\n\n26 Apr, 2023\n28. Lower Bounds\nGap Inapproximability • Gap Problems • Gap-producing and gap-preserving reductions • PCP theorem • Unique Games Conjecture\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                09 Jan, 2023\n            \n            \n                Matroids and Greedy Algorithms - II\n                Proof of correctness of GreedyBasis\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Matroid Intersection - I\n                Matroid Intersection and Matroid Parity (Section 12.2.1) • Connections with Matchings • 3-Matroid Intersection is NP-complete (Theorem 12.6)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Jan, 2023\n            \n            \n                Matroid Intersection - II\n                A polynomial time algorithm for Matroid Intersection\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Jan, 2023\n            \n            \n                Vertex Cover\n                Definition • Applications • Introduction to Approximation Algorithms • 2-approximation for Vertex Cover via maximal matchings\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Linear Programming • 2-approximation via rounding • A simple randomized algorithm for Vertex Cover\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Jan, 2023\n            \n            \n                Vertex Cover\n                Introduction to Fixed-Parameter Tractability • An O(2^k) FPT algorithm by branching\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Feb, 2023\n            \n            \n                Vertex Cover\n                Introduction to Kernelization • A Quadratic Kernel for Vertex Cover based on degree reductions\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Feb, 2023\n            \n            \n                Vertex Cover\n                A Linear Kernel for Vertex Cover based on the LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Set Cover\n                A Greedy Approximation Algorithm • A LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Detour: Long Path\n                Principle of Inclusion-Exclusion for a poly-space single-exponential algorithm for HAMPATH • Color Coding for Longest Path\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                An O(log n)-approximation via primal dual\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                A 2-approximation algorithm using a different LP formulation\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Feedback Vertex Set\n                Iterative Compression • An O*(3.619^k) algorithm for FVS on general graphs • A polynomial-time algorithm on graphs of maximum degree 3\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Lower Bounds\n                Introduction to NP-completeness • 3-Partition and friends • Multiprocessor Scheduling • Packing rectangles into a rectangle\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                29 Mar, 2023\n            \n            \n                Lower Bounds\n                Reductions from 3-Partition\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                05 Apr, 2023\n            \n            \n                Lower Bounds\n                Schaefer's Dichotomy Theorem • 2-colorable perfect matching\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                18 Feb, 2023\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                27 Mar, 2023\n            \n            \n                Exam 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Apr, 2023\n            \n            \n                Exam 3\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\nThis course had seven attendees, and included Btech/Mtech/PhD students.\nI’d like to thank everyone for keeping all the classes — which were all traditional whiteboard lectuers — very interactive, and frequently helping me out with several arguments. Everyone also put in a lot of effort everyone into the various assessments: kudos on your successful completion of the course!"
  },
  {
    "objectID": "2023/01-noc23-cs30/index.html",
    "href": "2023/01-noc23-cs30/index.html",
    "title": "noc23-cs30 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-noc23-cs30/index.html#noc23-cs30.",
    "href": "2023/01-noc23-cs30/index.html#noc23-cs30.",
    "title": "noc23-cs30 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-ES242/Q05.html",
    "href": "2024/03-ES242/Q05.html",
    "title": "Courses",
    "section": "",
    "text": "![[0013 Squared Adjacency Matrix]]\n\n\n![[0015 A Very Odd Party]]"
  },
  {
    "objectID": "2024/03-ES242/Q05.html#quiz-on-27-08-2024",
    "href": "2024/03-ES242/Q05.html#quiz-on-27-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0013 Squared Adjacency Matrix]]\n\n\n![[0015 A Very Odd Party]]"
  },
  {
    "objectID": "2024/03-ES242/Q10.html",
    "href": "2024/03-ES242/Q10.html",
    "title": "Courses",
    "section": "",
    "text": "![[0024 The Game of War]]\n\n![[0025 BFS Trace]]"
  },
  {
    "objectID": "2024/03-ES242/Q10.html#quiz-on-19-09-2024",
    "href": "2024/03-ES242/Q10.html#quiz-on-19-09-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0024 The Game of War]]\n\n![[0025 BFS Trace]]"
  },
  {
    "objectID": "2024/03-ES242/Q09.html",
    "href": "2024/03-ES242/Q09.html",
    "title": "Courses",
    "section": "",
    "text": "![[0022 How Disconnected Does it Get?]]\n\n![[0023 Grid Graphs]]"
  },
  {
    "objectID": "2024/03-ES242/Q09.html#quiz-on-17-09-2024",
    "href": "2024/03-ES242/Q09.html#quiz-on-17-09-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0022 How Disconnected Does it Get?]]\n\n![[0023 Grid Graphs]]"
  },
  {
    "objectID": "2024/03-ES242/Q08.html",
    "href": "2024/03-ES242/Q08.html",
    "title": "Courses",
    "section": "",
    "text": "![[0020 Euler Tours and Bit Strings]]"
  },
  {
    "objectID": "2024/03-ES242/Q08.html#quiz-on-10-09-2024",
    "href": "2024/03-ES242/Q08.html#quiz-on-10-09-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0020 Euler Tours and Bit Strings]]"
  },
  {
    "objectID": "2024/03-ES242/Q07.html",
    "href": "2024/03-ES242/Q07.html",
    "title": "Courses",
    "section": "",
    "text": "![[0019 Passwords and Euler Tours]]"
  },
  {
    "objectID": "2024/03-ES242/Q07.html#quiz-on-03-09-2024",
    "href": "2024/03-ES242/Q07.html#quiz-on-03-09-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0019 Passwords and Euler Tours]]"
  },
  {
    "objectID": "2024/03-ES242/Q02.html",
    "href": "2024/03-ES242/Q02.html",
    "title": "Courses",
    "section": "",
    "text": "![[0004 Identify Stable Matching]]\n\n![[0005 Disjoint Stable Matchings from GS]]\n\n![[0006 Identical Stable Matchings from GS]]\n\n![[0007 Engagement Status Through GS]]"
  },
  {
    "objectID": "2024/03-ES242/Q02.html#quiz-on-13-08-2024",
    "href": "2024/03-ES242/Q02.html#quiz-on-13-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0004 Identify Stable Matching]]\n\n![[0005 Disjoint Stable Matchings from GS]]\n\n![[0006 Identical Stable Matchings from GS]]\n\n![[0007 Engagement Status Through GS]]"
  },
  {
    "objectID": "2024/01-MG/14/index.html",
    "href": "2024/01-MG/14/index.html",
    "title": "#14. Jam, Hot and Other Games (Vol. 6, Ch 16)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/12/index.html",
    "href": "2024/01-MG/12/index.html",
    "title": "#12. The new Eleusis (Vol 13, Ch 16)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/06/index.html",
    "href": "2024/01-MG/06/index.html",
    "title": "#06. Wythoff Nim (Vol 13, Ch 8)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/08/index.html",
    "href": "2024/01-MG/08/index.html",
    "title": "#08. 4 unusual board games (Vol. 5, Ch 5)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/07/index.html",
    "href": "2024/01-MG/07/index.html",
    "title": "#07. The Game of Hex (Vol. 1, Ch 8)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/19/index.html",
    "href": "2024/01-MG/19/index.html",
    "title": "#19. Game of Life (Vol. 10, Ch 20-22)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/17/index.html",
    "href": "2024/01-MG/17/index.html",
    "title": "#17. Bridg-it and other games (Vol. 3, Ch 18)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/11/index.html",
    "href": "2024/01-MG/11/index.html",
    "title": "#11. Eleusis (Vol. 2 Ch 15)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/20/index.html",
    "href": "2024/01-MG/20/index.html",
    "title": "#20. Conway’s Surreal Numbers (Vol 13, Ch 4)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/05/index.html",
    "href": "2024/01-MG/05/index.html",
    "title": "#05. Nim and Hackenbrush (Vol 10, Ch 14)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/03/index.html",
    "href": "2024/01-MG/03/index.html",
    "title": "#03. Generalised tic-tac-toe (Vol. 14 Ch 13)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-CS607/worksheets/Q01.html",
    "href": "2024/01-CS607/worksheets/Q01.html",
    "title": "Worksheet 01 Combinatorics with Applications in Computer Science",
    "section": "",
    "text": "Released: 04 Jan, 2024\nBack to course page\n\n\n\n\n\n\nProblem 1. Relationship between Hamming Distance and Error Correction\n\n\n\nRecall that a code \\(C\\) is a subset of \\(S^n\\), where \\(S\\) is a fixed, finite alphabet and \\(S^n\\) denotes the set of all strings of length \\(n\\) over \\(S\\). Recall also that the hamming distance between two \\(n\\)-length strings \\(u\\) and \\(v\\) over \\(S\\) is the number of indicies on which \\(u\\) and \\(v\\) differ, and \\(d(C)\\) denotes the smallest hamming distance between any pair of strings in \\(C\\). Finally, a code \\(C\\) is said to correct \\(t\\) errors if for every \\(u \\in S^n\\) there is at most one \\(w \\in C\\) such that \\(d(u,w) \\leq t\\).\nNow consider the following statement.\n\nA code \\(C\\) corrects \\(d\\) errors if and only if: \\(d(C) \\geq {\\color{red}{\\star}}\\).\n\nWhat is \\({\\color{red}\\star}\\)?\n\n\n\n\n\n\n\n\nProblem 2. The (Nearly) Impossible Chessboard Puzzle\n\n\n\nIs it possible to color the edges of a 64-dimensional hypercube with 64 colors so that the following property holds?\n\nFor every vertex of the hypercube, all its neighbors are colored with 64 distinct colors.\n\nNote. A 64-dimensional hypercube is a graph that has one vertex for every bit string of length 64, and two vertices are adjacent if and only if their hamming distance is one."
  },
  {
    "objectID": "2024/01-CS607/worksheets/Q01.html#cs607.-combinatorics-with-applications-in-computer-science",
    "href": "2024/01-CS607/worksheets/Q01.html#cs607.-combinatorics-with-applications-in-computer-science",
    "title": "Worksheet 01 Combinatorics with Applications in Computer Science",
    "section": "",
    "text": "Released: 04 Jan, 2024\nBack to course page\n\n\n\n\n\n\nProblem 1. Relationship between Hamming Distance and Error Correction\n\n\n\nRecall that a code \\(C\\) is a subset of \\(S^n\\), where \\(S\\) is a fixed, finite alphabet and \\(S^n\\) denotes the set of all strings of length \\(n\\) over \\(S\\). Recall also that the hamming distance between two \\(n\\)-length strings \\(u\\) and \\(v\\) over \\(S\\) is the number of indicies on which \\(u\\) and \\(v\\) differ, and \\(d(C)\\) denotes the smallest hamming distance between any pair of strings in \\(C\\). Finally, a code \\(C\\) is said to correct \\(t\\) errors if for every \\(u \\in S^n\\) there is at most one \\(w \\in C\\) such that \\(d(u,w) \\leq t\\).\nNow consider the following statement.\n\nA code \\(C\\) corrects \\(d\\) errors if and only if: \\(d(C) \\geq {\\color{red}{\\star}}\\).\n\nWhat is \\({\\color{red}\\star}\\)?\n\n\n\n\n\n\n\n\nProblem 2. The (Nearly) Impossible Chessboard Puzzle\n\n\n\nIs it possible to color the edges of a 64-dimensional hypercube with 64 colors so that the following property holds?\n\nFor every vertex of the hypercube, all its neighbors are colored with 64 distinct colors.\n\nNote. A 64-dimensional hypercube is a graph that has one vertex for every bit string of length 64, and two vertices are adjacent if and only if their hamming distance is one."
  },
  {
    "objectID": "2024/02-CS614/index.html",
    "href": "2024/02-CS614/index.html",
    "title": "CS614 | Summer 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nMondays and Thursdays, 11:30 AM to 1:00 PM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 May, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 May, 2024\nApproximation Algorithms\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/02-CS614/index.html#cs614.-advanced-algorithms",
    "href": "2024/02-CS614/index.html#cs614.-advanced-algorithms",
    "title": "CS614 | Summer 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nMondays and Thursdays, 11:30 AM to 1:00 PM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 May, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 May, 2024\nApproximation Algorithms\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/02-CS614/index.html#course-materials",
    "href": "2024/02-CS614/index.html#course-materials",
    "title": "CS614 | Summer 2024",
    "section": "",
    "text": "Date\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 May, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 May, 2024\nApproximation Algorithms\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-CS329/index.html",
    "href": "2024/03-CS329/index.html",
    "title": "CS329 | Fall 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nFoundations of AI: Multiagent Systems (CS329)\nCo-taught with Prof. Manisha Padala\nCourse Enrollment: 128 students\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nMondays and Thursdays, 11:30 AM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice hours with instructors available by appointment\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n05 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n08 Aug, 2024\nAgents and Agent Architectures\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-CS329/index.html#cs329.-foundations-of-ai-multiagent-systems",
    "href": "2024/03-CS329/index.html#cs329.-foundations-of-ai-multiagent-systems",
    "title": "CS329 | Fall 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nFoundations of AI: Multiagent Systems (CS329)\nCo-taught with Prof. Manisha Padala\nCourse Enrollment: 128 students\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nMondays and Thursdays, 11:30 AM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice hours with instructors available by appointment\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n05 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n08 Aug, 2024\nAgents and Agent Architectures\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-CS329/index.html#course-materials",
    "href": "2024/03-CS329/index.html#course-materials",
    "title": "CS329 | Fall 2024",
    "section": "",
    "text": "Date\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n05 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n08 Aug, 2024\nAgents and Agent Architectures\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2025/01-SC-CM/index.html",
    "href": "2025/01-SC-CM/index.html",
    "title": "Card Magic",
    "section": "",
    "text": "Old and New Tricks with Cards\n\nA Short Course on Card Magic\nProf. Ramprasad Saptharishi, TIFR Mumbai\n\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nCard magic is a fascinating blend of mathematics, psychology, and performance art. In this short course, we’ll explore some fundamental principles of card magic, focusing on mathematical techniques that create seemingly impossible effects. While the focus will be on self-working tricks and the math that drives them, we will also cover practical and presentation aspects of card magic.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\n Prof. Ramprasad Saptharishi is a faculty member in the School of Technology and Computer Science at the Tata Institute of Fundamental Research (TIFR).\nHe completed his Ph.D. under the guidance of Manindra Agrawal from Chennai Mathematical Institute. Following his Ph.D., he was a Research Fellow at Microsoft Research India for a year, hosted by Neeraj Kayal and Satya Lokam. Subsequently, he was a post-doctoral fellow at Tel Aviv University hosted by Amir Shpilka before joining TIFR.\nHis academic interests are in pseudorandomness and derandomization, algebraic circuit complexity, and broadly anything with an algebraic flavour. He also happens to be a connoisseur and performer of card magic!\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n\nDates: March 15 and 16, 2024\nFormat: Hybrid, but in-person recommended! Join us at 7/101.\nTime: 10AM-1PM and 3PM to 6PM on both days, with coffee and performance breaks\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is open to anyone interested in magic, mathematics, or both! No prior experience with card magic is required. Participants should bring a standard deck of playing cards. If you are at IIT Gandhinagar, sign up through our short course mechanism. We will shortly post a link to a WhatsApp group that you can join to stay up to date on proceedings.\n\n\n\n\n\n\n\n\n\nRecommended Reading\n\n\n\n\n\n\nMagical Mathematics: The Mathematical Ideas That Animate Great Magic Tricks by Persi Diaconis and Ron Graham\nExpert Card Technique by Jean Hugard and Frederick Braue\nMathematical Card Magic by Colm Mulcahy\nCard College (Volume 1) by Roberto Giobbi\n\n\n\n\n\n\nTeaching Plan\n\n\n\n\n\n\n\n\n\n\nSession 1: Introduction to Card Magic\nWe’ll start with the basics of card handling and some fundamental mathematical principles that underlie many card tricks. Topics include shuffle tracking, the Gilbreath principle, and basic probability in card magic.\n\n\n\n\n\n\n\n\n\n\n\n\nSession 2: Self-Working Card Tricks\nWe now demonstrate some concrete card tricks that leverage the principles we saw so far. These tricks work automatically without sleight of hand. We’ll work out how the principles from before support the magic in these tricks.\n\n\n\n\n\n\n\n\n\n\n\n\nSession 3: More Shuffles\nExplore more shuffle invariants and learn about De-Bruijn sequences; and pick up some new tricks.\n\n\n\n\n\n\n\n\n\n\n\n\nSession 4: Make it Your Own\nPractice the tricks you have learned so far and challenge yourself to design new tricks based on the priciples you have learned so far."
  },
  {
    "objectID": "2025/01-CS614/W01.html",
    "href": "2025/01-CS614/W01.html",
    "title": "Courses",
    "section": "",
    "text": "[!note]+ Max Coloring: Background\nIn this problem we will study a multi-channel wireless mesh network architecture. Let \\(V_N\\) be the set of mesh routers in a mesh network and \\(E_N\\) be the set of pairs of mesh routers which can communicate directly. Each router is equipped with two network interface cards.\nEach router is to be assigned at most two channels, so that every pair of routers that have a direct communication line have a common channel to transmit information on.\nAll our routers have a lot to discuss! So we want to open up as many channels as we can: the more channels we have, the less congestion we expect as network traffic ebbs and flows across these routers.\nAssume that the mesh network \\(G := (V_N,E_N)\\) is a simple, connected, bipartite, and undirected graph. Let \\(\\ell\\) denote the maximum number of channels that we can feasibly open up given the structure of \\(G\\).\n\n\n[!question]- Part 1. OPT and matchings Suppose \\(G\\) has a matching on \\(k\\) edges. What can you say about \\(\\ell\\), the optimal solution? Check all true statements.\nThe claims being made below are to be checked only if they hold for all instances.\n\n\\(\\ell \\geqslant k\\)\n\\(\\ell \\geqslant k+1\\)\n\\(\\ell \\leqslant k\\)\n\\(\\ell \\leqslant k/2\\)\n\n\n\n[!question]- Part 2. OPT and vertex cover Suppose \\(G\\) has a vertex cover of size at most \\(t\\). What can you say about \\(\\ell\\), the optimal solution? Check all true statements.\nThe claims being made below are to be checked only if they hold for all instances.\n\n\\(\\ell \\geqslant t\\)\n\\(\\ell \\leqslant 2t\\)\n\\(\\ell \\leqslant t+1\\)\n\\(\\ell \\leqslant t\\)\n\n\n\n[!question]- Part 3. A 2-approximation Describe an algorithm that, given \\(G\\) as input, outputs a valid channel assignment with at least \\(\\ell/2\\) channels.\nHint: use the fact that \\(G\\) is bipartite.\n\n\n[!note]+ Parallel Universe Job Scheduling\nWe have \\(n\\) jobs \\(J_1, \\ldots, J_n\\), and each job has a two-dimensional duration \\(\\langle p_i, q_i \\rangle\\). We have \\(m\\) machines that exist in two parallel universes \\(\\mathcal{P}\\) and \\(\\mathcal{Q}\\).\nWhen a job \\(J_i\\) is executed on any machine, it consumes \\(p_i\\) units of time in \\(\\mathcal{P}\\) and \\(q_i\\) units of time in \\(\\mathcal{Q}\\).\nOur goal is to assign the jobs to the machines so that the maximum time to completion across both universes is as small as possible. In particular, let \\(\\sigma: [n] \\rightarrow [m]\\) denote a schedule, where \\(\\sigma(i)\\) denotes the machine that \\(J_i\\) is assigned to. Then the two-dimensional makespan of \\(\\sigma\\) is defined as:\n\\(\\max_{1 \\leqslant k \\leqslant m} \\left(\\max\\left\\{\\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} p_i, \\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} q_i\\right\\} \\right),\\)\nWe update \\(\\sigma\\) by assigning \\(J_t\\) to \\(k^\\star\\) and move to the next iteration if \\(t &lt; n\\).\nand this is what we seek to minimize.\n\n\n[!question]- Part 1. Greedy Again - I Consider the following greedy approach to this problem: process the jobs in the order they are given; \\(J_1, \\ldots, J_n\\).\nTo begin with, all machines have zero load in both universes and \\(\\sigma: \\emptyset \\rightarrow [m]\\) is the empty assignment.\nIn the \\(t^{th}\\) iteration (\\(1 \\leqslant t \\leqslant n\\)), suppose our schedule so far is \\(\\sigma: [t-1] \\rightarrow [m]\\). Consider:\n\\(k^\\star := \\argmin_{1 \\leqslant k \\leqslant m} \\left( \\min \\left\\{ \\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} p_i, \\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} q_i \\right\\} \\right),\\)\nwhich is to say, \\(k^\\star\\) is the machine with the lowest load overall; where the load of a machine is interpreted as the smaller of the two loads (between the two universes).\nWe update \\(\\sigma\\) by assigning \\(J_t\\) to \\(k^\\star\\) and move to the next iteration if \\(t &lt; n\\).\nIs this a \\(2\\)-approximation algorithm?\n\nYes\nNo\n\n\n\n[!question]- Part 2. Greedy Again - II Consider the following greedy approach to this problem: process the jobs in the order they are given; \\(J_1, \\ldots, J_n\\).\nTo begin with, all machines have zero load in both universes and \\(\\sigma: \\emptyset \\rightarrow [m]\\) is the empty assignment.\nIn the \\(t^{th}\\) iteration (\\(1 \\leqslant t \\leqslant n\\)), suppose our schedule so far is \\(\\sigma: [t-1] \\rightarrow [m]\\). Consider:\n\\(k^\\star := \\argmin_{1 \\leqslant k \\leqslant m} \\left( \\min \\left\\{ \\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} p_i + \\sum_{\\{i \\in [n] ~|~ \\sigma(i)=k\\}} q_i \\right\\} \\right),\\)\nwhich is to say, \\(k^\\star\\) is the machine with the lowest load overall; where the load of a machine is interpreted as the smaller of the two loads (between the two universes).\nIs this a \\(2\\)-approximation algorithm?\n\nYes\nNo\n\n\n\n[!question]- Part 3. Do we have \\(3\\)-approximations?\nWhich of the following statements is true?\n\nThe first algorithm (from Part 1) is a \\(3\\)-approximation algorithm for the parallel-universe scheduling problem.\nThe second algorithm (from Part 2) is a \\(3\\)-approximation algorithm for the parallel-universe scheduling problem."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D3Q/index.html",
    "href": "2022/04-GIAN/tutorials/D3Q/index.html",
    "title": "191014K02 | Day 3 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\nMax Bisection\n\n\n\nIn the Max Bisection problem we are given a (weighted) graph \\(G=(V, E)\\), and the objective is to find a bisection\n\\[V=S \\cup \\bar{S},|S|=|\\bar{S}|=|V| / 2\\]\nsuch that the number (weight) of edges between \\(S\\) and \\(\\bar{S}\\) is maximized.\n\n\n\n\n\n\n\n\n\\(k\\)-SAT-Local Search\n\n\n\nGiven an instance of \\(k\\)-SAT, find a satisfying assignment that sets at most \\(d\\) variables to true.\n\n\n\n\n\n\nCome up with an instance where the majority rounding idea for the Closest String LP does not give an optimal solution. How much can you push the gap between OPT and the quality of the solution obtained by the greedy rounding.\nShow that the majority rounding idea for the Closest String LP is a valid \\(2\\)-approximation.\nMake the local search phase for Closest String (discussed in class) work without any knowledge of OPT (i.e, you are not allowed to guess the value of OPT).\nDesign a randomized algorithm for \\(k\\)-SAT-Local Search with running time \\(O(k^d)\\).\nDesign a PTAS for Max Bisection on graphs of minimum degree \\(dn\\).\nProve that selecting coordinates according to the normal distribution gives unifom distribution on unit sphere.\nProve that the projection of a random unit vector in \\(\\mathbb{R}^d\\) on any plane through the origin has a “u.a.r. direction”."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D3Q/index.html#k02-day-3-tutorial",
    "href": "2022/04-GIAN/tutorials/D3Q/index.html#k02-day-3-tutorial",
    "title": "191014K02 | Day 3 Tutorial",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D3Q/index.html#definitions",
    "href": "2022/04-GIAN/tutorials/D3Q/index.html#definitions",
    "title": "191014K02 | Day 3 Tutorial",
    "section": "",
    "text": "Max Bisection\n\n\n\nIn the Max Bisection problem we are given a (weighted) graph \\(G=(V, E)\\), and the objective is to find a bisection\n\\[V=S \\cup \\bar{S},|S|=|\\bar{S}|=|V| / 2\\]\nsuch that the number (weight) of edges between \\(S\\) and \\(\\bar{S}\\) is maximized.\n\n\n\n\n\n\n\n\n\\(k\\)-SAT-Local Search\n\n\n\nGiven an instance of \\(k\\)-SAT, find a satisfying assignment that sets at most \\(d\\) variables to true."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D3Q/index.html#problems",
    "href": "2022/04-GIAN/tutorials/D3Q/index.html#problems",
    "title": "191014K02 | Day 3 Tutorial",
    "section": "",
    "text": "Come up with an instance where the majority rounding idea for the Closest String LP does not give an optimal solution. How much can you push the gap between OPT and the quality of the solution obtained by the greedy rounding.\nShow that the majority rounding idea for the Closest String LP is a valid \\(2\\)-approximation.\nMake the local search phase for Closest String (discussed in class) work without any knowledge of OPT (i.e, you are not allowed to guess the value of OPT).\nDesign a randomized algorithm for \\(k\\)-SAT-Local Search with running time \\(O(k^d)\\).\nDesign a PTAS for Max Bisection on graphs of minimum degree \\(dn\\).\nProve that selecting coordinates according to the normal distribution gives unifom distribution on unit sphere.\nProve that the projection of a random unit vector in \\(\\mathbb{R}^d\\) on any plane through the origin has a “u.a.r. direction”."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D5Q/index.html",
    "href": "2022/04-GIAN/tutorials/D5Q/index.html",
    "title": "191014K02 | Day 5 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\nStart the local search algorithm discussed in class and suppose that initially \\(d(\\gamma, \\beta) \\leqslant d\\). Consider a random walk from \\(d\\) with down-probability \\(1/k\\). Show that \\(\\forall s \\geqslant 0\\) and \\(j \\geqslant 0\\): \\[\n\\operatorname{Pr}[{\\color{indianred}d(\\gamma, \\beta) \\leqslant j \\text { in step } s}] \\geqslant \\operatorname{Pr}\\left[P_s \\leqslant j\\right].\n\\]\nWe saw in class that the probability that the walk eventually visits \\(0\\) is \\(q_d=\\left(\\frac{1}{k-1}\\right)^d\\). We want to now show that the probability that this happens in “not too many” i.e, \\((O(d))\\) steps, is \\(\\geqslant q_d/2\\). To this end:\n\nShow that starting at position \\(d+3\\) the probability of reaching \\(0\\) is \\(\\leqslant q_d/8\\).\nShow that \\(\\forall k\\), \\(\\exists c\\) such that \\(\\forall d\\)1, after \\(cd\\) steps, the probability of being at position \\(\\leqslant d+3\\) is \\(\\leqslant q_d/8\\).\nShow that the probability of reaching \\(0\\) from \\(d\\) after at least \\(cd\\) steps is at most \\(q_d/2\\).\nShow that the probability of reaching \\(0\\) from \\(d\\) after at most \\(cd\\) steps is at least \\(q_d/2\\).\n\nShow that a tournament has a directed cycle if and only if it has a directed triangle.\nDemonstrate a \\(3\\)-approximation algorithm for the Tournament Feedback Vertex Set problem."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D5Q/index.html#k02-day-5-tutorial",
    "href": "2022/04-GIAN/tutorials/D5Q/index.html#k02-day-5-tutorial",
    "title": "191014K02 | Day 5 Tutorial",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D5Q/index.html#problems",
    "href": "2022/04-GIAN/tutorials/D5Q/index.html#problems",
    "title": "191014K02 | Day 5 Tutorial",
    "section": "",
    "text": "Start the local search algorithm discussed in class and suppose that initially \\(d(\\gamma, \\beta) \\leqslant d\\). Consider a random walk from \\(d\\) with down-probability \\(1/k\\). Show that \\(\\forall s \\geqslant 0\\) and \\(j \\geqslant 0\\): \\[\n\\operatorname{Pr}[{\\color{indianred}d(\\gamma, \\beta) \\leqslant j \\text { in step } s}] \\geqslant \\operatorname{Pr}\\left[P_s \\leqslant j\\right].\n\\]\nWe saw in class that the probability that the walk eventually visits \\(0\\) is \\(q_d=\\left(\\frac{1}{k-1}\\right)^d\\). We want to now show that the probability that this happens in “not too many” i.e, \\((O(d))\\) steps, is \\(\\geqslant q_d/2\\). To this end:\n\nShow that starting at position \\(d+3\\) the probability of reaching \\(0\\) is \\(\\leqslant q_d/8\\).\nShow that \\(\\forall k\\), \\(\\exists c\\) such that \\(\\forall d\\)1, after \\(cd\\) steps, the probability of being at position \\(\\leqslant d+3\\) is \\(\\leqslant q_d/8\\).\nShow that the probability of reaching \\(0\\) from \\(d\\) after at least \\(cd\\) steps is at most \\(q_d/2\\).\nShow that the probability of reaching \\(0\\) from \\(d\\) after at most \\(cd\\) steps is at least \\(q_d/2\\).\n\nShow that a tournament has a directed cycle if and only if it has a directed triangle.\nDemonstrate a \\(3\\)-approximation algorithm for the Tournament Feedback Vertex Set problem."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D5Q/index.html#footnotes",
    "href": "2022/04-GIAN/tutorials/D5Q/index.html#footnotes",
    "title": "191014K02 | Day 5 Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n(\\(d\\) sufficiently large as function of \\(k\\))↩︎"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D2Q/index.html",
    "href": "2022/04-GIAN/tutorials/D2Q/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\nSubgraph Isomorphism\n\n\n\nThe input is an \\(n\\)-vertex graph \\(G\\) and a \\(k\\)-vertex graph \\(H\\), and the objective is to test whether there exists a subgraph \\(\\widehat{H}\\) of \\(G\\) such that \\(H\\) is isomorphic to \\(\\widehat{H}\\).\nObserve that \\(k\\)-Path (discussed in class earlier today) is a special case of Subgraph Isomorphism where \\(H\\) is a path on \\(k\\) vertices. The problem of finding a Clique on \\(k\\) vertices is a special case of Subgraph Isomorphism as well, where \\(H\\) is a clique on \\(k\\) vertices. It is believed that Clique is not FPT, and, consequently, we do not expect that the general Subgraph Isomorphism problem to be FPT when parameterized by \\(k\\).\n\n\n\n\n\n\n\n\nHoeffding’s Inequality\n\n\n\nLet \\(X_1, \\ldots, X_n\\) be independent random variables such that \\(a_i \\leq X_i \\leq b_i\\) almost surely. Consider the sum of these random variables, \\[\nS_n=X_1+\\cdots+X_n .\n\\] Then Hoeffding’s theorem states that, for all \\(t&gt;0,\\) \\[\n\\begin{gathered}\n\\mathrm{P}\\left(S_n-\\mathrm{E}\\left[S_n\\right] \\geq t\\right) \\leq \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right) \\\\\n\\mathrm{P}\\left(\\left|S_n-\\mathrm{E}\\left[S_n\\right]\\right| \\geq t\\right) \\leq 2 \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right)\n\\end{gathered}\n\\]\nHere \\(\\mathrm{E}\\left[S_{\\mathrm{n}}\\right]\\) is the expected value of \\(S_n\\).\n\n\n\n\n\n\nShow that the number of inclusion minimal vertex covers of size at most \\(k\\) is at most \\(2^k\\). (Use the algorithm from class.)\nGeneralize the Vertex Cover algorithm that we saw today to Set Cover in which every element appears in at most \\(d\\) sets.\nFeedback Vertex Set as Hitting Set. Why don’t we get a \\(O(\\log n)\\) approximation for FVS via the \\(O(\\log n)\\) approximation for Set Cover1?\nUse Markov inequality to show that: \\[\n\\operatorname{Pr}[{\\color{indianred}|S| \\leqslant 2 \\cdot |\\text{OPT}|}] \\geqslant \\Omega(1 /|\\text{OPT}|)\n\\]\nCome up with an algorithm to solve an instance of subgraph isomorphism \\((G, H)\\) in time \\(2^{d k} k ! n^{\\mathcal{O}(1)}\\) and in time \\(2^{d k} k^{\\mathcal{O}(d \\log d)} n^{\\mathcal{O}(1)}\\). Here, \\(|V(G)|=n,|V(H)|=k\\), and the maximum degree of \\(G\\) is bounded by \\(d\\).\nGeneralize the color coding approach for Longest Path to: (a) \\(k\\)-Cycle where \\(H\\) is a cycle on \\(k\\) vertices, (b) Tree Subgraph Isomorphism, where \\(H\\) is restricted to being a tree on \\(k\\) vertices.\nDesign a randomized algorithm running in time \\(2^{O\\left(\\sqrt{k} \\log ^2 k\\right)}+n^{O(1)}\\) for the problem of finding a feedback arc set of size at most \\(k\\) in a tournament on \\(n\\) vertices."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D2Q/index.html#k02-day-2-tutorial",
    "href": "2022/04-GIAN/tutorials/D2Q/index.html#k02-day-2-tutorial",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D2Q/index.html#definitions",
    "href": "2022/04-GIAN/tutorials/D2Q/index.html#definitions",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Subgraph Isomorphism\n\n\n\nThe input is an \\(n\\)-vertex graph \\(G\\) and a \\(k\\)-vertex graph \\(H\\), and the objective is to test whether there exists a subgraph \\(\\widehat{H}\\) of \\(G\\) such that \\(H\\) is isomorphic to \\(\\widehat{H}\\).\nObserve that \\(k\\)-Path (discussed in class earlier today) is a special case of Subgraph Isomorphism where \\(H\\) is a path on \\(k\\) vertices. The problem of finding a Clique on \\(k\\) vertices is a special case of Subgraph Isomorphism as well, where \\(H\\) is a clique on \\(k\\) vertices. It is believed that Clique is not FPT, and, consequently, we do not expect that the general Subgraph Isomorphism problem to be FPT when parameterized by \\(k\\).\n\n\n\n\n\n\n\n\nHoeffding’s Inequality\n\n\n\nLet \\(X_1, \\ldots, X_n\\) be independent random variables such that \\(a_i \\leq X_i \\leq b_i\\) almost surely. Consider the sum of these random variables, \\[\nS_n=X_1+\\cdots+X_n .\n\\] Then Hoeffding’s theorem states that, for all \\(t&gt;0,\\) \\[\n\\begin{gathered}\n\\mathrm{P}\\left(S_n-\\mathrm{E}\\left[S_n\\right] \\geq t\\right) \\leq \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right) \\\\\n\\mathrm{P}\\left(\\left|S_n-\\mathrm{E}\\left[S_n\\right]\\right| \\geq t\\right) \\leq 2 \\exp \\left(-\\frac{2 t^2}{\\sum_{i=1}^n\\left(b_i-a_i\\right)^2}\\right)\n\\end{gathered}\n\\]\nHere \\(\\mathrm{E}\\left[S_{\\mathrm{n}}\\right]\\) is the expected value of \\(S_n\\)."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D2Q/index.html#problems",
    "href": "2022/04-GIAN/tutorials/D2Q/index.html#problems",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Show that the number of inclusion minimal vertex covers of size at most \\(k\\) is at most \\(2^k\\). (Use the algorithm from class.)\nGeneralize the Vertex Cover algorithm that we saw today to Set Cover in which every element appears in at most \\(d\\) sets.\nFeedback Vertex Set as Hitting Set. Why don’t we get a \\(O(\\log n)\\) approximation for FVS via the \\(O(\\log n)\\) approximation for Set Cover1?\nUse Markov inequality to show that: \\[\n\\operatorname{Pr}[{\\color{indianred}|S| \\leqslant 2 \\cdot |\\text{OPT}|}] \\geqslant \\Omega(1 /|\\text{OPT}|)\n\\]\nCome up with an algorithm to solve an instance of subgraph isomorphism \\((G, H)\\) in time \\(2^{d k} k ! n^{\\mathcal{O}(1)}\\) and in time \\(2^{d k} k^{\\mathcal{O}(d \\log d)} n^{\\mathcal{O}(1)}\\). Here, \\(|V(G)|=n,|V(H)|=k\\), and the maximum degree of \\(G\\) is bounded by \\(d\\).\nGeneralize the color coding approach for Longest Path to: (a) \\(k\\)-Cycle where \\(H\\) is a cycle on \\(k\\) vertices, (b) Tree Subgraph Isomorphism, where \\(H\\) is restricted to being a tree on \\(k\\) vertices.\nDesign a randomized algorithm running in time \\(2^{O\\left(\\sqrt{k} \\log ^2 k\\right)}+n^{O(1)}\\) for the problem of finding a feedback arc set of size at most \\(k\\) in a tournament on \\(n\\) vertices."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D2Q/index.html#footnotes",
    "href": "2022/04-GIAN/tutorials/D2Q/index.html#footnotes",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that Set Cover and Hitting Set are equivalent problems.↩︎"
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L1/index.html",
    "href": "2022/04-GIAN/notes/D1L1/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L1/index.html#k02-day-1-lecture-1",
    "href": "2022/04-GIAN/notes/D1L1/index.html#k02-day-1-lecture-1",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L1/index.html",
    "href": "2022/04-GIAN/notes/D2L1/index.html",
    "title": "191014K02 | Day 2 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\nVertex Cover [Optimization]\n\n\n\nInput: A graph \\(G = (V,E)\\).\nTask: Find \\(S \\subseteq V(G)\\) such that for all edges \\((u,v) \\in E(G)\\), \\(\\{u,v\\} \\cap S \\neq \\varnothing\\) and minimize \\(|S|\\).\n\n\n\n\n\n\n\n\nVertex Cover [Decision Version Edition]\n\n\n\nInput: A graph \\(G = (V,E)\\) and \\(k \\in \\mathbb{Z}^+\\).\nTask: Find \\(S \\subseteq V(G)\\) such that for all edges \\((u,v) \\in E(G)\\), \\(\\{u,v\\} \\cap S \\neq \\varnothing\\) and \\(|S| \\leqslant k\\).\n\n\nThe naive algorithm by brute force — examining all possible subsets — is \\(O(n^k \\cdot m)\\) in damages. Can we do better?\nThe answer turns out to be yes: we can improve from \\(O(n^k \\cdot m)\\) to deterministic \\(2^k \\cdot n^{O(1)}\\) time, which is fixed-parameter tractable in \\(k\\).\nHaving said that, we will begin with a very elegant randomized algorithm for Vertex Cover, which essentially picks an edge at random and then, one of its endpoints at random, for as long as it can.\n\n\n\n\n\n\nCute randomized algorithm ALG\n\n\n\n\\(S=\\varnothing\\)\nwhile \\(G-S\\) has at least one edge:\n\npick \\(u,v \\in E(G-S)\\) u.a.r.\npick \\(s \\in\\{u,v\\}\\) u.a.r\nSet \\(S \\leftarrow S \\cup\\{s\\}\\)\n\nOutput \\(S\\)\n\n\nHere are few claims about cute algorithm:\n\nALG always runs in polynomial1 time.\n\\(S\\) is always a vertex cover.\n\\(\\operatorname{Pr}\\)[\\(S\\) is an optimal vertex cover] \\(\\geqslant 1/2^k\\). {{&lt; bi heart-half color=\"indianred\" &gt;}}\n\nThe first two claims follow quite directly from the operations of the algorithm and the definition of a vertex cover.\nWhat about the third? Well: let OPT be some fixed optimal vertex cover. Suppose \\(|\\)OPT\\(| \\leqslant k\\). Initially, note that \\(S \\subseteq\\) OPT. In each round, \\(\\operatorname{Pr}\\)[\\(s \\in S\\)] \\(\\geqslant 1/2\\), since \\(S \\cap \\{u,v\\} \\neq \\varnothing\\) by definition. If \\(s \\in\\) OPT in every round of the algorithm, then \\(S =\\) OPT, which is awesome: and said awesomeness manifests with probability \\(1/2^k\\).\nBonus: repeat the algorithm and retain the smallest solution to get an overall constant success probability:\n\\[1-\\left(1-\\frac{1}{2^k}\\right)^{2^k} \\geqslant 1-1 / e.\\]\nApproximation. Do we expect ALG to be a reasonable approximation? It turns out: yes! {{&lt; bi emoji-sunglasses &gt;}}\nIn particular: we will show that the size of the vertex cover output by ALG is at most twice \\(|\\)OPT\\(|\\) in expectation.\nFor a graph \\(G\\), define \\(X_G\\) to be the radom variable returning the size of the set \\(S\\) output by the algorithm.\nFor integers \\(k,n\\) define: \\[\nX_{n,k}=\\max_G E[X_G],\n\\]\nwhere the \\(\\max\\) is taken over all graphs with \\(\\leqslant n\\) vertices2 and vertex cover of size \\(\\leqslant k\\).\nNow let’s analyze the number \\(X_{n,k}\\). Let \\(G^\\star\\) be the “worst-case graph” that bears witness to the \\(\\max\\) in the definition of \\(X_{n,k}\\). Run the first step of ALG on \\(G^\\star\\). Suppose we choose to pick \\({\\color{indianred}s}\\) in this step. \\[\n\\begin{aligned}\nX_{n,k}=E[X_{G^\\star}] & = {\\color{indianred}1}+\\left(\\frac{1}{2}+\\varepsilon \\right) E\\left[{\\color{darkseagreen}X_{G^\\star-s} \\mid s \\in \\text{OPT}}\\right]+\\left(\\frac{1}{2} - \\varepsilon\\right) E\\left[{\\color{palevioletred}X_{G^\\star-s} \\mid s \\notin \\text {OPT}}\\right] \\\\\n& = 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{palevioletred}X_{n-1, k}}\\\\\n& \\leqslant 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{dodgerblue}X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot X_{n, k-1} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& \\leqslant 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot {\\color{dodgerblue}X_{n, k}} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + {\\color{indianred}\\varepsilon \\cdot X_{n, k}} + \\frac{1}{2} X_{n, k} - {\\color{indianred}\\varepsilon X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\frac{1}{2} X_{n, k}\n\\end{aligned}\n\\]\nNote that:\n\n \\(X_{n,k} \\geqslant X_{n-1,k}\\) and \\(X_{n,k} \\geqslant X_{n,k-1}\\).\n\\(\\operatorname{Pr}[s \\in \\text{OPT}] \\geqslant \\frac{1}{2}\\), in particular we let \\(\\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} + \\varepsilon\\).\n\\(\\operatorname{Pr}[s \\notin \\text{OPT}] = 1 - \\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} - \\varepsilon\\).\n \\({\\color{darkseagreen}G^\\star-s}\\) is a graph on at most \\({\\color{darkseagreen}n}\\) vertices with a vertex cover of size \\({\\color{darkseagreen}\\leqslant k-1}\\)\n \\({\\color{palevioletred}G^\\star-s}\\) is a graph on at most \\({\\color{palevioletred}n}\\) vertices with a vertex cover of size \\({\\color{palevioletred}\\leqslant k}\\)\n\nRearranging terms, we get:\n\\[\\frac{1}{2} X_{n,k} \\leqslant 1 + \\frac{1}{2} X_{n,k-1} \\equiv X_{n,k} \\leqslant 2 + X_{n,k-1}\\]\nExpanding the recurrence, we have: \\(X_{n,k} \\leqslant 2k\\), as claimed earlier.\n\n\n\nNow we turn to a problem similar to vertex cover, except that we are “killing cycles” instead of “killing edges”.\n\n\n\n\n\n\nFeedback Vertex Set\n\n\n\nInput: A (multi-)3graph \\(G = (V,E)\\).\nTask: Find \\(S \\subseteq V(G)\\) such that \\(G \\setminus S\\) is a forest4, and minimize \\(|S|\\).\n\n\nIf we try to mimic the cute algorithm from before, we might easily be in trouble: note that the driving observation — that an edge has at least one of its endpoints in the solution with a reasonable enough probability — can fail spectacularly for FVS:\n\n\n\nAn example showing that for “most edges”, both endpoints do not belong to an optimal solution.\n\n\nOne thing about this example is the large number of pendant vertices sticking out prominently, and these clearly contribute to the badness of the situation. Happily, it turns out that we can get rid of these:\n\n\n\n\n\n\nLemma 1. Delete pendant and isolated vertices\n\n\n\nLet \\(G\\) be a multi-graph and \\(v\\) be a vertex of degree \\(\\leqslant 1\\). Then:\n\nMinFVS of \\(G-\\{v\\}\\) \\(\\leqslant\\) MinFVS of \\(G\\)\n\\(\\forall S \\subseteq V(G)-\\{v\\}\\):  \\(S\\) is an FVS for \\(G\\)  \\(\\leftrightarrow\\) \\(S\\) is an FVS for \\(G \\setminus \\{v\\}\\) \n\n\n\nConsider graphs with no pendant vertices and fix an optimal FVS \\(S\\). Is it true that a reasonable fraction of edges are guaranteed to be incident to \\(S\\)? Well… not yet:\n\n\n\n\n\n\nSpoiler\n\n\n\n\n\n\n\n\nAn(other) example showing that for “most edges”, both endpoints do not belong to an optimal solution, even though the graph has no pendant vertices.\n\n\n\n\n\nHowever, continuing our approach of conquering-by-observing-patterns-in-counterexamples, note that the example above has an abundance of vertices that have degree two. Can we get rid of them? Well, isolated and pendant vertices were relatively easy because they don’t even belong to cycles, but that is not quite true for vertices of degree two. Can we still hope to shake them off?\nOne thing about a degree two vertex \\(u\\) is that if there is a cycle that contains \\(u\\) it must contain both its neighbors5. So you might suggest that we can ditch \\(u\\) and just work with its neighbors instead. This intuition, it turns out, can indeed be formalized:\n\n\n\n\n\n\nLemma 2. Short-Circuiting Degree Two Vertices\n\n\n\nLet:\n\n\\(G\\) be a multi-graph,\n\\(u\\) be a vertex of degree 2 that is not a self-loop,\n\\(a\\) and \\(b\\) be the neighbors of \\(u\\) (\\(a=b\\) is possible).\n\nLet \\(H\\) be the graph obtained by adding an edge \\((a,b)\\) to \\(G-\\{u\\}\\).\nThen:\n\nevery FVS \\(S\\) of \\(G\\) such that \\(u \\notin S\\) is an FVS of \\(H\\), and\nevery FVS \\(S\\) of \\(H\\) is an FVS of \\(G\\).\n\n\n\n\n\n\nIllustrating Lemma 2 scenarios.\n\n\nLet us also get rid of self-loops (because we can):\n\n\n\n\n\n\nLemma 3. Removing self-loops\n\n\n\nIf \\(G\\) has a vertex \\(v\\) with a self loop then\n\nEvery FVS \\(S\\) of \\(G\\) contains \\(v\\)\nFor every \\(S\\) containing \\(v\\): \\(S\\) is an FVS of \\(G\\) \\(\\leftrightarrow\\) \\(S-v\\) is an FVS of \\(G-\\{v\\}\\)\n\n\n\nNow let’s apply Lemmas 1—3 exhaustively, which is to say we keep applying them until none of them are applicable (as opposed to applying them until we feel exhausted {{&lt; bi emoji-laughing &gt;}} ). Once we are truly stuck, we have a graph \\(H\\) that is: (a) a graph whose minimum degree is three; and (b) equivalent to the original \\(G\\) in the sense that any minimum FVS for \\(H\\) can be extended to a minimum FVS of \\(G\\) by some time travel: just play back the applications of Lemmas 1—3 in reverse order.\nRecall that all this work was to serve our hope for having a cute algorithm for FVS as well. Let’s check in on how we are doing on that front: consider graphs whose minimum degree is three and fix an optimal FVS \\(S\\). Is it true that a reasonable fraction of edges are guaranteed to be incident to \\(S\\)? Or can we come up with examples to demonstrate otherwise?\nThis is a good place to pause and ponder: play around with examples to see if you can come up with bad cases as before. If you find yourself struggling, it would be for a good reason: we actually now do have the property we were after! Here’s the main claim that we want to make.\n\n\n\n\n\n\nKey Lemma\n\n\n\nLet:\n\n\\(G\\) be a multigraph with no self loops and minimum degree \\(\\geqslant 3\\),\n\\(S\\) be an FVS of \\(G\\),\n\\((u,v)\\) be a random edge in \\(E(G)\\).\n\nThen:\n\\(\\operatorname{Pr}[{\\color{indianred}\\{u, v\\} \\cap S \\neq \\varnothing}] \\geqslant 1/2\\)\n\n\nWe argue this as follows: call an edge good if it has at least one of its endpoints in \\(S\\), and bad otherwise.\nWe will demonstrate that the number of good edges is at least the number of bad edges: this implies the desired claim.\n\nThe bad edges. Let \\(X := G \\setminus S\\). The bad edges are precisely \\(E(G[X])\\).\nThe good edges. Every edge that has one of its endpoints in \\(X\\) and the other in \\(S\\) is a good edge. Recall that \\(G\\) has minimum degree three, because of which:\n\nfor every leaf in \\(G[X]\\), we have at least two good edges, and\nfor vertex that is degree two in \\(G[X]\\), we have at least one good edge.\n\n\nSo at this point, it is enough to show that twice the number of leaves and degree two vertices is at least \\(|E(G[X])| = |X|-1\\). But this is quite intuitive if we simple stare at the following mildly stronger claim:\n\\[2 \\cdot (\\text{\\# leaves}) + \\text{\\# deg-} 2 \\text{vertices} \\geqslant |X|\\]\nwhich is equivalent to:\n\\[2 \\cdot ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{vertices}} \\geqslant ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{ vertices}} + \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\\]\nAfter cancelations, we have:\n\\[(\\text{\\# leaves}) \\geqslant \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\\]\nNote that this is true! Intuitively, the inequality is suggesting every branching vertex in a tree pays for at least one leaf — this can be formalized by induction on \\(n\\).\n\n\n\n\n\n\nInduction proof sketch\n\n\n\n\n\nDenote the tree by \\(G\\) and remove a leaf \\(u\\) to obtain \\(H\\). Apply the induction hypothesis on \\(H\\).\n\nIf the neighbor of \\(u\\) in \\(G\\) is a degree two vertex, then the number of leaves and high degree vertices are the same in \\(G\\) and \\(H\\), so the claim follows directly.\nIf the degree of the neighbor in \\(u\\) is three in \\(G\\), then both quantities in the inequality for \\(H\\) increase by one when we transition from \\(H\\) to \\(G\\).\nIn the only remaining case, the quantity on the left increases by one when we come to \\(G\\), which bodes well for the inequality. {{&lt; bi hand-thumbs-up &gt;}}\n\n\n\n\nAll this was leading up to cute randomized algorithm v2.0 — i.e, adapted for FVS as follows:\n\n\n\n\n\n\nCute randomized algorithm redux\n\n\n\nALG\\((G)\\)\nPreprocess:\n\nif \\(G\\) is acyclic return \\(\\varnothing\\)\nif \\(\\exists\\) a self loop \\(v\\) RETURN \\((\\)ALG\\((G \\setminus \\{v\\})) \\cup \\{v\\}\\).\nif \\(\\exists\\) a degree one vertex \\(v\\) RETURN ALG\\((G-\\{v\\})\\).\nif \\(\\exists\\) a degree two vertex \\(v\\) RETURN ALG\\((G/\\{v\\})\\) (c.f. Lemma 2).\n\n\nMindeg-3 instance:\n\npick an edge \\((u,v) \\in E(G)\\) u.a.r.\npick \\(s \\in \\{u,v\\}\\) u.a.r.\nRETURN \\((\\)ALG\\((G \\setminus \\{s\\})) \\cup \\{s\\}\\)\n\n\n\n\n\n\n\n\n\nClaim 1\n\n\n\nALG always returns a FVS of \\(G\\).\n\n\nThis follows from Lemmas 1—3 and induction on \\(n\\).\n\n\n\n\n\n\nClaim 2\n\n\n\nIf \\(G\\) has a FVS of size \\(k\\), then \\(\\operatorname{Pr}\\)[ALG returns an optimal FVS] \\(\\geqslant 1/4^k\\).\n\n\nThis follows from Lemmas 1—3, the key lemma, and induction on \\(n\\).\n\n\n\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L1/index.html#k02-day-2-lecture-1",
    "href": "2022/04-GIAN/notes/D2L1/index.html#k02-day-2-lecture-1",
    "title": "191014K02 | Day 2 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\nVertex Cover [Optimization]\n\n\n\nInput: A graph \\(G = (V,E)\\).\nTask: Find \\(S \\subseteq V(G)\\) such that for all edges \\((u,v) \\in E(G)\\), \\(\\{u,v\\} \\cap S \\neq \\varnothing\\) and minimize \\(|S|\\).\n\n\n\n\n\n\n\n\nVertex Cover [Decision Version Edition]\n\n\n\nInput: A graph \\(G = (V,E)\\) and \\(k \\in \\mathbb{Z}^+\\).\nTask: Find \\(S \\subseteq V(G)\\) such that for all edges \\((u,v) \\in E(G)\\), \\(\\{u,v\\} \\cap S \\neq \\varnothing\\) and \\(|S| \\leqslant k\\).\n\n\nThe naive algorithm by brute force — examining all possible subsets — is \\(O(n^k \\cdot m)\\) in damages. Can we do better?\nThe answer turns out to be yes: we can improve from \\(O(n^k \\cdot m)\\) to deterministic \\(2^k \\cdot n^{O(1)}\\) time, which is fixed-parameter tractable in \\(k\\).\nHaving said that, we will begin with a very elegant randomized algorithm for Vertex Cover, which essentially picks an edge at random and then, one of its endpoints at random, for as long as it can.\n\n\n\n\n\n\nCute randomized algorithm ALG\n\n\n\n\\(S=\\varnothing\\)\nwhile \\(G-S\\) has at least one edge:\n\npick \\(u,v \\in E(G-S)\\) u.a.r.\npick \\(s \\in\\{u,v\\}\\) u.a.r\nSet \\(S \\leftarrow S \\cup\\{s\\}\\)\n\nOutput \\(S\\)\n\n\nHere are few claims about cute algorithm:\n\nALG always runs in polynomial1 time.\n\\(S\\) is always a vertex cover.\n\\(\\operatorname{Pr}\\)[\\(S\\) is an optimal vertex cover] \\(\\geqslant 1/2^k\\). {{&lt; bi heart-half color=\"indianred\" &gt;}}\n\nThe first two claims follow quite directly from the operations of the algorithm and the definition of a vertex cover.\nWhat about the third? Well: let OPT be some fixed optimal vertex cover. Suppose \\(|\\)OPT\\(| \\leqslant k\\). Initially, note that \\(S \\subseteq\\) OPT. In each round, \\(\\operatorname{Pr}\\)[\\(s \\in S\\)] \\(\\geqslant 1/2\\), since \\(S \\cap \\{u,v\\} \\neq \\varnothing\\) by definition. If \\(s \\in\\) OPT in every round of the algorithm, then \\(S =\\) OPT, which is awesome: and said awesomeness manifests with probability \\(1/2^k\\).\nBonus: repeat the algorithm and retain the smallest solution to get an overall constant success probability:\n\\[1-\\left(1-\\frac{1}{2^k}\\right)^{2^k} \\geqslant 1-1 / e.\\]\nApproximation. Do we expect ALG to be a reasonable approximation? It turns out: yes! {{&lt; bi emoji-sunglasses &gt;}}\nIn particular: we will show that the size of the vertex cover output by ALG is at most twice \\(|\\)OPT\\(|\\) in expectation.\nFor a graph \\(G\\), define \\(X_G\\) to be the radom variable returning the size of the set \\(S\\) output by the algorithm.\nFor integers \\(k,n\\) define: \\[\nX_{n,k}=\\max_G E[X_G],\n\\]\nwhere the \\(\\max\\) is taken over all graphs with \\(\\leqslant n\\) vertices2 and vertex cover of size \\(\\leqslant k\\).\nNow let’s analyze the number \\(X_{n,k}\\). Let \\(G^\\star\\) be the “worst-case graph” that bears witness to the \\(\\max\\) in the definition of \\(X_{n,k}\\). Run the first step of ALG on \\(G^\\star\\). Suppose we choose to pick \\({\\color{indianred}s}\\) in this step. \\[\n\\begin{aligned}\nX_{n,k}=E[X_{G^\\star}] & = {\\color{indianred}1}+\\left(\\frac{1}{2}+\\varepsilon \\right) E\\left[{\\color{darkseagreen}X_{G^\\star-s} \\mid s \\in \\text{OPT}}\\right]+\\left(\\frac{1}{2} - \\varepsilon\\right) E\\left[{\\color{palevioletred}X_{G^\\star-s} \\mid s \\notin \\text {OPT}}\\right] \\\\\n& = 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{palevioletred}X_{n-1, k}}\\\\\n& \\leqslant 1 + \\left(\\frac{1}{2} + \\varepsilon \\right){\\color{darkseagreen}X_{n, k-1}}+ \\left(\\frac{1}{2} - \\varepsilon \\right){\\color{dodgerblue}X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot X_{n, k-1} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& \\leqslant 1 + \\frac{1}{2} X_{n, k-1} + \\varepsilon \\cdot {\\color{dodgerblue}X_{n, k}} + \\frac{1}{2} X_{n, k} - \\varepsilon X_{n, k}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + {\\color{indianred}\\varepsilon \\cdot X_{n, k}} + \\frac{1}{2} X_{n, k} - {\\color{indianred}\\varepsilon X_{n, k}}\\\\\n& = 1 + \\frac{1}{2} X_{n, k-1} + \\frac{1}{2} X_{n, k}\n\\end{aligned}\n\\]\nNote that:\n\n \\(X_{n,k} \\geqslant X_{n-1,k}\\) and \\(X_{n,k} \\geqslant X_{n,k-1}\\).\n\\(\\operatorname{Pr}[s \\in \\text{OPT}] \\geqslant \\frac{1}{2}\\), in particular we let \\(\\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} + \\varepsilon\\).\n\\(\\operatorname{Pr}[s \\notin \\text{OPT}] = 1 - \\operatorname{Pr}[s \\in \\text{OPT}] = \\frac{1}{2} - \\varepsilon\\).\n \\({\\color{darkseagreen}G^\\star-s}\\) is a graph on at most \\({\\color{darkseagreen}n}\\) vertices with a vertex cover of size \\({\\color{darkseagreen}\\leqslant k-1}\\)\n \\({\\color{palevioletred}G^\\star-s}\\) is a graph on at most \\({\\color{palevioletred}n}\\) vertices with a vertex cover of size \\({\\color{palevioletred}\\leqslant k}\\)\n\nRearranging terms, we get:\n\\[\\frac{1}{2} X_{n,k} \\leqslant 1 + \\frac{1}{2} X_{n,k-1} \\equiv X_{n,k} \\leqslant 2 + X_{n,k-1}\\]\nExpanding the recurrence, we have: \\(X_{n,k} \\leqslant 2k\\), as claimed earlier.\n\n\n\nNow we turn to a problem similar to vertex cover, except that we are “killing cycles” instead of “killing edges”.\n\n\n\n\n\n\nFeedback Vertex Set\n\n\n\nInput: A (multi-)3graph \\(G = (V,E)\\).\nTask: Find \\(S \\subseteq V(G)\\) such that \\(G \\setminus S\\) is a forest4, and minimize \\(|S|\\).\n\n\nIf we try to mimic the cute algorithm from before, we might easily be in trouble: note that the driving observation — that an edge has at least one of its endpoints in the solution with a reasonable enough probability — can fail spectacularly for FVS:\n\n\n\nAn example showing that for “most edges”, both endpoints do not belong to an optimal solution.\n\n\nOne thing about this example is the large number of pendant vertices sticking out prominently, and these clearly contribute to the badness of the situation. Happily, it turns out that we can get rid of these:\n\n\n\n\n\n\nLemma 1. Delete pendant and isolated vertices\n\n\n\nLet \\(G\\) be a multi-graph and \\(v\\) be a vertex of degree \\(\\leqslant 1\\). Then:\n\nMinFVS of \\(G-\\{v\\}\\) \\(\\leqslant\\) MinFVS of \\(G\\)\n\\(\\forall S \\subseteq V(G)-\\{v\\}\\):  \\(S\\) is an FVS for \\(G\\)  \\(\\leftrightarrow\\) \\(S\\) is an FVS for \\(G \\setminus \\{v\\}\\) \n\n\n\nConsider graphs with no pendant vertices and fix an optimal FVS \\(S\\). Is it true that a reasonable fraction of edges are guaranteed to be incident to \\(S\\)? Well… not yet:\n\n\n\n\n\n\nSpoiler\n\n\n\n\n\n\n\n\nAn(other) example showing that for “most edges”, both endpoints do not belong to an optimal solution, even though the graph has no pendant vertices.\n\n\n\n\n\nHowever, continuing our approach of conquering-by-observing-patterns-in-counterexamples, note that the example above has an abundance of vertices that have degree two. Can we get rid of them? Well, isolated and pendant vertices were relatively easy because they don’t even belong to cycles, but that is not quite true for vertices of degree two. Can we still hope to shake them off?\nOne thing about a degree two vertex \\(u\\) is that if there is a cycle that contains \\(u\\) it must contain both its neighbors5. So you might suggest that we can ditch \\(u\\) and just work with its neighbors instead. This intuition, it turns out, can indeed be formalized:\n\n\n\n\n\n\nLemma 2. Short-Circuiting Degree Two Vertices\n\n\n\nLet:\n\n\\(G\\) be a multi-graph,\n\\(u\\) be a vertex of degree 2 that is not a self-loop,\n\\(a\\) and \\(b\\) be the neighbors of \\(u\\) (\\(a=b\\) is possible).\n\nLet \\(H\\) be the graph obtained by adding an edge \\((a,b)\\) to \\(G-\\{u\\}\\).\nThen:\n\nevery FVS \\(S\\) of \\(G\\) such that \\(u \\notin S\\) is an FVS of \\(H\\), and\nevery FVS \\(S\\) of \\(H\\) is an FVS of \\(G\\).\n\n\n\n\n\n\nIllustrating Lemma 2 scenarios.\n\n\nLet us also get rid of self-loops (because we can):\n\n\n\n\n\n\nLemma 3. Removing self-loops\n\n\n\nIf \\(G\\) has a vertex \\(v\\) with a self loop then\n\nEvery FVS \\(S\\) of \\(G\\) contains \\(v\\)\nFor every \\(S\\) containing \\(v\\): \\(S\\) is an FVS of \\(G\\) \\(\\leftrightarrow\\) \\(S-v\\) is an FVS of \\(G-\\{v\\}\\)\n\n\n\nNow let’s apply Lemmas 1—3 exhaustively, which is to say we keep applying them until none of them are applicable (as opposed to applying them until we feel exhausted {{&lt; bi emoji-laughing &gt;}} ). Once we are truly stuck, we have a graph \\(H\\) that is: (a) a graph whose minimum degree is three; and (b) equivalent to the original \\(G\\) in the sense that any minimum FVS for \\(H\\) can be extended to a minimum FVS of \\(G\\) by some time travel: just play back the applications of Lemmas 1—3 in reverse order.\nRecall that all this work was to serve our hope for having a cute algorithm for FVS as well. Let’s check in on how we are doing on that front: consider graphs whose minimum degree is three and fix an optimal FVS \\(S\\). Is it true that a reasonable fraction of edges are guaranteed to be incident to \\(S\\)? Or can we come up with examples to demonstrate otherwise?\nThis is a good place to pause and ponder: play around with examples to see if you can come up with bad cases as before. If you find yourself struggling, it would be for a good reason: we actually now do have the property we were after! Here’s the main claim that we want to make.\n\n\n\n\n\n\nKey Lemma\n\n\n\nLet:\n\n\\(G\\) be a multigraph with no self loops and minimum degree \\(\\geqslant 3\\),\n\\(S\\) be an FVS of \\(G\\),\n\\((u,v)\\) be a random edge in \\(E(G)\\).\n\nThen:\n\\(\\operatorname{Pr}[{\\color{indianred}\\{u, v\\} \\cap S \\neq \\varnothing}] \\geqslant 1/2\\)\n\n\nWe argue this as follows: call an edge good if it has at least one of its endpoints in \\(S\\), and bad otherwise.\nWe will demonstrate that the number of good edges is at least the number of bad edges: this implies the desired claim.\n\nThe bad edges. Let \\(X := G \\setminus S\\). The bad edges are precisely \\(E(G[X])\\).\nThe good edges. Every edge that has one of its endpoints in \\(X\\) and the other in \\(S\\) is a good edge. Recall that \\(G\\) has minimum degree three, because of which:\n\nfor every leaf in \\(G[X]\\), we have at least two good edges, and\nfor vertex that is degree two in \\(G[X]\\), we have at least one good edge.\n\n\nSo at this point, it is enough to show that twice the number of leaves and degree two vertices is at least \\(|E(G[X])| = |X|-1\\). But this is quite intuitive if we simple stare at the following mildly stronger claim:\n\\[2 \\cdot (\\text{\\# leaves}) + \\text{\\# deg-} 2 \\text{vertices} \\geqslant |X|\\]\nwhich is equivalent to:\n\\[2 \\cdot ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{vertices}} \\geqslant ({\\color{darkseagreen}\\text{\\# leaves}}) + {\\color{palevioletred}\\text{\\# deg-}2 \\text{ vertices}} + \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\\]\nAfter cancelations, we have:\n\\[(\\text{\\# leaves}) \\geqslant \\text{\\# deg-}(\\geqslant 3) \\text{ vertices}.\\]\nNote that this is true! Intuitively, the inequality is suggesting every branching vertex in a tree pays for at least one leaf — this can be formalized by induction on \\(n\\).\n\n\n\n\n\n\nInduction proof sketch\n\n\n\n\n\nDenote the tree by \\(G\\) and remove a leaf \\(u\\) to obtain \\(H\\). Apply the induction hypothesis on \\(H\\).\n\nIf the neighbor of \\(u\\) in \\(G\\) is a degree two vertex, then the number of leaves and high degree vertices are the same in \\(G\\) and \\(H\\), so the claim follows directly.\nIf the degree of the neighbor in \\(u\\) is three in \\(G\\), then both quantities in the inequality for \\(H\\) increase by one when we transition from \\(H\\) to \\(G\\).\nIn the only remaining case, the quantity on the left increases by one when we come to \\(G\\), which bodes well for the inequality. {{&lt; bi hand-thumbs-up &gt;}}\n\n\n\n\nAll this was leading up to cute randomized algorithm v2.0 — i.e, adapted for FVS as follows:\n\n\n\n\n\n\nCute randomized algorithm redux\n\n\n\nALG\\((G)\\)\nPreprocess:\n\nif \\(G\\) is acyclic return \\(\\varnothing\\)\nif \\(\\exists\\) a self loop \\(v\\) RETURN \\((\\)ALG\\((G \\setminus \\{v\\})) \\cup \\{v\\}\\).\nif \\(\\exists\\) a degree one vertex \\(v\\) RETURN ALG\\((G-\\{v\\})\\).\nif \\(\\exists\\) a degree two vertex \\(v\\) RETURN ALG\\((G/\\{v\\})\\) (c.f. Lemma 2).\n\n\nMindeg-3 instance:\n\npick an edge \\((u,v) \\in E(G)\\) u.a.r.\npick \\(s \\in \\{u,v\\}\\) u.a.r.\nRETURN \\((\\)ALG\\((G \\setminus \\{s\\})) \\cup \\{s\\}\\)\n\n\n\n\n\n\n\n\n\nClaim 1\n\n\n\nALG always returns a FVS of \\(G\\).\n\n\nThis follows from Lemmas 1—3 and induction on \\(n\\).\n\n\n\n\n\n\nClaim 2\n\n\n\nIf \\(G\\) has a FVS of size \\(k\\), then \\(\\operatorname{Pr}\\)[ALG returns an optimal FVS] \\(\\geqslant 1/4^k\\).\n\n\nThis follows from Lemmas 1—3, the key lemma, and induction on \\(n\\).\n\n\n\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L1/index.html#footnotes",
    "href": "2022/04-GIAN/notes/D2L1/index.html#footnotes",
    "title": "191014K02 | Day 2 Lecture 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n(even linear)↩︎\nWe could have also considered \\(X_k = \\max_G E[X_G]\\), where the max is over all graphs whose vertex cover is at most \\(k\\): but there are infinitely many graphs that have vertex covers of size at most \\(k\\), and it is not immediate that the max is well-defined, so we restrict ourselves to graphs on \\(n\\) vertices that have vertex covers of size at most \\(k\\).↩︎\nWe allow for more than one edge between a fixed pair of vertices and self-loops.↩︎\nA graph without cycles that is not necessarily connected.↩︎\nExcept when the cycle only contains \\(u\\), i.e, \\(u\\) has a self-loop.↩︎"
  },
  {
    "objectID": "2022/04-GIAN/notes/D3L1/index.html",
    "href": "2022/04-GIAN/notes/D3L1/index.html",
    "title": "191014K02 | Day 3 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\n\n\nFor two strings \\(s_1, s_2\\) of the same length \\(\\ell\\), we define the Hamming Distance between \\(S_1\\) & \\(S_2\\) to be:\n\\[d\\left(S_1, S_2\\right):=\\left|\\left\\{i: S_1[i] \\neq S_2[i]\\right\\}\\right|\\]\nso, for example, \\(d\\)(horse, force) \\(=2\\).\nFor a string \\(c\\) and set \\(S\\) of stings of length \\(\\ell\\):\n\\[d(S, c):=\\max _{t \\in S} d(t,c)\\]\n\n\n\n\n\n\nClosest String [Optimization]\n\n\n\nInput: \\(n\\) strings of length \\(\\ell\\) over an alphabet \\(\\Sigma\\)1\nTask: Find center sting \\(c\\) lot length \\(\\ell\\) such that \\(d(S, c)\\) is minimized\n\n\nGOAL: \\((1+\\varepsilon)\\) Approximation Algorithm\n\n\nHave an indicator variable for every position \\(p\\) and every letter \\(\\alpha \\in \\Sigma\\), introduce a binary variable \\(x_{p,\\alpha}\\) with the following semantics:\n\\[\\begin{equation*}\n    x_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } c[p] = \\alpha\\\\\n      0 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\\]\nThe constraints:\n\nAt every position we have one letter:\n\n\\[\\forall p \\in [\\ell]: \\sum_{\\alpha \\in \\Sigma} x_{p,\\alpha} = 1\\]\n\nWe control the distance:\n\\[\\forall t \\in S: \\quad \\sum_{p=1}^\\ell \\left({\\color{indianred}1-x_{p, t[p]}} \\right) \\leqslant d\\]\n…and ask the ILP to minimize \\(d\\).\n\n\n\n\n\n\n\nThe distance constraint\n\n\n\n\n\nNote that:\n\\[\\begin{equation*}\n    1 - x_{i,s[i]} =\n    \\begin{cases}\n      0 & \\text{if the solution matches with } s[i] \\text{at location } p,\\\\\n      1 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\\]\n\n\n\nNow, as usual, relax the ILP and solve the associated LP.\nRounding. Think of the OPTLP variable values as “voting” for characters at each position. For example, if \\(\\ell = 5\\), \\(\\Sigma = \\{A,C,G,T\\}\\), and the OPTLP values turn out to be:\n\n\n\n\nA\nC\nG\nT\n\n\n\n\n1\n0.9\n0\n0.05\n0.05\n\n\n2\n0.1\n0.2\n0.4\n0.3\n\n\n3\n0.5\n0.1\n0.1\n0.3\n\n\n4\n0.1\n0.7\n0.1\n0.1\n\n\n5\n0.2\n0.2\n0\n0.6\n\n\n\nThen you might be tempted to “round” the solution to AGACT because for each position \\(p \\in [5]\\), the letters A, G, A, C, and T dominate the vote for that position. However: it turns out that this nautral rounding strategy can be arbitrarily bad!\nInstead of picking the top choice, what we do instead is the following: for every position \\(p \\in [\\ell]\\), treat the \\(x_{p,\\alpha}\\)’s as a probability distribution2 over \\(\\Sigma\\). Now the randomized rounding step involves sampling from this distribution to obtain the solution:\n\nSet \\(c[p] = \\alpha\\) with probability \\(x_{p,\\alpha}\\).\n\nDefine the indicator random variables \\(q_{p,\\alpha}\\) as indicating for us when \\(c\\) is different from \\(\\alpha\\) at position \\(p\\), as a stepping stone to capturing distance eventually:\n\\[\\begin{equation*}\n    q_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } {\\color{indianred}c[p] \\neq \\alpha},\\\\\n      0 & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\nThen we have the natural notion of a random variable to capture the distance between the string output by our randomized algorithm and any fixed string \\(t \\in S\\):\n\\[d[c,t] := \\sum_{p \\in \\ell} q_{p,t[p]}\\]\nIt’s time for our first cool claim.\nFix a \\(t \\in S\\). What is \\(E[d(c,t)]\\)?\nIt turns out: at most \\(d\\), and therefore, at most OPTLP, and in turn, at most OPTILP = OPT {{&lt; bi emoji-sunglasses color=\"darkseagreen\" &gt;}}\n\n\n\n\n\n\nCalculating the Expectation\n\n\n\n\n\n\\[\\begin{aligned}\nE[d(c,t)] & = \\sum_{p \\in [\\ell]} 1 \\cdot {\\color{indianred}\\operatorname{Pr}[c[p] \\neq t[p]]} + 0 \\cdot \\operatorname{Pr}[c[p] \\neq t[p]] \\\\\n& = \\sum_{p \\in [\\ell]} 1 \\cdot \\left({\\color{indianred}1 - x_{p,t[p]}}\\right) \\\\\n& {\\color{darkseagreen}\\leqslant d},\n\\end{aligned}\\]\nwhere the last inequality follows from the second LP constraint.\n\n\n\nNote that \\(d(c,t)\\) is a sum of independent 0/1 random variables whose expectation is upper bounded by OPT. So our useful Chernoff variation applies here,\n\n\n\n\n\n\nChernoff Bound: a Useful Variation (recall)\n\n\n\n\n\nThe: Let \\(X= X_1 + X_2  \\ldots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\)\nthe \\(X_i\\)’s are independent\n\nLet \\(\\mu_L \\leqslant E[X] \\leqslant \\mu_H\\)\nThen: \\[\n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}\n\\]\n\n\n\nand we get the following:\n\\[\n\\operatorname{Pr}[d(c,t)-\\text{OPT} &gt; \\varepsilon \\cdot \\text{OPT}] \\leqslant e^{-\\varepsilon^2 \\text{OPT} / 3}.\n\\]\nNow, applying union bound over all \\(n\\) choices of \\(t \\in S\\), we get:\n\\[\n\\operatorname{Pr}[{\\color{darkseagreen}d(c,S)} &gt; (1+\\varepsilon) \\cdot \\text{OPT}] \\leqslant \\frac{{\\color{darkseagreen}n}}{e^{\\varepsilon^2 \\text{OPT} / 3}}.\n\\]\nSo, if, for example:\n\\[\\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}} \\leqslant \\frac{1}{2},\\]\nthen it’s a win! {{&lt; bi bullseye color=\"olivedrab\" &gt;}}\n\n\n\n\n\n\nWhat’s the bad situation?\n\n\n\n\n\n\\[\\begin{aligned}\n\\frac{1}{2} & \\leqslant \\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}}\\\\\n& ~ \\\\\ne^{\\varepsilon^2 \\text{OPT} / 3} & \\leqslant 2n \\\\\n& ~ \\\\\n\\frac{\\varepsilon^2 \\text{OPT}}{3} & \\leqslant \\ln(2n) \\\\\n& ~ \\\\\n{\\color{indianred}\\text{OPT}} & {\\color{indianred}\\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}}\n\\end{aligned}\\]\n\n\n\nWe don’t have a win when OPT is really really small, in particular, if:\n\\[\\text{OPT} \\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}\\]\nWe handle this case with a local search algorithm.\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D3L1/index.html#k02-day-3-lecture-1",
    "href": "2022/04-GIAN/notes/D3L1/index.html#k02-day-3-lecture-1",
    "title": "191014K02 | Day 3 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\n\n\nFor two strings \\(s_1, s_2\\) of the same length \\(\\ell\\), we define the Hamming Distance between \\(S_1\\) & \\(S_2\\) to be:\n\\[d\\left(S_1, S_2\\right):=\\left|\\left\\{i: S_1[i] \\neq S_2[i]\\right\\}\\right|\\]\nso, for example, \\(d\\)(horse, force) \\(=2\\).\nFor a string \\(c\\) and set \\(S\\) of stings of length \\(\\ell\\):\n\\[d(S, c):=\\max _{t \\in S} d(t,c)\\]\n\n\n\n\n\n\nClosest String [Optimization]\n\n\n\nInput: \\(n\\) strings of length \\(\\ell\\) over an alphabet \\(\\Sigma\\)1\nTask: Find center sting \\(c\\) lot length \\(\\ell\\) such that \\(d(S, c)\\) is minimized\n\n\nGOAL: \\((1+\\varepsilon)\\) Approximation Algorithm\n\n\nHave an indicator variable for every position \\(p\\) and every letter \\(\\alpha \\in \\Sigma\\), introduce a binary variable \\(x_{p,\\alpha}\\) with the following semantics:\n\\[\\begin{equation*}\n    x_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } c[p] = \\alpha\\\\\n      0 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\\]\nThe constraints:\n\nAt every position we have one letter:\n\n\\[\\forall p \\in [\\ell]: \\sum_{\\alpha \\in \\Sigma} x_{p,\\alpha} = 1\\]\n\nWe control the distance:\n\\[\\forall t \\in S: \\quad \\sum_{p=1}^\\ell \\left({\\color{indianred}1-x_{p, t[p]}} \\right) \\leqslant d\\]\n…and ask the ILP to minimize \\(d\\).\n\n\n\n\n\n\n\nThe distance constraint\n\n\n\n\n\nNote that:\n\\[\\begin{equation*}\n    1 - x_{i,s[i]} =\n    \\begin{cases}\n      0 & \\text{if the solution matches with } s[i] \\text{at location } p,\\\\\n      1 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\\]\n\n\n\nNow, as usual, relax the ILP and solve the associated LP.\nRounding. Think of the OPTLP variable values as “voting” for characters at each position. For example, if \\(\\ell = 5\\), \\(\\Sigma = \\{A,C,G,T\\}\\), and the OPTLP values turn out to be:\n\n\n\n\nA\nC\nG\nT\n\n\n\n\n1\n0.9\n0\n0.05\n0.05\n\n\n2\n0.1\n0.2\n0.4\n0.3\n\n\n3\n0.5\n0.1\n0.1\n0.3\n\n\n4\n0.1\n0.7\n0.1\n0.1\n\n\n5\n0.2\n0.2\n0\n0.6\n\n\n\nThen you might be tempted to “round” the solution to AGACT because for each position \\(p \\in [5]\\), the letters A, G, A, C, and T dominate the vote for that position. However: it turns out that this nautral rounding strategy can be arbitrarily bad!\nInstead of picking the top choice, what we do instead is the following: for every position \\(p \\in [\\ell]\\), treat the \\(x_{p,\\alpha}\\)’s as a probability distribution2 over \\(\\Sigma\\). Now the randomized rounding step involves sampling from this distribution to obtain the solution:\n\nSet \\(c[p] = \\alpha\\) with probability \\(x_{p,\\alpha}\\).\n\nDefine the indicator random variables \\(q_{p,\\alpha}\\) as indicating for us when \\(c\\) is different from \\(\\alpha\\) at position \\(p\\), as a stepping stone to capturing distance eventually:\n\\[\\begin{equation*}\n    q_{p,\\alpha} =\n    \\begin{cases}\n      1 & \\text{if } {\\color{indianred}c[p] \\neq \\alpha},\\\\\n      0 & \\text{otherwise}.\n    \\end{cases}\n\\end{equation*}\\]\nThen we have the natural notion of a random variable to capture the distance between the string output by our randomized algorithm and any fixed string \\(t \\in S\\):\n\\[d[c,t] := \\sum_{p \\in \\ell} q_{p,t[p]}\\]\nIt’s time for our first cool claim.\nFix a \\(t \\in S\\). What is \\(E[d(c,t)]\\)?\nIt turns out: at most \\(d\\), and therefore, at most OPTLP, and in turn, at most OPTILP = OPT {{&lt; bi emoji-sunglasses color=\"darkseagreen\" &gt;}}\n\n\n\n\n\n\nCalculating the Expectation\n\n\n\n\n\n\\[\\begin{aligned}\nE[d(c,t)] & = \\sum_{p \\in [\\ell]} 1 \\cdot {\\color{indianred}\\operatorname{Pr}[c[p] \\neq t[p]]} + 0 \\cdot \\operatorname{Pr}[c[p] \\neq t[p]] \\\\\n& = \\sum_{p \\in [\\ell]} 1 \\cdot \\left({\\color{indianred}1 - x_{p,t[p]}}\\right) \\\\\n& {\\color{darkseagreen}\\leqslant d},\n\\end{aligned}\\]\nwhere the last inequality follows from the second LP constraint.\n\n\n\nNote that \\(d(c,t)\\) is a sum of independent 0/1 random variables whose expectation is upper bounded by OPT. So our useful Chernoff variation applies here,\n\n\n\n\n\n\nChernoff Bound: a Useful Variation (recall)\n\n\n\n\n\nThe: Let \\(X= X_1 + X_2  \\ldots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\)\nthe \\(X_i\\)’s are independent\n\nLet \\(\\mu_L \\leqslant E[X] \\leqslant \\mu_H\\)\nThen: \\[\n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}\n\\]\n\n\n\nand we get the following:\n\\[\n\\operatorname{Pr}[d(c,t)-\\text{OPT} &gt; \\varepsilon \\cdot \\text{OPT}] \\leqslant e^{-\\varepsilon^2 \\text{OPT} / 3}.\n\\]\nNow, applying union bound over all \\(n\\) choices of \\(t \\in S\\), we get:\n\\[\n\\operatorname{Pr}[{\\color{darkseagreen}d(c,S)} &gt; (1+\\varepsilon) \\cdot \\text{OPT}] \\leqslant \\frac{{\\color{darkseagreen}n}}{e^{\\varepsilon^2 \\text{OPT} / 3}}.\n\\]\nSo, if, for example:\n\\[\\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}} \\leqslant \\frac{1}{2},\\]\nthen it’s a win! {{&lt; bi bullseye color=\"olivedrab\" &gt;}}\n\n\n\n\n\n\nWhat’s the bad situation?\n\n\n\n\n\n\\[\\begin{aligned}\n\\frac{1}{2} & \\leqslant \\frac{n}{e^{\\varepsilon^2 \\text{OPT} / 3}}\\\\\n& ~ \\\\\ne^{\\varepsilon^2 \\text{OPT} / 3} & \\leqslant 2n \\\\\n& ~ \\\\\n\\frac{\\varepsilon^2 \\text{OPT}}{3} & \\leqslant \\ln(2n) \\\\\n& ~ \\\\\n{\\color{indianred}\\text{OPT}} & {\\color{indianred}\\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}}\n\\end{aligned}\\]\n\n\n\nWe don’t have a win when OPT is really really small, in particular, if:\n\\[\\text{OPT} \\leqslant \\frac{3\\ln(2n)}{\\varepsilon^2}\\]\nWe handle this case with a local search algorithm.\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D3L1/index.html#footnotes",
    "href": "2022/04-GIAN/notes/D3L1/index.html#footnotes",
    "title": "191014K02 | Day 3 Lecture 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that \\(|\\Sigma|\\) is constant.↩︎\nRecall that the first constraint ensures that this is a valid thing to do.↩︎"
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L2/index.html",
    "href": "2022/04-GIAN/notes/D2L2/index.html",
    "title": "191014K02 | Day 2 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\nA simple path in a graph is a sequence of distinct vertices \\(u_1, \\ldots, u_\\ell\\) such that all consecutive vertices have an edge between them. We are going to talk about the problem of finding long paths in graphs:\n\n\n\n\n\n\n\\(k\\)-Path\n\n\n\nDoes \\(G\\) have a simple path on \\(k\\) vertices?\n\n\nThis problem is “of course”1 NP-complete.\n\nWhat is the probability that a random coloring with \\(k\\) colors makes a fixed \\(k\\)-path “multicolored”? It’s \\(\\frac{k!}{k^k}\\), and we claim that this is at least \\(\\frac{1}{e^k}\\).\n\n\n\n\n\n\nLower bound on the probability of the good event\n\n\n\nClaim 1. \\(\\frac{k!}{k^k} \\geqslant \\frac{1}{e^k}\\)\n\n\n\n\n\n\n\n\nProof by induction:\n\n\n\n\n\n\\[\\begin{aligned}\n\\frac{k^k}{k !} & = \\underbrace{{\\color{indianred}\\frac{(k-1)^{k-1}}{(k-1) !} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}}}}_{1} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& = \\underbrace{{\\color{darkseagreen}\\frac{(k-1)^{k-1}}{(k-1) !}}}_{\\text{Induction Hypothesis}} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& \\leqslant {\\color{darkseagreen}e^{k-1}} \\cdot \\frac{(k-1)!}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{{\\color{olivedrab}(k-1)!}}{(k-1)^{k-1}} \\cdot \\frac{{\\color{palevioletred}k^k}}{{\\color{olivedrab}k!}} \\\\\n& \\leqslant e^{k-1} \\cdot {\\color{olivedrab}\\frac{1}{k}} \\cdot \\frac{{\\color{palevioletred}k^{k-1}}}{(k-1)^{k-1}} \\cdot {\\color{palevioletred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{1}{{\\color{indianred}k}} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\cdot {\\color{indianred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\\\\n& ~ \\\\\n& =e^{k-1} \\cdot {\\color{darkseagreen}\\left(1+\\frac{1}{k-1}\\right)^{k-1}}\\\\\n& \\leqslant e^{k-1} \\cdot {\\color{darkseagreen}e}\\\\\n& =e^k\n\\end{aligned}\\]\n\n\n\n\n\nThe useful way to recall what the Chernoff bound tells us is the following: for independent 0/1 random variables, the probability that \\(X\\) deviates from its expectation by a large amount is extremely small.\n\n\n\n\n\n\nChernoff Bound (informal)\n\n\n\nIf \\(X\\) is the sum of many independent random variables with “small” values, then \\(X\\) is very very likely to be very close to \\(E[X]\\).\n\n\nThe following is the precise statment:\n\n\n\n\n\n\nChernoff Bound: the Theorem.\n\n\n\nLet \\(X= X_1 + X_2 \\cdots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\), and\nthe \\(X_i\\)’s is are independent,\n\nthen \\(\\operatorname{Pr}[{\\color{indianred}|X-E[X]| \\geqslant \\varepsilon E[X]}] \\leqslant 2e^{-\\varepsilon^2 \\cdot E[X]/3}\\)\n\n\nAnd here is a useful variation, handy for when you don’t know the expectation, but have upper and lower bounds on it.\n\n\n\n\n\n\nChernoff Bound: a Useful Variation\n\n\n\nThe: Let \\(X= X_1 + X_2  \\ldots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\)\nthe \\(X_i\\)’s are independent\n\nLet \\(\\mu_L \\leqslant E[X] \\leqslant \\mu_H\\)\nThen: \\[\n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L2/index.html#k02-day-2-lecture-2",
    "href": "2022/04-GIAN/notes/D2L2/index.html#k02-day-2-lecture-2",
    "title": "191014K02 | Day 2 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\nA simple path in a graph is a sequence of distinct vertices \\(u_1, \\ldots, u_\\ell\\) such that all consecutive vertices have an edge between them. We are going to talk about the problem of finding long paths in graphs:\n\n\n\n\n\n\n\\(k\\)-Path\n\n\n\nDoes \\(G\\) have a simple path on \\(k\\) vertices?\n\n\nThis problem is “of course”1 NP-complete.\n\nWhat is the probability that a random coloring with \\(k\\) colors makes a fixed \\(k\\)-path “multicolored”? It’s \\(\\frac{k!}{k^k}\\), and we claim that this is at least \\(\\frac{1}{e^k}\\).\n\n\n\n\n\n\nLower bound on the probability of the good event\n\n\n\nClaim 1. \\(\\frac{k!}{k^k} \\geqslant \\frac{1}{e^k}\\)\n\n\n\n\n\n\n\n\nProof by induction:\n\n\n\n\n\n\\[\\begin{aligned}\n\\frac{k^k}{k !} & = \\underbrace{{\\color{indianred}\\frac{(k-1)^{k-1}}{(k-1) !} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}}}}_{1} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& = \\underbrace{{\\color{darkseagreen}\\frac{(k-1)^{k-1}}{(k-1) !}}}_{\\text{Induction Hypothesis}} \\cdot \\frac{(k-1) !}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& \\leqslant {\\color{darkseagreen}e^{k-1}} \\cdot \\frac{(k-1)!}{(k-1)^{k-1}} \\cdot \\frac{k^k}{k!} \\\\\n& ~ \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{{\\color{olivedrab}(k-1)!}}{(k-1)^{k-1}} \\cdot \\frac{{\\color{palevioletred}k^k}}{{\\color{olivedrab}k!}} \\\\\n& \\leqslant e^{k-1} \\cdot {\\color{olivedrab}\\frac{1}{k}} \\cdot \\frac{{\\color{palevioletred}k^{k-1}}}{(k-1)^{k-1}} \\cdot {\\color{palevioletred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{1}{{\\color{indianred}k}} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\cdot {\\color{indianred}k} \\\\\n& \\leqslant e^{k-1} \\cdot \\frac{k^{k-1}}{(k-1)^{k-1}} \\\\\n& ~ \\\\\n& =e^{k-1} \\cdot {\\color{darkseagreen}\\left(1+\\frac{1}{k-1}\\right)^{k-1}}\\\\\n& \\leqslant e^{k-1} \\cdot {\\color{darkseagreen}e}\\\\\n& =e^k\n\\end{aligned}\\]\n\n\n\n\n\nThe useful way to recall what the Chernoff bound tells us is the following: for independent 0/1 random variables, the probability that \\(X\\) deviates from its expectation by a large amount is extremely small.\n\n\n\n\n\n\nChernoff Bound (informal)\n\n\n\nIf \\(X\\) is the sum of many independent random variables with “small” values, then \\(X\\) is very very likely to be very close to \\(E[X]\\).\n\n\nThe following is the precise statment:\n\n\n\n\n\n\nChernoff Bound: the Theorem.\n\n\n\nLet \\(X= X_1 + X_2 \\cdots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\), and\nthe \\(X_i\\)’s is are independent,\n\nthen \\(\\operatorname{Pr}[{\\color{indianred}|X-E[X]| \\geqslant \\varepsilon E[X]}] \\leqslant 2e^{-\\varepsilon^2 \\cdot E[X]/3}\\)\n\n\nAnd here is a useful variation, handy for when you don’t know the expectation, but have upper and lower bounds on it.\n\n\n\n\n\n\nChernoff Bound: a Useful Variation\n\n\n\nThe: Let \\(X= X_1 + X_2  \\ldots+ X_n\\) where:\n\nthe \\(X_i\\)’s take values from \\(\\{0,1\\}\\)\nthe \\(X_i\\)’s are independent\n\nLet \\(\\mu_L \\leqslant E[X] \\leqslant \\mu_H\\)\nThen: \\[\n\\begin{aligned}\n& \\operatorname{Pr}\\left[x-\\mu_H \\geqslant \\varepsilon \\mu_H\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_H / 3} \\\\\n& \\operatorname{Pr}\\left[\\mu_L-x \\geqslant \\varepsilon \\mu_L\\right] \\leqslant e^{-\\varepsilon^2 \\cdot \\mu_L / 3}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "2022/04-GIAN/notes/D2L2/index.html#footnotes",
    "href": "2022/04-GIAN/notes/D2L2/index.html#footnotes",
    "title": "191014K02 | Day 2 Lecture 2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThanks, Hamiltonian Path.↩︎"
  },
  {
    "objectID": "2022/04-GIAN/index.html",
    "href": "2022/04-GIAN/index.html",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "A GIAN Course by Prof Daniel Lokshtanov\n\n\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nMost computational problems that model real-world issues are not known to admit efficient algorithms that are provably correct on all inputs. Many of these problems can be reduced to one of the classical problems called NP-complete problems which are unlikely to admit efficient algorithms in practice, and the issue of whether they do is a fundamental open problem in computer science. Although these problems are very unlikely to be solvable efficiently in the immediate future, computer scientists, over the last few decades, have come up with several “workarounds” to “cope” with NP-hardness.\nTwo fundamental approaches in this program include approximation and fixed- parameter tractability. An approximate algorithm is a way of dealing with NP- completeness for optimization problem. This technique does not guarantee the best solution. The goal of an approximation algorithm is to come as close as possible to the optimum value in a reasonable amount of time which is at most polynomial time. On the other hand, parameterized algorithms aim to restrict the exponential blow-up to an identified parameter of the problem, leading to efficient exact algorithms whenever the said parameter is reasonably small. In recent times, there has been substantial research that involves an interplay of techniques from both approaches as well.\nAll paradigms of algorithm design, including efficient polynomial time algorithms as well as the methods of approximation and parameterization discussed above, are substantially more powerful when combined with techniques based on randomness. Carefully employed, randomization leads to approaches that are faster and easier to implement than their deterministic counterparts, making them particularly well-suited to practice.\nOver the last two decades, sophisticated probabilistic techniques have been developed for a broad range of challenging computing applications. To begin with, this course will introduce the basic probabilistic techniques used in the design of randomized algorithms and in probabilistic analysis of algorithms. The course covers the basic probability theory required for working with these techniques and demonstrates their use in various computing applications, especially in the context of parameterized and approximation algorithms.\nThis course will demonstrate the algorithmic techniques in the context of a variety of combinatorial optimization problems that have significant real-world applications. These include: Longest Path, Minimum Cut, Maximum Cut, Clustering, Vertex Cover, Feedback Vertex Set, and Closest String.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course. The course is open to students, postdocs, faculty, industry professionals, and anyone who is interested and is confident about the prerequisites enlisted below.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms.\nProbability Prerequisites\nDiscrete probability spaces • Events • Random variables • Independence (of events, of random variables) • Conditional probability • Expectation of random variable. • Linearity of Expectation • Conditional Expectation (of random variable on event, and on another random variable) • Binomial coefficients (Pascal’s Triangle) • Bernoulli, Binomial, Geometric random variables.\nGeneral Prerequsites\nCorrectness proofs for algorithms • Paradigms: Greedy, DP, Divide and Conquer • Big-Oh and asymptotic runtime analysis • Formulating and solving recurrences • P, NP, NP-completeness\nMath Prerequisites\nLinear algebra (Matrices, vectors, rank, basis, linear independence)\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n5th December 2022: Registration + Coffee: 9AM to 10AM | Outside 1/101\n5th December 2022: Inaugaral Event: 10AM | 1/101\n\nAddress by Prof. Rajat Moona\n(Director, IITGN)\nAddress by Prof. Anirban Dasgupta\n(Discipline Coordinator, Computer Science and Engineering, IITGN and Local GIAN Coordinator for IITGN)\nAddress by Prof. Saket Saurabh\n(Professor, The Institute of Mathematical Sciences)\n\nLectures: Mon - Thu • 11AM — 12:30PM • 2:30PM — 4PM | Fri • 11AM — 12:30PM\nTutorial: Mon - Thu • 4:30PM — 6PM | Fri • 2:30PM — 4PM\nVenue: Mon - Wed: 1/101 • Thu: 7/101 • Fri: 7/102\n\n\n\nZoom links and invitations to a Whatsapp group and Discord server were sent out to all registered participants.\nRegister here. {{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Registrations are now closed. You can follow along on Youtube if you missed registering!\n\n\n\n\n\n\n\n\n\n\n\nAbout the Instructor: Daniel Lokshtanov\n\n\n\n\n\n\n\n\n\n\n\nDaniel Lokshtanov is a Professor at the Department of Computer Science at the University of California Santa Barbara, before which he was a Professor at the Department of Informatics at the University of Bergen. He received his PhD in Computer Science (2009), from the University of Bergen. He spent two years (2010- 2012) as a Simons Postdoctoral Fellow at University of California at San Diego.\nHis research interests span a wide area of algorithms, and he has made several fundamental contributions in the areas of exact exponential algorithms, parameterized and fine-grained algorithms and approximation algorithms. He has been awarded the Meltzer Prize for Young Researchers for his work at the University of Bergen. He is a recipient of the Bergen Research Foundation young researcher grant and of an ERC starting grant on parameterized algorithms. He is a co-author of two recently published texts — Kernelization (Cambridge University Press, 2019) and Parameterized Algorithms (Springer, 2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\nLecturesTutorialsMemoriesFeedback\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n        Recap\n    \n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                1. Introduction\n                Randomized Algorithms  MaxCut  MinCut\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                2. Linear Programs\n                Algorithm: Vertex Cover LP.  2-Approximation by Deterministic Rounding  Algorithm: Set Cover.  Randomized Rounding for O(log n) approximation.\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                3. Vertex Cover and FVS\n                Randomized 2-Approximation algorithm for Vertex Cover, and an exact exponential algorithm algorithm for Vertex Cover  Randomized 4-Approximation algorithm for FVS and an exact exponential algorithm for FVS  Comments on F-Deletion\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                4. Color Coding\n                Color Coding (k-Path)  Chernoff Bounds  Approximate counting of (K-paths)  Chromatic Coding (Feedback Arc Set on Tournaments and d-Clustering)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                5. Closest String and Max Cut\n                (1+eps) approximation for Closest String by Randomized Rounding and Local SearchMax Cut on Dense Graphs\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                6. Max Cut and SDP\n                Max Cut on Dense Graphs (continued)  Introduction to Semi-Definite Programs  0.87 approximation for Max Cut on General Graphs \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                7. Algebraic Techniques\n                Isolation Lemma  Cut and Count\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                8. Derandomization\n                Method of Conditional Expectation  Splitters\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Dec, 2022\n            \n            \n                9. Glimpses of Exact Algorithms\n                1.333^n algorithm for 3-SAT  2-approximation for Tournament Feedback Vertex Set\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n\n\n\n\nNo matching items\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n    \n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                Tutorial 1\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                Tutorial 2\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                Tutorial 3\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                Tutorial 4\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                09 Dec, 2022\n            \n            \n                Tutorial 5\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/04-GIAN/index.html#k02-randomized-methods-for-approximation-and-parameterized-algorithms",
    "href": "2022/04-GIAN/index.html#k02-randomized-methods-for-approximation-and-parameterized-algorithms",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "A GIAN Course by Prof Daniel Lokshtanov\n\n\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nMost computational problems that model real-world issues are not known to admit efficient algorithms that are provably correct on all inputs. Many of these problems can be reduced to one of the classical problems called NP-complete problems which are unlikely to admit efficient algorithms in practice, and the issue of whether they do is a fundamental open problem in computer science. Although these problems are very unlikely to be solvable efficiently in the immediate future, computer scientists, over the last few decades, have come up with several “workarounds” to “cope” with NP-hardness.\nTwo fundamental approaches in this program include approximation and fixed- parameter tractability. An approximate algorithm is a way of dealing with NP- completeness for optimization problem. This technique does not guarantee the best solution. The goal of an approximation algorithm is to come as close as possible to the optimum value in a reasonable amount of time which is at most polynomial time. On the other hand, parameterized algorithms aim to restrict the exponential blow-up to an identified parameter of the problem, leading to efficient exact algorithms whenever the said parameter is reasonably small. In recent times, there has been substantial research that involves an interplay of techniques from both approaches as well.\nAll paradigms of algorithm design, including efficient polynomial time algorithms as well as the methods of approximation and parameterization discussed above, are substantially more powerful when combined with techniques based on randomness. Carefully employed, randomization leads to approaches that are faster and easier to implement than their deterministic counterparts, making them particularly well-suited to practice.\nOver the last two decades, sophisticated probabilistic techniques have been developed for a broad range of challenging computing applications. To begin with, this course will introduce the basic probabilistic techniques used in the design of randomized algorithms and in probabilistic analysis of algorithms. The course covers the basic probability theory required for working with these techniques and demonstrates their use in various computing applications, especially in the context of parameterized and approximation algorithms.\nThis course will demonstrate the algorithmic techniques in the context of a variety of combinatorial optimization problems that have significant real-world applications. These include: Longest Path, Minimum Cut, Maximum Cut, Clustering, Vertex Cover, Feedback Vertex Set, and Closest String.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course. The course is open to students, postdocs, faculty, industry professionals, and anyone who is interested and is confident about the prerequisites enlisted below.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms.\nProbability Prerequisites\nDiscrete probability spaces • Events • Random variables • Independence (of events, of random variables) • Conditional probability • Expectation of random variable. • Linearity of Expectation • Conditional Expectation (of random variable on event, and on another random variable) • Binomial coefficients (Pascal’s Triangle) • Bernoulli, Binomial, Geometric random variables.\nGeneral Prerequsites\nCorrectness proofs for algorithms • Paradigms: Greedy, DP, Divide and Conquer • Big-Oh and asymptotic runtime analysis • Formulating and solving recurrences • P, NP, NP-completeness\nMath Prerequisites\nLinear algebra (Matrices, vectors, rank, basis, linear independence)\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\n5th December 2022: Registration + Coffee: 9AM to 10AM | Outside 1/101\n5th December 2022: Inaugaral Event: 10AM | 1/101\n\nAddress by Prof. Rajat Moona\n(Director, IITGN)\nAddress by Prof. Anirban Dasgupta\n(Discipline Coordinator, Computer Science and Engineering, IITGN and Local GIAN Coordinator for IITGN)\nAddress by Prof. Saket Saurabh\n(Professor, The Institute of Mathematical Sciences)\n\nLectures: Mon - Thu • 11AM — 12:30PM • 2:30PM — 4PM | Fri • 11AM — 12:30PM\nTutorial: Mon - Thu • 4:30PM — 6PM | Fri • 2:30PM — 4PM\nVenue: Mon - Wed: 1/101 • Thu: 7/101 • Fri: 7/102\n\n\n\nZoom links and invitations to a Whatsapp group and Discord server were sent out to all registered participants.\nRegister here. {{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Registrations are now closed. You can follow along on Youtube if you missed registering!\n\n\n\n\n\n\n\n\n\n\n\nAbout the Instructor: Daniel Lokshtanov\n\n\n\n\n\n\n\n\n\n\n\nDaniel Lokshtanov is a Professor at the Department of Computer Science at the University of California Santa Barbara, before which he was a Professor at the Department of Informatics at the University of Bergen. He received his PhD in Computer Science (2009), from the University of Bergen. He spent two years (2010- 2012) as a Simons Postdoctoral Fellow at University of California at San Diego.\nHis research interests span a wide area of algorithms, and he has made several fundamental contributions in the areas of exact exponential algorithms, parameterized and fine-grained algorithms and approximation algorithms. He has been awarded the Meltzer Prize for Young Researchers for his work at the University of Bergen. He is a recipient of the Bergen Research Foundation young researcher grant and of an ERC starting grant on parameterized algorithms. He is a co-author of two recently published texts — Kernelization (Cambridge University Press, 2019) and Parameterized Algorithms (Springer, 2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\nLecturesTutorialsMemoriesFeedback\n\n\n\n\n\n    \n        Date\n        Lecture\n        Slides\n        Notes\n        Video\n        Recap\n    \n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                1. Introduction\n                Randomized Algorithms  MaxCut  MinCut\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                2. Linear Programs\n                Algorithm: Vertex Cover LP.  2-Approximation by Deterministic Rounding  Algorithm: Set Cover.  Randomized Rounding for O(log n) approximation.\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                3. Vertex Cover and FVS\n                Randomized 2-Approximation algorithm for Vertex Cover, and an exact exponential algorithm algorithm for Vertex Cover  Randomized 4-Approximation algorithm for FVS and an exact exponential algorithm for FVS  Comments on F-Deletion\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                4. Color Coding\n                Color Coding (k-Path)  Chernoff Bounds  Approximate counting of (K-paths)  Chromatic Coding (Feedback Arc Set on Tournaments and d-Clustering)\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                5. Closest String and Max Cut\n                (1+eps) approximation for Closest String by Randomized Rounding and Local SearchMax Cut on Dense Graphs\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                6. Max Cut and SDP\n                Max Cut on Dense Graphs (continued)  Introduction to Semi-Definite Programs  0.87 approximation for Max Cut on General Graphs \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                7. Algebraic Techniques\n                Isolation Lemma  Cut and Count\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                8. Derandomization\n                Method of Conditional Expectation  Splitters\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Dec, 2022\n            \n            \n                9. Glimpses of Exact Algorithms\n                1.333^n algorithm for 3-SAT  2-approximation for Tournament Feedback Vertex Set\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n\n\n\n\nNo matching items\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n    \n    \n    \n                    \n            \n                05 Dec, 2022\n            \n            \n                Tutorial 1\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                06 Dec, 2022\n            \n            \n                Tutorial 2\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                07 Dec, 2022\n            \n            \n                Tutorial 3\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                08 Dec, 2022\n            \n            \n                Tutorial 4\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n                    \n            \n                09 Dec, 2022\n            \n            \n                Tutorial 5\n                \n            \n            \n                \n                    \n                \n                \n            \n                \n                    \n                \n                \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/userbase/index.html",
    "href": "2022/userbase/index.html",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "Loading…\n\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nLoading to-dos…"
  },
  {
    "objectID": "2022/userbase/index.html#login",
    "href": "2022/userbase/index.html#login",
    "title": "191014K02: Randomized Methods for Approximation and Parameterized Algorithms",
    "section": "",
    "text": "Loading…\n\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nLoading to-dos…"
  },
  {
    "objectID": "2022/01-noc22-cs59/index.html",
    "href": "2022/01-noc22-cs59/index.html",
    "title": "noc22-cs59 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/01-noc22-cs59/index.html#noc22-cs59.",
    "href": "2022/01-noc22-cs59/index.html#noc22-cs59.",
    "title": "noc22-cs59 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-ES242/labquiz2.html",
    "href": "2022/03-ES242/labquiz2.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] &lt;= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n\\(1 \\leq n \\leq 10^5\\)\n\\(1 \\leq m \\leq 2⋅10^5\\)\n\\(1 \\leq a,b \\leq n\\)\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (\\(1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5\\)) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends \\((1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])\\). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2022/03-ES242/labquiz2.html#es242.-data-structures-and-algorithms-i.",
    "href": "2022/03-ES242/labquiz2.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] &lt;= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n\\(1 \\leq n \\leq 10^5\\)\n\\(1 \\leq m \\leq 2⋅10^5\\)\n\\(1 \\leq a,b \\leq n\\)\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (\\(1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5\\)) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends \\((1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])\\). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2022/03-ES242/labquiz2.html#input-format-2",
    "href": "2022/03-ES242/labquiz2.html#input-format-2",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "The first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i."
  },
  {
    "objectID": "2022/03-ES242/labquiz2.html#output-format-2",
    "href": "2022/03-ES242/labquiz2.html#output-format-2",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Return YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2022/03-ES242/labs/lab-w01.html",
    "href": "2022/03-ES242/labs/lab-w01.html",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Problem 1. Finding the Coefficient\n\n\n\n\n\np(x) is a polynomial whose coefficients are between 0 and 9.\nYou are given the value of p(10) and a number d.\nReturn the coefficient of x^d in p(x).\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(10) and the second line is the value of d.\nIt is guaranteed that p(10) will be at most 10^9 and d will be at most 10.\n\n\n\nFor each test case, print a single integer on a new line, which is the coefficient of x^d in p(x). DO NOT output anything else!\n\n\n\nSample Input\n1\n9042\n3\nExpected Output\n9\n\n\n\n\n\n\n\n\n\n\nProblem 2. Finding the Coefficient Redux\n\n\n\n\n\np(x) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of p(2) and a number d.\nReturn YES if the coefficient of x^d in p(x) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by a copycat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the copycat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n3\n1 1 1\nExpected Output\n6 6\n\n\n\n\n\n\n\n\n\n\nProblem 4. Game of Trust [Open Ended]\n\n\n\n\n\nThere are no tests or templates for this problem. Implement variations of the Game of Trust and feel free to get creative about I/O, language, and even come up with your own strategies.\nCheck out the Sandbox Page on the interactive essay by Nicky Case for inspiration.\n\n\n\n\n\n\n\n\n\nProblem 5. Validating a Self-Working Card Trick [Open Ended]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true."
  },
  {
    "objectID": "2022/03-ES242/labs/lab-w01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2022/03-ES242/labs/lab-w01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 01 Lab",
    "section": "",
    "text": "Problem 1. Finding the Coefficient\n\n\n\n\n\np(x) is a polynomial whose coefficients are between 0 and 9.\nYou are given the value of p(10) and a number d.\nReturn the coefficient of x^d in p(x).\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(10) and the second line is the value of d.\nIt is guaranteed that p(10) will be at most 10^9 and d will be at most 10.\n\n\n\nFor each test case, print a single integer on a new line, which is the coefficient of x^d in p(x). DO NOT output anything else!\n\n\n\nSample Input\n1\n9042\n3\nExpected Output\n9\n\n\n\n\n\n\n\n\n\n\nProblem 2. Finding the Coefficient Redux\n\n\n\n\n\np(x) is a polynomial whose coefficients are either 0 or 1.\nYou are given the value of p(2) and a number d.\nReturn YES if the coefficient of x^d in p(x) is 1 and NO otherwise.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value of p(2) and the second line is the value of d.\nIt is guaranteed that p(2) will be at most 10^9 and d will be at most the degree of p(x).\n\n\n\nFor each test case, print a single integer on a new line, which is YES or NO depending on if the coefficient of x^d in p(x) is 1 or 0. DO NOT output anything else!\n\n\n\nSample Input\n6\n45\n0\n45\n1\n45\n2\n45\n3\n45\n4\n45\n5\nExpected Output\nYES\nNO\nYES\nYES\nNO\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\n\n\nWrite a simulation for the Game of Trust when played by a copycat player for R rounds.\n\n\nThe first line of the input contains a number T, which is the number of test cases.\nThe next 2T lines contain T test cases. Each test case is two lines. The first line is the value R and the second line is R space-separated integers. The i-th integer on the second line is 1 if the other player cooperated in the i-th round, and 0 otherwise.\n\n\n\nFor each test case, print two space-separated integers on a new line. The first integer is the total number of coins earned by the copycat player, while the second integer is the total number of coins earned by the other player. Note that you have to output the net balance. DO NOT output anything else!\n\n\n\nSample Input\n1\n3\n1 1 1\nExpected Output\n6 6\n\n\n\n\n\n\n\n\n\n\nProblem 4. Game of Trust [Open Ended]\n\n\n\n\n\nThere are no tests or templates for this problem. Implement variations of the Game of Trust and feel free to get creative about I/O, language, and even come up with your own strategies.\nCheck out the Sandbox Page on the interactive essay by Nicky Case for inspiration.\n\n\n\n\n\n\n\n\n\nProblem 5. Validating a Self-Working Card Trick [Open Ended]\n\n\n\n\n\nWatch this video and write a program to validate the mechanics of the card trick shown.\nIn other words, your program should take as input a sequence of cards, with the promise that the number of red cards is equal to the number of black cards, and then “perform” the trick as shown in the video, and verify that the final claim about the number of red cards in the red pile being equal to the number of black cards in the black pile is, in fact, true."
  },
  {
    "objectID": "2022/03-SC302/index.html",
    "href": "2022/03-SC302/index.html",
    "title": "SC302 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-SC302/index.html#sc302.",
    "href": "2022/03-SC302/index.html#sc302.",
    "title": "SC302 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/scicomm.html",
    "href": "2022/scicomm.html",
    "title": "Fundamentals of Science Communication | Siddharth Kankaria",
    "section": "",
    "text": "— Siddharth Kankaria\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience communication is an act of connecting people with knowledge, emotions and shared experiences within the field of science. It is both an art to be practised creatively as well as a science to be studied systematically.\nThis week-long course will provide an introduction to the theory and practice of science communication and outline some fundamental tenets of communicating science strategically. Using interactive approaches like discussions, games, and activities, this course will provide Early Career Researchers with an introduction to the frameworks, formats and importance of science communication, and equip them to design, implement and evaluate their science communication efforts effectively.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nSiddharth Kankaria is a science communication practitioner and researcher working at NCBS Bangalore and the Founder of the SciCommSci Club – a flagship initiative for engaging with the science of science communication. He is keenly interested in developing the research-practice continuum within science communication, contributing to mentorship, capacity-building & DEI efforts, and developing intersectional science engagement practices for the Global South. Connect with him on Twitter or LinkedIn at @SiddhrthKnkaria.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n25th July to 29th July 2022 • 4PM — 6PM\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly and hands-on. The only prerequisite is enthusiasm to learn science communication.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and feature in-class practice exercises as well. A collection of resources will be ready for the students’ reference from the first class onwards.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to introduce the fundamentals of effective science communication.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nParticipants will have the skills to craft their own science communication pieces and be able to convey their specialized research work in a manner that is accessible and interesting to a non-specialist, broad audience.\n\n\n\n\n\n\n\nDay 1\n\nDefining SciComm & Public Engagement\nSciComm Strategy & Fundamentals\nExercise: Choose a SC & PE project and develop a strategy zine for it\n\nDay 2\n\nHistory of Science Communication\nSciComm Models\nExercise: Write a 200 word piece describing a suitable model for your SC & PE project\n\nDay 3\n\nImportance of Narratives for SciComm + Storytelling techniques for SciComm\nDealing with Jargon + Metaphors & Analogies + Balancing Accuracy vs. Accessibility\nExercise: Storyboarding a concept for your SC & PE project\n\nDay 4\n\nEthics of doing SciComm\nUnderstanding your SciComm Audiences\nExercise: Write a 300-word profile of a specific target audience for your SC & PE activity \n\nDay 5\n\nExercise: Present your SC & PE project overview with reflections from course modules \nChallenges of doing SciComm in India\nBuilding a SciComm Career in India"
  },
  {
    "objectID": "2022/scicomm.html#fundamentals-of-science-communication",
    "href": "2022/scicomm.html#fundamentals-of-science-communication",
    "title": "Fundamentals of Science Communication | Siddharth Kankaria",
    "section": "",
    "text": "— Siddharth Kankaria\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience communication is an act of connecting people with knowledge, emotions and shared experiences within the field of science. It is both an art to be practised creatively as well as a science to be studied systematically.\nThis week-long course will provide an introduction to the theory and practice of science communication and outline some fundamental tenets of communicating science strategically. Using interactive approaches like discussions, games, and activities, this course will provide Early Career Researchers with an introduction to the frameworks, formats and importance of science communication, and equip them to design, implement and evaluate their science communication efforts effectively.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nSiddharth Kankaria is a science communication practitioner and researcher working at NCBS Bangalore and the Founder of the SciCommSci Club – a flagship initiative for engaging with the science of science communication. He is keenly interested in developing the research-practice continuum within science communication, contributing to mentorship, capacity-building & DEI efforts, and developing intersectional science engagement practices for the Global South. Connect with him on Twitter or LinkedIn at @SiddhrthKnkaria.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n25th July to 29th July 2022 • 4PM — 6PM\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly and hands-on. The only prerequisite is enthusiasm to learn science communication.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and feature in-class practice exercises as well. A collection of resources will be ready for the students’ reference from the first class onwards.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to introduce the fundamentals of effective science communication.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nParticipants will have the skills to craft their own science communication pieces and be able to convey their specialized research work in a manner that is accessible and interesting to a non-specialist, broad audience.\n\n\n\n\n\n\n\nDay 1\n\nDefining SciComm & Public Engagement\nSciComm Strategy & Fundamentals\nExercise: Choose a SC & PE project and develop a strategy zine for it\n\nDay 2\n\nHistory of Science Communication\nSciComm Models\nExercise: Write a 200 word piece describing a suitable model for your SC & PE project\n\nDay 3\n\nImportance of Narratives for SciComm + Storytelling techniques for SciComm\nDealing with Jargon + Metaphors & Analogies + Balancing Accuracy vs. Accessibility\nExercise: Storyboarding a concept for your SC & PE project\n\nDay 4\n\nEthics of doing SciComm\nUnderstanding your SciComm Audiences\nExercise: Write a 300-word profile of a specific target audience for your SC & PE activity \n\nDay 5\n\nExercise: Present your SC & PE project overview with reflections from course modules \nChallenges of doing SciComm in India\nBuilding a SciComm Career in India"
  },
  {
    "objectID": "2022/03-noc22-cs82/index.html",
    "href": "2022/03-noc22-cs82/index.html",
    "title": "noc22-cs82 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-noc22-cs82/index.html#noc22-cs82.",
    "href": "2022/03-noc22-cs82/index.html#noc22-cs82.",
    "title": "noc22-cs82 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-DPBC/index.html",
    "href": "2022/03-DPBC/index.html",
    "title": "DPBC | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-DPBC/index.html#dpbc.",
    "href": "2022/03-DPBC/index.html#dpbc.",
    "title": "DPBC | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/visualscicomm.html",
    "href": "2022/visualscicomm.html",
    "title": "Visual Science Communication | Ipsa Jain",
    "section": "",
    "text": "— Dr Ipsa Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience can be communicated to a target audience through different avenues including written, visual, audio, and a combination thereof. The use of visual communication through art and illustrations, video, audio-visual content and more, has been noted to have a wider reach and breach new barriers.\nThrough this two-day course, students will engage with science communication through images. They will be introduced to some fundamentals of visual science communication, understand how to tell stories using images, learn to tailor their content to different target audiences, and gain perspectives on how different visual language can impact science communication.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nIpsa Jain is a scientist turned illustrator, who uses the visual medium to tell tales of science. She makes images, zines, and books among other things. Her latest book, co-authored with Minhaj Sirajuddin, called Actually, Colors Speak is about coloration in the animal kingdom.\nShe is a Visual Communication faculty at Srishti Manipal Institute, Bangalore. She has collaborated with various institutes like Centre for Cellular and Molecular Biology (CCMB), inStem (CCMB), Azim Premji University and more on projects that centred around science illustrations, video, and sci-art. She also does independent work under the moniker ipsawonders. She works and lives in Bangalore.\nTo know more about her work visit ipsawonders.com or connect with her through Twitter, Linkedin, Instagram or email: ipsajain.31@gmail.com\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\nTentative dates: 5th November and 6th November\nTiming: 11 am to 1:00 pm • lunch break • 2:30pm to 4:00 pm • tea break • 4:30 pm to 6:00 pm\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly with ample exercises. The only prerequisite is enthusiasm to learn science communication through art.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and will feature in-class practice exercises as well. The sessions will be interactive with lots of drawing (without judgement on skill levels) and peer discussions and critique sessions.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to help students build conceptual frameworks to understand, appreciate, and critique images in science.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants can develop their unique style of science communication and engage with subject matters in a more creative and unencumbered manner. The course will help them develop and polish their ideas for various visual science communication efforts.\n\n\n\n\n\n\n\nDay 1: Images in science\n\nClassification and classical examples\nScientific progress from observational drawings (Haeckel’s images, personal work)\nTransformation of images, meaning making, storytelling (DNA story or Darwin story)\n\nDay 2: Visual Science communication\n\nMediums, audiences, intent-content-context bridges\nComparing visual media for similar content made for different audiences\nClarity vs complexity in scientific work\nGroup activity based on give brief, followed by peer review"
  },
  {
    "objectID": "2022/visualscicomm.html#visual-science-communication",
    "href": "2022/visualscicomm.html#visual-science-communication",
    "title": "Visual Science Communication | Ipsa Jain",
    "section": "",
    "text": "— Dr Ipsa Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nScience can be communicated to a target audience through different avenues including written, visual, audio, and a combination thereof. The use of visual communication through art and illustrations, video, audio-visual content and more, has been noted to have a wider reach and breach new barriers.\nThrough this two-day course, students will engage with science communication through images. They will be introduced to some fundamentals of visual science communication, understand how to tell stories using images, learn to tailor their content to different target audiences, and gain perspectives on how different visual language can impact science communication.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nIpsa Jain is a scientist turned illustrator, who uses the visual medium to tell tales of science. She makes images, zines, and books among other things. Her latest book, co-authored with Minhaj Sirajuddin, called Actually, Colors Speak is about coloration in the animal kingdom.\nShe is a Visual Communication faculty at Srishti Manipal Institute, Bangalore. She has collaborated with various institutes like Centre for Cellular and Molecular Biology (CCMB), inStem (CCMB), Azim Premji University and more on projects that centred around science illustrations, video, and sci-art. She also does independent work under the moniker ipsawonders. She works and lives in Bangalore.\nTo know more about her work visit ipsawonders.com or connect with her through Twitter, Linkedin, Instagram or email: ipsajain.31@gmail.com\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\nTentative dates: 5th November and 6th November\nTiming: 11 am to 1:00 pm • lunch break • 2:30pm to 4:00 pm • tea break • 4:30 pm to 6:00 pm\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly with ample exercises. The only prerequisite is enthusiasm to learn science communication through art.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught in person and will feature in-class practice exercises as well. The sessions will be interactive with lots of drawing (without judgement on skill levels) and peer discussions and critique sessions.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to help students build conceptual frameworks to understand, appreciate, and critique images in science.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants can develop their unique style of science communication and engage with subject matters in a more creative and unencumbered manner. The course will help them develop and polish their ideas for various visual science communication efforts.\n\n\n\n\n\n\n\nDay 1: Images in science\n\nClassification and classical examples\nScientific progress from observational drawings (Haeckel’s images, personal work)\nTransformation of images, meaning making, storytelling (DNA story or Darwin story)\n\nDay 2: Visual Science communication\n\nMediums, audiences, intent-content-context bridges\nComparing visual media for similar content made for different audiences\nClarity vs complexity in scientific work\nGroup activity based on give brief, followed by peer review"
  },
  {
    "objectID": "2022/03-SC312/index.html",
    "href": "2022/03-SC312/index.html",
    "title": "SC312 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-SC312/index.html#sc312.",
    "href": "2022/03-SC312/index.html#sc312.",
    "title": "SC312 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-noc22-cs81/index.html",
    "href": "2022/03-noc22-cs81/index.html",
    "title": "noc22-cs81 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-noc22-cs81/index.html#noc22-cs81.",
    "href": "2022/03-noc22-cs81/index.html#noc22-cs81.",
    "title": "noc22-cs81 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-ES242/labs/lab-w02.html",
    "href": "2022/03-ES242/labs/lab-w02.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Four Points\n\n\n\n\n\nThere is a rectangle in the xy-plane. Each edge of this rectangle is parallel to the 2or y-axis, and its area is not zero.\nGiven the coordinates of three of the four vertices of this rectangle, (P,Q), (A,B), and (X,Y), find the coordinates of the other vertex.\n\n\nAll numbers are between -100 and +100.\nThere uniquely exists a rectangle with all of (P,Q), (A,B), and (X,Y) as vertices, edges parallel to the xor y-axis, and a non-zero area.\nAll values in input are integers.\n\n\n\nInput is given from Standard Input in the following format:\nP Q\nA B\nX Y\n\n\n\nPrint the sought coordinates (x,y) separated by a space in the following format:\nR S\n\n\n\nSample Input 1\n-1 -1\n-1 2\n3 2\nSample Output 1\n3 -1\nThe other vertex of the rectangle with vertices (−1,−1),(−1,2),(3,2) is (3,−1).\n\n\n\n\n\n\n\n\n\n\nProblem 2. Waking Up\n\n\n\n\n\n\n\nOne day, Tina got up at exactly B minutes past A o’clock (in 24-hour clock), and Rahul got up at exactly D minutes and 1 second past C o’clock.\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\n\n0 &lt; A &lt; 23\n0 ≤ B ≤ 59\n0&lt; C &lt; 23\n0 ≤ D ≤ 59\nAll values in input are integers.\n\n\n\n\nInput is given from Standard Input in the following format:\nA B C D\n\n\n\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\nSample Input 1\n7 0 6 30\nSample Output 1\nRahul\nSample Input 2\n7 30 7 30\nSample Output 2\nTina\n\n\n\n\n\n\n\n\n\n\nProblem 3. Ratings\n\n\n\n\n\nCodeforces separates its users into 4 divisions by their rating:\n\nFor Division 1: 1900 ≤ rating\nFor Division 2: 1600 ≤ rating ≤ 1899\nFor Division 3: 1400 ≤ rating ≤ 1599\nFor Division 4: rating ≤ 1399\n\nGiven a rating, print in which division the rating belongs.\n\n\nThe first line of the input contains an integer 𝑡 (1≤𝑡≤10^4) — the number of testcases.\nThe description of each test consists of one line containing one integer rating (−5000≤rating≤5000).\n\n\n\nFor each test case, output a single line containing the correct division in the format “Division X”, where 𝑋 is an integer between 1 and 4 representing the division for the corresponding rating.\n\n\n\nSample Input 1\n7\n-789\n1299\n1300\n1399\n1400\n1679\n2300\nSample Output 1\nDivision 4\nDivision 4\nDivision 4\nDivision 4\nDivision 3\nDivision 2\nDivision 1\nNote\nFor test cases 1−4, the corresponding ratings are −789, 1299, 1300, 1399, so all of them are in division 4.\nFor the fifth test case, the corresponding rating is 1400, so it is in division 3.\nFor the sixth test case, the corresponding rating is 1679, so it is in division 2.\nFor the seventh test case, the corresponding rating is 2300, so it is in division 1.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Meta Tic-Tac-Toe [Open Ended]\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is an optional and open-ended problem. Feel free to get creative.\n\n\nExamine the rules of Ultimate Tic Tac Toe and write your own implementation of the game."
  },
  {
    "objectID": "2022/03-ES242/labs/lab-w02.html#es242.-data-structures-and-algorithms-i.",
    "href": "2022/03-ES242/labs/lab-w02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Four Points\n\n\n\n\n\nThere is a rectangle in the xy-plane. Each edge of this rectangle is parallel to the 2or y-axis, and its area is not zero.\nGiven the coordinates of three of the four vertices of this rectangle, (P,Q), (A,B), and (X,Y), find the coordinates of the other vertex.\n\n\nAll numbers are between -100 and +100.\nThere uniquely exists a rectangle with all of (P,Q), (A,B), and (X,Y) as vertices, edges parallel to the xor y-axis, and a non-zero area.\nAll values in input are integers.\n\n\n\nInput is given from Standard Input in the following format:\nP Q\nA B\nX Y\n\n\n\nPrint the sought coordinates (x,y) separated by a space in the following format:\nR S\n\n\n\nSample Input 1\n-1 -1\n-1 2\n3 2\nSample Output 1\n3 -1\nThe other vertex of the rectangle with vertices (−1,−1),(−1,2),(3,2) is (3,−1).\n\n\n\n\n\n\n\n\n\n\nProblem 2. Waking Up\n\n\n\n\n\n\n\nOne day, Tina got up at exactly B minutes past A o’clock (in 24-hour clock), and Rahul got up at exactly D minutes and 1 second past C o’clock.\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\n\n0 &lt; A &lt; 23\n0 ≤ B ≤ 59\n0&lt; C &lt; 23\n0 ≤ D ≤ 59\nAll values in input are integers.\n\n\n\n\nInput is given from Standard Input in the following format:\nA B C D\n\n\n\nIf Tina got up earlier than Rahul, print Tina; otherwise, print Rahul.\n\n\n\nSample Input 1\n7 0 6 30\nSample Output 1\nRahul\nSample Input 2\n7 30 7 30\nSample Output 2\nTina\n\n\n\n\n\n\n\n\n\n\nProblem 3. Ratings\n\n\n\n\n\nCodeforces separates its users into 4 divisions by their rating:\n\nFor Division 1: 1900 ≤ rating\nFor Division 2: 1600 ≤ rating ≤ 1899\nFor Division 3: 1400 ≤ rating ≤ 1599\nFor Division 4: rating ≤ 1399\n\nGiven a rating, print in which division the rating belongs.\n\n\nThe first line of the input contains an integer 𝑡 (1≤𝑡≤10^4) — the number of testcases.\nThe description of each test consists of one line containing one integer rating (−5000≤rating≤5000).\n\n\n\nFor each test case, output a single line containing the correct division in the format “Division X”, where 𝑋 is an integer between 1 and 4 representing the division for the corresponding rating.\n\n\n\nSample Input 1\n7\n-789\n1299\n1300\n1399\n1400\n1679\n2300\nSample Output 1\nDivision 4\nDivision 4\nDivision 4\nDivision 4\nDivision 3\nDivision 2\nDivision 1\nNote\nFor test cases 1−4, the corresponding ratings are −789, 1299, 1300, 1399, so all of them are in division 4.\nFor the fifth test case, the corresponding rating is 1400, so it is in division 3.\nFor the sixth test case, the corresponding rating is 1679, so it is in division 2.\nFor the seventh test case, the corresponding rating is 2300, so it is in division 1.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Meta Tic-Tac-Toe [Open Ended]\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is an optional and open-ended problem. Feel free to get creative.\n\n\nExamine the rules of Ultimate Tic Tac Toe and write your own implementation of the game."
  },
  {
    "objectID": "2022/03-ES242/index.html",
    "href": "2022/03-ES242/index.html",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely based on what you want to do with the information.\nFor example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will try to make sense of trade-offs.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures on Tuesdays and Wednesdays • 10AM — 11AM • 1/101 Labs on Wednesdays • 4PM — 6PM • 7/108 and 7/109\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nHarshil Mittal (mittal_harshil@iitgn.ac.in)\nSaraswati Nanoti (nanoti_saraswati@iitgn.ac.in)\n\n\n\n\n\nKsheer Agrawal (ksheer.agrawal@iitgn.ac.in)\nProgyan Das (progyan.das@iitgn.ac.in)\nNipun Mahajan (mahajan.n@iitgn.ac.in)\nYash More (yash.mh@iitgn.ac.in)\n\n\n\n\n\nXhitij Choudhary (xhitij.cm@iitgn.ac.in)\nBhavesh Jain (bhavesh.jain@iitgn.ac.in)\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nWeekly Assignments on Google Classroom. 2 * [top 10] = 20\nLab Assignments on repl.it. 1 * [top 10] = 10\nClass participation via Mentimeter. 0.5 points per class capped at 10\nMidsem Exam. 10 (lab) + 10 (theory) = 20\nFinal Exam. 10 (lab) + 15 (theory) = 25\nFour quizzes (two theory, two lab & top 3 outcomes counted). 3 * 5 = 15\n\n\n\n\n\n\n\n\n\n\nRegistration\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\nRegistration for the course is now closed. The next edition of this course will be offered in the Jan - Apr 2023 semester.\n\n\n\nNote: contents being actively updated at the time of this writing. Enroled students will find all materials in the Google classroom for this course. Items marked {{&lt; bi alarm color=\"indianred\" &gt;}} are coming soon!\n\nLecturesLabsMentimeterAssignmentsQuizzesExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2022\n1. Introduction to Data Structures\nData Structures - philosophy and examples • Representing games\n\n\n\n\n\n03 Aug, 2022\n2. Introduction to Data Structures\nRepresenting Sequential Data • Arrays • Lists\n\n\n\n\n\n09 Aug, 2022\nInstitute Holiday\n\n\n\n\n\n\n10 Aug, 2022\nQuiz 0 (Ungraded)\n\n\n\n\n\n\n16 Aug, 2022\n3. Representing Graphs\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n17 Aug, 2022\n4. Representing Graphs (contd.)\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n23 Aug, 2022\n5. Dequeues\nIntroducing the cardstack data structure • The Gilbreath Shuffle\n\n\n\n\n\n24 Aug, 2022\n6. Dequeues\nQueues and Stacks as special cases of Dequeues\n\n\n\n\n\n30 Aug, 2022\n7. Euler Tours\nEuler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n\n\n\n\n\n31 Aug, 2022\n8. Euler Tours\nComputing Euler Tours • Hierholzer's algorithm\n\n\n\n\n\n06 Sep, 2022\n9. Stable Marriages\nThe Stable Marriage Problem • Gale-Shapley Algorithm\n\n\n\n\n\n07 Sep, 2022\n10. Stable Marriages\nProof of Termination • Bounding the number of proposals • Proving the stability of the output\n\n\n\n\n\n13 Sep, 2022\n11. Recap Lecture\nReview of arrays, linked lists, stacks, queues, and graphs\n\n\n\n\n\n14 Sep, 2022\nTheory Quiz 01\n\n\n\n\n\n\n20 Sep, 2022\n12. Navigating Graphs\nAn introduction to navigating graphs\n\n\n\n\n\n21 Sep, 2022\n13. Navigating Graphs (BFS)\nBreadth-First Search • Correctness • Analysis of Running Time\n\n\n\n\n\n11 Oct, 2022\n14. Navigating Graphs (DFS)\nDepth-First Search • Pre-Post Intervals\n\n\n\n\n\n12 Oct, 2022\n15. Navigating Graphs (DFS)\nDepth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n\n\n\n\n\n18 Oct, 2022\n16. DFS Applications\nTopological Sort (Algorithm)\n\n\n\n\n\n19 Oct, 2022\n17. DFS Applications\nPostorder • Preorder • Topological Sort (Analysis)\n\n\n\n\n\n25 Oct, 2022\n18. Shortest Paths\nA teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n\n\n\n\n\n26 Oct, 2022\n19. Heaps\nSelection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n\n\n\n\n\n01 Nov, 2022\n20. Heaps\nThe Heap Property • Insert • FindMin • ExtractMin\n\n\n\n\n\n02 Nov, 2022\n21. Heaps\nRepresenting Heaps with Arrays\n\n\n\n\n\n08 Nov, 2022\nInstitute Holiday \n\n\n\n\n\n\n09 Nov, 2022\nTheory Quiz 02\n\n\n\n\n\n\n15 Nov, 2022\n22. Heaps Revisited\nAnalysis • Heapify is Linear Time\n\n\n\n\n\n16 Nov, 2022\n23. Balanced Binary Search Trees\n(2,3)-Trees • Insertion • Deletion\n\n\n\n\n\n22 Nov, 2022\n24. Balanced Binary Search Trees\n(2,3)-Trees Height Analysis\n\n\n\n\n\n23 Nov, 2022\n25. Recap\nReview of BFS, DFS, Heaps, and Balanced BSTs\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                03 Aug, 2022\n            \n            \n                W01. Representations\n                Finding the Coefficient Finding the Coefficient Redux Game of Trust Game of Trust [Open Ended] Validating a Self-Working Card Trick [Open Ended]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                W02. C Warmup and Recap\n                Four Points  Waking Up  Ratings  Meta Tic-Tac-Toe [Open Ended]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Aug, 2022\n            \n            \n                W03. Representing Graphs\n                Swapping Variables  Adjacency Matrix  Edge List  Adjacency List  Getting Even\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Aug, 2022\n            \n            \n                W04. The Cardstack\n                Print alternate cards  Reverse a list of numbers  Cut shuffle  Overhand Shuffle  de Bruijn sequences\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                31 Aug, 2022\n            \n            \n                W05. Euler Tours and de Bruijn Sequences\n                Euler Circuit Sanity Check  Highway Orientation  Edge Orientation Puzzle   Generate de Bruin Sequences\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Sep, 2022\n            \n            \n                W06. Stable Marriages\n                Merge List  Insert Node  Reverse The List  Count Blocking Pairs  Stable Matchings\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                14 Sep, 2022\n            \n            \n                No Lab\n                Lab Quiz 1 (held on 17 Sep, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Sep, 2022\n            \n            \n                W08. Navigating Graphs (BFS)\n                Find My Ancestor!  Longest Path  Unique Servers  Run a Marathon  Just BFS\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Oct, 2022\n            \n            \n                W09. Practice Lab\n                Cop and Robber  Balanced Brackets  Whispering Joker  Time Series  String Game  Lab Exam (held on 15 Oct, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Oct, 2022\n            \n            \n                W10. Navigating Graphs (DFS)\n                2-Colorable Graphs  Topological Sort  Is DAG?  Get Food!\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Oct, 2022\n            \n            \n                W11. Graph Traversal Applications\n                Learning Languages  Permutation Tree  Make Walls  Palindromic Crosswords\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2022\n            \n            \n                W12. Heaps\n                Heapify  HeapSort  The Unity Project  Largest Number\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                09 Nov, 2022\n            \n            \n                W13. Practice Lab\n                Visit Me First  Visit Me Last!  Sort a Tree  Predicting Possibility  Can You Register?\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2022\n            \n            \n                No Lab\n                Lab Quiz 2 (held on 20 Nov, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2022\n            \n            \n                W15. Recap Lab\n                Review of Problems  On Writing Tests  Benchmarking\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nThese questions are integrated into the lectures and may not make sense standalone. Please check the slides and/or notes for additional context.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                02 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Data Structures - philosophy and examples • Representing games\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Representing Sequential Data • Arrays • Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Aug, 2022\n            \n            \n                Representing Graphs\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Aug, 2022\n            \n            \n                Representing Graphs (contd.)\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Aug, 2022\n            \n            \n                Dequeues\n                Introducing the cardstack data structure • The Gilbreath Shuffle\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Aug, 2022\n            \n            \n                Dequeues\n                Queues and Stacks as special cases of Dequeues\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Aug, 2022\n            \n            \n                Euler Tours\n                Euler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                31 Aug, 2022\n            \n            \n                Euler Tours\n                Computing Euler Tours • Hierholzer's algorithm\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                06 Sep, 2022\n            \n            \n                Stable Marriages\n                The Stable Marriage Problem • Gale-Shapley Algorithm\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Sep, 2022\n            \n            \n                Stable Marriages\n                Proof of Termination • Bounding the number of proposals • Proving the stability of the output\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Sep, 2022\n            \n            \n                Recap Lecture\n                Review of arrays, linked lists, stacks, queues, and graphs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Sep, 2022\n            \n            \n                Navigating Graphs\n                An introduction to navigating graphs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Sep, 2022\n            \n            \n                Navigating Graphs (BFS)\n                Breadth-First Search • Correctness • Analysis of Running Time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • Pre-Post Intervals\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Oct, 2022\n            \n            \n                DFS Applications\n                Topological Sort (Algorithm)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Oct, 2022\n            \n            \n                DFS Applications\n                Postorder • Preorder • Topological Sort (Analysis)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Oct, 2022\n            \n            \n                Shortest Paths\n                A teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Oct, 2022\n            \n            \n                Heaps\n                Selection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Nov, 2022\n            \n            \n                Heaps\n                The Heap Property • Insert • FindMin • ExtractMin\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2022\n            \n            \n                Heaps\n                Representing Heaps with Arrays\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Nov, 2022\n            \n            \n                Heaps Revisited\n                Analysis • Heapify is Linear Time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees • Insertion • Deletion\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees Height Analysis\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2022\n            \n            \n                Recap\n                Review of BFS, DFS, Heaps, and Balanced BSTs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 0\n                \n            \n            \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Nov, 2022\n            \n            \n                Lab Quiz 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                28 Sep, 2022\n            \n            \n                MidSem Exam\n                \n            \n            \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Nov, 2022\n            \n            \n                EndSem Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-ES242/index.html#es242.-data-structures-and-algorithms-i.",
    "href": "2022/03-ES242/index.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES 242 | Aug-Nov 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nData structures give us principled ways to stow away information. It’s important to do this nicely based on what you want to do with the information.\nFor example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\nThroughout this course, we will try to make sense of trade-offs.\n\n\nsequential data (arrays, dynamic arrays, linked lists and variants) • dequeues, stacks, queues • graph representations • graph traversals (BFS/DFS) and applications (connected components, bipartiteness, topological sort) • searching and sorting • heaps • BSTs • (2,3)-trees\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is aimed at undergraduates in their first or second year, as a first introduction to data structures and algorithms.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is largely self-contained. Working familiarity with a programming language will be useful for the labs, where solutions are expected to be written out in C.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nOpen Data Structures by Pat Morin\nLecture notes by John Bullinaria\nData Structures Using C & C++ by Aaron M. Tenebaum; Moshe J. Augenstein; Yedidyah Lansam\nData Structures and Algorithms by A. Aho, J. Hopcroft, J. Ullman\nAlgorithms by Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures on Tuesdays and Wednesdays • 10AM — 11AM • 1/101 Labs on Wednesdays • 4PM — 6PM • 7/108 and 7/109\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\n\n\nBy appointment.\n\n\n\n\nHarshil Mittal (mittal_harshil@iitgn.ac.in)\nSaraswati Nanoti (nanoti_saraswati@iitgn.ac.in)\n\n\n\n\n\nKsheer Agrawal (ksheer.agrawal@iitgn.ac.in)\nProgyan Das (progyan.das@iitgn.ac.in)\nNipun Mahajan (mahajan.n@iitgn.ac.in)\nYash More (yash.mh@iitgn.ac.in)\n\n\n\n\n\nXhitij Choudhary (xhitij.cm@iitgn.ac.in)\nBhavesh Jain (bhavesh.jain@iitgn.ac.in)\n\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nWeekly Assignments on Google Classroom. 2 * [top 10] = 20\nLab Assignments on repl.it. 1 * [top 10] = 10\nClass participation via Mentimeter. 0.5 points per class capped at 10\nMidsem Exam. 10 (lab) + 10 (theory) = 20\nFinal Exam. 10 (lab) + 15 (theory) = 25\nFour quizzes (two theory, two lab & top 3 outcomes counted). 3 * 5 = 15\n\n\n\n\n\n\n\n\n\n\nRegistration\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nIf you are not from IITGN and are interested in taking up the course, then please send me an email.\nRegistration for the course is now closed. The next edition of this course will be offered in the Jan - Apr 2023 semester.\n\n\n\nNote: contents being actively updated at the time of this writing. Enroled students will find all materials in the Google classroom for this course. Items marked {{&lt; bi alarm color=\"indianred\" &gt;}} are coming soon!\n\nLecturesLabsMentimeterAssignmentsQuizzesExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2022\n1. Introduction to Data Structures\nData Structures - philosophy and examples • Representing games\n\n\n\n\n\n03 Aug, 2022\n2. Introduction to Data Structures\nRepresenting Sequential Data • Arrays • Lists\n\n\n\n\n\n09 Aug, 2022\nInstitute Holiday\n\n\n\n\n\n\n10 Aug, 2022\nQuiz 0 (Ungraded)\n\n\n\n\n\n\n16 Aug, 2022\n3. Representing Graphs\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n17 Aug, 2022\n4. Representing Graphs (contd.)\nAdjacency Lists • Adjacency Matrices • Edge Lists\n\n\n\n\n\n23 Aug, 2022\n5. Dequeues\nIntroducing the cardstack data structure • The Gilbreath Shuffle\n\n\n\n\n\n24 Aug, 2022\n6. Dequeues\nQueues and Stacks as special cases of Dequeues\n\n\n\n\n\n30 Aug, 2022\n7. Euler Tours\nEuler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n\n\n\n\n\n31 Aug, 2022\n8. Euler Tours\nComputing Euler Tours • Hierholzer's algorithm\n\n\n\n\n\n06 Sep, 2022\n9. Stable Marriages\nThe Stable Marriage Problem • Gale-Shapley Algorithm\n\n\n\n\n\n07 Sep, 2022\n10. Stable Marriages\nProof of Termination • Bounding the number of proposals • Proving the stability of the output\n\n\n\n\n\n13 Sep, 2022\n11. Recap Lecture\nReview of arrays, linked lists, stacks, queues, and graphs\n\n\n\n\n\n14 Sep, 2022\nTheory Quiz 01\n\n\n\n\n\n\n20 Sep, 2022\n12. Navigating Graphs\nAn introduction to navigating graphs\n\n\n\n\n\n21 Sep, 2022\n13. Navigating Graphs (BFS)\nBreadth-First Search • Correctness • Analysis of Running Time\n\n\n\n\n\n11 Oct, 2022\n14. Navigating Graphs (DFS)\nDepth-First Search • Pre-Post Intervals\n\n\n\n\n\n12 Oct, 2022\n15. Navigating Graphs (DFS)\nDepth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n\n\n\n\n\n18 Oct, 2022\n16. DFS Applications\nTopological Sort (Algorithm)\n\n\n\n\n\n19 Oct, 2022\n17. DFS Applications\nPostorder • Preorder • Topological Sort (Analysis)\n\n\n\n\n\n25 Oct, 2022\n18. Shortest Paths\nA teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n\n\n\n\n\n26 Oct, 2022\n19. Heaps\nSelection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n\n\n\n\n\n01 Nov, 2022\n20. Heaps\nThe Heap Property • Insert • FindMin • ExtractMin\n\n\n\n\n\n02 Nov, 2022\n21. Heaps\nRepresenting Heaps with Arrays\n\n\n\n\n\n08 Nov, 2022\nInstitute Holiday \n\n\n\n\n\n\n09 Nov, 2022\nTheory Quiz 02\n\n\n\n\n\n\n15 Nov, 2022\n22. Heaps Revisited\nAnalysis • Heapify is Linear Time\n\n\n\n\n\n16 Nov, 2022\n23. Balanced Binary Search Trees\n(2,3)-Trees • Insertion • Deletion\n\n\n\n\n\n22 Nov, 2022\n24. Balanced Binary Search Trees\n(2,3)-Trees Height Analysis\n\n\n\n\n\n23 Nov, 2022\n25. Recap\nReview of BFS, DFS, Heaps, and Balanced BSTs\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                03 Aug, 2022\n            \n            \n                W01. Representations\n                Finding the Coefficient Finding the Coefficient Redux Game of Trust Game of Trust [Open Ended] Validating a Self-Working Card Trick [Open Ended]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                W02. C Warmup and Recap\n                Four Points  Waking Up  Ratings  Meta Tic-Tac-Toe [Open Ended]\n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Aug, 2022\n            \n            \n                W03. Representing Graphs\n                Swapping Variables  Adjacency Matrix  Edge List  Adjacency List  Getting Even\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Aug, 2022\n            \n            \n                W04. The Cardstack\n                Print alternate cards  Reverse a list of numbers  Cut shuffle  Overhand Shuffle  de Bruijn sequences\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                31 Aug, 2022\n            \n            \n                W05. Euler Tours and de Bruijn Sequences\n                Euler Circuit Sanity Check  Highway Orientation  Edge Orientation Puzzle   Generate de Bruin Sequences\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Sep, 2022\n            \n            \n                W06. Stable Marriages\n                Merge List  Insert Node  Reverse The List  Count Blocking Pairs  Stable Matchings\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                14 Sep, 2022\n            \n            \n                No Lab\n                Lab Quiz 1 (held on 17 Sep, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Sep, 2022\n            \n            \n                W08. Navigating Graphs (BFS)\n                Find My Ancestor!  Longest Path  Unique Servers  Run a Marathon  Just BFS\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Oct, 2022\n            \n            \n                W09. Practice Lab\n                Cop and Robber  Balanced Brackets  Whispering Joker  Time Series  String Game  Lab Exam (held on 15 Oct, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Oct, 2022\n            \n            \n                W10. Navigating Graphs (DFS)\n                2-Colorable Graphs  Topological Sort  Is DAG?  Get Food!\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Oct, 2022\n            \n            \n                W11. Graph Traversal Applications\n                Learning Languages  Permutation Tree  Make Walls  Palindromic Crosswords\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2022\n            \n            \n                W12. Heaps\n                Heapify  HeapSort  The Unity Project  Largest Number\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                09 Nov, 2022\n            \n            \n                W13. Practice Lab\n                Visit Me First  Visit Me Last!  Sort a Tree  Predicting Possibility  Can You Register?\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2022\n            \n            \n                No Lab\n                Lab Quiz 2 (held on 20 Nov, 2022)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2022\n            \n            \n                W15. Recap Lab\n                Review of Problems  On Writing Tests  Benchmarking\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nThese questions are integrated into the lectures and may not make sense standalone. Please check the slides and/or notes for additional context.\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                02 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Data Structures - philosophy and examples • Representing games\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Aug, 2022\n            \n            \n                Introduction to Data Structures\n                Representing Sequential Data • Arrays • Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Aug, 2022\n            \n            \n                Representing Graphs\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                17 Aug, 2022\n            \n            \n                Representing Graphs (contd.)\n                Adjacency Lists • Adjacency Matrices • Edge Lists\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Aug, 2022\n            \n            \n                Dequeues\n                Introducing the cardstack data structure • The Gilbreath Shuffle\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                24 Aug, 2022\n            \n            \n                Dequeues\n                Queues and Stacks as special cases of Dequeues\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Aug, 2022\n            \n            \n                Euler Tours\n                Euler Tour Demonstration • Card trick • de Bruijn sequences • Constructing de Bruijn sequences using Euler Tours\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                31 Aug, 2022\n            \n            \n                Euler Tours\n                Computing Euler Tours • Hierholzer's algorithm\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                06 Sep, 2022\n            \n            \n                Stable Marriages\n                The Stable Marriage Problem • Gale-Shapley Algorithm\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                07 Sep, 2022\n            \n            \n                Stable Marriages\n                Proof of Termination • Bounding the number of proposals • Proving the stability of the output\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                13 Sep, 2022\n            \n            \n                Recap Lecture\n                Review of arrays, linked lists, stacks, queues, and graphs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Sep, 2022\n            \n            \n                Navigating Graphs\n                An introduction to navigating graphs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                21 Sep, 2022\n            \n            \n                Navigating Graphs (BFS)\n                Breadth-First Search • Correctness • Analysis of Running Time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                11 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • Pre-Post Intervals\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Oct, 2022\n            \n            \n                Navigating Graphs (DFS)\n                Depth-First Search • DFS-based classification of vertices • DFS-based classificaton of edges • Cycles and backedges\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                18 Oct, 2022\n            \n            \n                DFS Applications\n                Topological Sort (Algorithm)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                19 Oct, 2022\n            \n            \n                DFS Applications\n                Postorder • Preorder • Topological Sort (Analysis)\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                25 Oct, 2022\n            \n            \n                Shortest Paths\n                A teaser the challenges in extending BFS to weighted graphs • Pseudopolynomial running time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                26 Oct, 2022\n            \n            \n                Heaps\n                Selection Sort • Supporting only Insert and FindMin • The challenge of ExtractMin\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Nov, 2022\n            \n            \n                Heaps\n                The Heap Property • Insert • FindMin • ExtractMin\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2022\n            \n            \n                Heaps\n                Representing Heaps with Arrays\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                15 Nov, 2022\n            \n            \n                Heaps Revisited\n                Analysis • Heapify is Linear Time\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees • Insertion • Deletion\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Nov, 2022\n            \n            \n                Balanced Binary Search Trees\n                (2,3)-Trees Height Analysis\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2022\n            \n            \n                Recap\n                Review of BFS, DFS, Heaps, and Balanced BSTs\n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 0\n                \n            \n            \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Aug, 2022\n            \n            \n                Quiz 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Nov, 2022\n            \n            \n                Lab Quiz 2\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                28 Sep, 2022\n            \n            \n                MidSem Exam\n                \n            \n            \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                30 Nov, 2022\n            \n            \n                EndSem Exam\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-ES242/midsem-questions.html",
    "href": "2022/03-ES242/midsem-questions.html",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex \\(s\\) and the robber is at a vertex \\(t\\). (You may assume that \\(s\\) and \\(t\\) are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices \\(u_1, \\ldots, u_n\\) and edges \\((u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n)\\). Suppose the cop starts at \\(u_1\\) and the robber starts at \\(u_n\\). Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is \\(n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n-1\\).\n⭕️ The cop wins this game and the number of moves is \\(2(n-1)\\).\n[3 marks] Suppose the graph G has a cycle on the vertices v\\(v_1, v_2, \\ldots, v_k\\)and these are the only vertices that belong to any cycle in G. The robber is initially on a vertex u\\(u\\)and the closest vertex on the cycle is v\\(v_1\\) via the path (\\((u,p),(p,q),(q,v_1)\\) The cop is initially on a vertex w\\(w\\)and the closest vertex on the cycle is v\\(v_n\\) via the path (\\((w,r),(r,v_n)\\) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n\\[45,-4,32,0\\]\nthe \\(32\\) is right where it will be in the final sorted output:\n\\[-4,0,32,45\\]\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child \\(k\\) has value \\(v_k\\) for their bundle. Each child also has a value for all the other bundles: so let us say that child \\(k\\) has value \\(v_{k,\\ell}\\) for the bundle that was given to child \\(\\ell\\).\nWe say that child \\(a\\) is jealous of child \\(b\\) if \\(v_{a,b} &gt; v_a\\), i.e, s/he values the bundle given to \\(b\\) more than the bundle that s/he has.\nConsider the following directed graph \\(G\\). Introduce one vertex for every child, and add an edge from \\(a\\) to \\(b\\) if \\(a\\) is jealous of \\(b\\).\n\n[2 marks] Suppose \\(G\\) has a directed cycle \\(u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1\\). Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between \\(u_1\\) and \\(u_2\\), between \\(u_2\\) and \\(u_3\\), and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from \\(u\\) to \\(v\\) for any pair of vertices \\(u\\) and \\(v\\).\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most \\(6n\\).\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "2022/03-ES242/midsem-questions.html#es242.-data-structures-and-algorithms-i.",
    "href": "2022/03-ES242/midsem-questions.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex \\(s\\) and the robber is at a vertex \\(t\\). (You may assume that \\(s\\) and \\(t\\) are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices \\(u_1, \\ldots, u_n\\) and edges \\((u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n)\\). Suppose the cop starts at \\(u_1\\) and the robber starts at \\(u_n\\). Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is \\(n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n-1\\).\n⭕️ The cop wins this game and the number of moves is \\(2(n-1)\\).\n[3 marks] Suppose the graph G has a cycle on the vertices v\\(v_1, v_2, \\ldots, v_k\\)and these are the only vertices that belong to any cycle in G. The robber is initially on a vertex u\\(u\\)and the closest vertex on the cycle is v\\(v_1\\) via the path (\\((u,p),(p,q),(q,v_1)\\) The cop is initially on a vertex w\\(w\\)and the closest vertex on the cycle is v\\(v_n\\) via the path (\\((w,r),(r,v_n)\\) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n\\[45,-4,32,0\\]\nthe \\(32\\) is right where it will be in the final sorted output:\n\\[-4,0,32,45\\]\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child \\(k\\) has value \\(v_k\\) for their bundle. Each child also has a value for all the other bundles: so let us say that child \\(k\\) has value \\(v_{k,\\ell}\\) for the bundle that was given to child \\(\\ell\\).\nWe say that child \\(a\\) is jealous of child \\(b\\) if \\(v_{a,b} &gt; v_a\\), i.e, s/he values the bundle given to \\(b\\) more than the bundle that s/he has.\nConsider the following directed graph \\(G\\). Introduce one vertex for every child, and add an edge from \\(a\\) to \\(b\\) if \\(a\\) is jealous of \\(b\\).\n\n[2 marks] Suppose \\(G\\) has a directed cycle \\(u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1\\). Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between \\(u_1\\) and \\(u_2\\), between \\(u_2\\) and \\(u_3\\), and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from \\(u\\) to \\(v\\) for any pair of vertices \\(u\\) and \\(v\\).\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most \\(6n\\).\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "2022/csresearch.html",
    "href": "2022/csresearch.html",
    "title": "CS Research 101 | Shashank Srikant",
    "section": "",
    "text": "— Shashank Srikant\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWhen starting off their undergrad degrees in science and engineering, most are fueled by an idealism to do great science. However, no formal resources tell us what research—an established path to great science and engineering—is all about, and how one can get started. As a result, many don’t end up figuring out these details, have no idea what the journey promises to offer, and as a consequence, move on to other well-documented jobs and careers. While there’s nothing wrong with taking up well-documented careers, academia and scholarship loses out on quality talent.\nIn another extreme, among those few who are exposed to the idea of research while still in undergrad, there exists a frenzy to apply to graduate programs by the end of undergrad. And to achieve this, students tend to optimize working on projects which will land them ‘the best possible’ publications and letters from professors. While few successfully discover their interests this way, it generally fails as an approach.\nThis course aims to fast-track the process of learning more about research-first graduate programs and/or jobs. It will nudge you to introspect whether problem solving and research is something you will enjoy, and provide some concrete steps for your discovery. It is not designed to merely provide instructions on applying successfully to graduate programs or advanced degrees. Rather, it aims to introduce you to the realities of doing research, which should in turn help you gauge your preparedness for graduate school or a career in research.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nShashank is currently a Ph.D. candidate in computer science at the CS & AI Lab (CSAIL), in the department of Electrical engineering and Computer science (EECS) at MIT. He is advised by Una-May O’Reilly. His research interests are at the intersection of machine learning, program analysis, and cognitive neuroscience. He has published his work at top-tier academic venues and has authored multiple patents.\nPrior to his Ph.D. studies, he was a senior researcher at Aspiring Minds’ research lab, where he helped build, deploy, and manage a number of innovative products involving machine learning. These products are used by &gt;1M job applicants across the world today. In this role, he also helped organize international workshops, led academic collaborations, and helped set up communities in India to participate and engage in ML and data science (http://www.datasciencekids.org, http://ml-india.org).\nHe is also interested in governance, and science education and policy. To understand the nuances of how state governments deliver benefits to the last-mile, he worked with Seva Setu, an organization which aims to bridge the gap between governments and people, for a year in rural Bihar in India.\nDetails on his work can be found on his webpage.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n31st October – 5th November • Timing: 6:30PM to 8:30PM • Mode: Online (over Zoom)\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly: the only pre-requisite is a willingness to commit time and curiosity about research pursuits in computer science (broadly interpreted).\nThe course is designed for undergraduates in computer science and allied areas in any year looking to plan out their first or second research projects, however, participation is not restricted and all are welcome.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught over Zoom and will involve several hands-on assignments. The course has the following three sections, with two modules in each section:\n1.The first section focuses on the various motivations for pursuing research projects, the wrong reasons to take up research, exposure to different research-related careers available.\n2.The second section is about the mechanics of getting started with your first research(-ish) project. We introduce some common set of skills every researcher benefits from—taking initiative, reading and writing code, knowing domain-specific tools, parsing papers, communicating over email, and presenting your work. Also learn about the balances you will likely have to strike as you go along, and prepare with us for battles like imposter syndrome or loneliness you may face.\n\nThe third section covers exploring and approaching research opportunities after having cleared the first two sections. We will have pointers to generic opportunities that you can consider applying to. We will also leave you with suggestions for how to level up from after your first research apprenticeship, including information about preparing for graduate school, and discussions about relevant career options within and beyond academia. Pre-class reading: Each lecture will have a recommended short video or text we expect students to watch/read before attending class.\n\nFinal assessment: The final assessment will involve identifying a project relevant to your interest and skills, and drafting an email expressing your interest in getting started with it.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to equip students with toolkits to — (a) determine if research projects are well-aligned with their interests and aspirations, and (b) prepare for relevant research opportunities.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants will be well-positioned to determine if a career in research is for them; and if yes, also to find and pursue relevant research opportunities.\n\n\n\n\n\n\n\nCourse materials also available from here.\n\n\n\nTopics\nResources\n\n\n\n\nDay 1: Motivation::Module 1 - Why research?\n[Notes], [Survey], [Youtube], [Slides]\n\n\nDay 2: Motivation::Module 2 - The fundamentals\n[Notes], [Reading: Taking initative], [Youtube], [Slides]\n\n\nDay 3: Mechanics::Module 3 - Skills 1\n[Notes], [Reading: Working with a professor], [Youtube], [Slides]\n\n\nDay 4: Mechanics::Module 4 - Skills 2\n[Notes], [Reading: Writing emails], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 5 - Next steps\n[Notes], [Reading: CS PhD application FAQs], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 6 - Resources\n[Notes]\n\n\n\n\n\n\n\n\nShare the URL to your webpage.\nIf you do not have a webpage, make a simple one on Github pages. Let the page just have your name: there’s no need to fill it with any content. See the corresponding course webpage for relevant resources to get started with Github pages.\nMention the names and web URLs of 3 professors in India who you think do interesting work. Importantly, for each professor you list, mention in 1-2 sentences why you selected them. This may be informed by your romantic notion of interests in a few areas of CS – that’s okay.\nPick one paper authored by any one professor you listed in (2) that they have published in the last five years. What area of computer science is this paper from?\nWhere was this paper published? Mention the venue and year.\nRead the abstract of this paper and describe in 3-4 sentences your understanding of what the paper achieves. You do not have to read the whole paper. Attempt to just understand broadly what the paper achieves.\nAsk one question about this paper. This may have been answered in the paper—you do not have to read and understand the whole paper to see if they have already answered it. We want you to demonstrate that you have thought about the content of the paper.\nUse CS Rankings to find out the top publishing venues in the area the paper you read belongs to (e.g. databases, machine vision, etc.).\nUsing CS Rankings, find out the best venues in the following fields of computer science:\n\nComputer architecture\nHuman-computer interface\nGraphics and computational geometry\nComputing education\n\nSee this section in Module 6 of our course webpage for a list of popular areas in computer science.\nFor each area listed, we also document a researcher’s journey who specializes in that area.\nWrite out an email to this professor expressing an interest in working on a project related to this paper. Do not send this email to the professor. Just share the draft of this email with us. You can assume you have already done 1-2 relevant projects and courses even if you haven’t–it’s fine to reference these fictitious experiences in your email to make a case for yourself.\n\nSubmit your responses here."
  },
  {
    "objectID": "2022/csresearch.html#cs-research-101",
    "href": "2022/csresearch.html#cs-research-101",
    "title": "CS Research 101 | Shashank Srikant",
    "section": "",
    "text": "— Shashank Srikant\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWhen starting off their undergrad degrees in science and engineering, most are fueled by an idealism to do great science. However, no formal resources tell us what research—an established path to great science and engineering—is all about, and how one can get started. As a result, many don’t end up figuring out these details, have no idea what the journey promises to offer, and as a consequence, move on to other well-documented jobs and careers. While there’s nothing wrong with taking up well-documented careers, academia and scholarship loses out on quality talent.\nIn another extreme, among those few who are exposed to the idea of research while still in undergrad, there exists a frenzy to apply to graduate programs by the end of undergrad. And to achieve this, students tend to optimize working on projects which will land them ‘the best possible’ publications and letters from professors. While few successfully discover their interests this way, it generally fails as an approach.\nThis course aims to fast-track the process of learning more about research-first graduate programs and/or jobs. It will nudge you to introspect whether problem solving and research is something you will enjoy, and provide some concrete steps for your discovery. It is not designed to merely provide instructions on applying successfully to graduate programs or advanced degrees. Rather, it aims to introduce you to the realities of doing research, which should in turn help you gauge your preparedness for graduate school or a career in research.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nShashank is currently a Ph.D. candidate in computer science at the CS & AI Lab (CSAIL), in the department of Electrical engineering and Computer science (EECS) at MIT. He is advised by Una-May O’Reilly. His research interests are at the intersection of machine learning, program analysis, and cognitive neuroscience. He has published his work at top-tier academic venues and has authored multiple patents.\nPrior to his Ph.D. studies, he was a senior researcher at Aspiring Minds’ research lab, where he helped build, deploy, and manage a number of innovative products involving machine learning. These products are used by &gt;1M job applicants across the world today. In this role, he also helped organize international workshops, led academic collaborations, and helped set up communities in India to participate and engage in ML and data science (http://www.datasciencekids.org, http://ml-india.org).\nHe is also interested in governance, and science education and policy. To understand the nuances of how state governments deliver benefits to the last-mile, he worked with Seva Setu, an organization which aims to bridge the gap between governments and people, for a year in rural Bihar in India.\nDetails on his work can be found on his webpage.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n31st October – 5th November • Timing: 6:30PM to 8:30PM • Mode: Online (over Zoom)\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe course material is beginner-friendly: the only pre-requisite is a willingness to commit time and curiosity about research pursuits in computer science (broadly interpreted).\nThe course is designed for undergraduates in computer science and allied areas in any year looking to plan out their first or second research projects, however, participation is not restricted and all are welcome.\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\nThe course will be taught over Zoom and will involve several hands-on assignments. The course has the following three sections, with two modules in each section:\n1.The first section focuses on the various motivations for pursuing research projects, the wrong reasons to take up research, exposure to different research-related careers available.\n2.The second section is about the mechanics of getting started with your first research(-ish) project. We introduce some common set of skills every researcher benefits from—taking initiative, reading and writing code, knowing domain-specific tools, parsing papers, communicating over email, and presenting your work. Also learn about the balances you will likely have to strike as you go along, and prepare with us for battles like imposter syndrome or loneliness you may face.\n\nThe third section covers exploring and approaching research opportunities after having cleared the first two sections. We will have pointers to generic opportunities that you can consider applying to. We will also leave you with suggestions for how to level up from after your first research apprenticeship, including information about preparing for graduate school, and discussions about relevant career options within and beyond academia. Pre-class reading: Each lecture will have a recommended short video or text we expect students to watch/read before attending class.\n\nFinal assessment: The final assessment will involve identifying a project relevant to your interest and skills, and drafting an email expressing your interest in getting started with it.\n\n\n\n\n\n\n\n\n\nObjectives\n\n\n\n\n\nThe course aims to equip students with toolkits to — (a) determine if research projects are well-aligned with their interests and aspirations, and (b) prepare for relevant research opportunities.\n\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n\nThe participants will be well-positioned to determine if a career in research is for them; and if yes, also to find and pursue relevant research opportunities.\n\n\n\n\n\n\n\nCourse materials also available from here.\n\n\n\nTopics\nResources\n\n\n\n\nDay 1: Motivation::Module 1 - Why research?\n[Notes], [Survey], [Youtube], [Slides]\n\n\nDay 2: Motivation::Module 2 - The fundamentals\n[Notes], [Reading: Taking initative], [Youtube], [Slides]\n\n\nDay 3: Mechanics::Module 3 - Skills 1\n[Notes], [Reading: Working with a professor], [Youtube], [Slides]\n\n\nDay 4: Mechanics::Module 4 - Skills 2\n[Notes], [Reading: Writing emails], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 5 - Next steps\n[Notes], [Reading: CS PhD application FAQs], [Youtube], [Slides]\n\n\nDay 5: Begin journey::Module 6 - Resources\n[Notes]\n\n\n\n\n\n\n\n\nShare the URL to your webpage.\nIf you do not have a webpage, make a simple one on Github pages. Let the page just have your name: there’s no need to fill it with any content. See the corresponding course webpage for relevant resources to get started with Github pages.\nMention the names and web URLs of 3 professors in India who you think do interesting work. Importantly, for each professor you list, mention in 1-2 sentences why you selected them. This may be informed by your romantic notion of interests in a few areas of CS – that’s okay.\nPick one paper authored by any one professor you listed in (2) that they have published in the last five years. What area of computer science is this paper from?\nWhere was this paper published? Mention the venue and year.\nRead the abstract of this paper and describe in 3-4 sentences your understanding of what the paper achieves. You do not have to read the whole paper. Attempt to just understand broadly what the paper achieves.\nAsk one question about this paper. This may have been answered in the paper—you do not have to read and understand the whole paper to see if they have already answered it. We want you to demonstrate that you have thought about the content of the paper.\nUse CS Rankings to find out the top publishing venues in the area the paper you read belongs to (e.g. databases, machine vision, etc.).\nUsing CS Rankings, find out the best venues in the following fields of computer science:\n\nComputer architecture\nHuman-computer interface\nGraphics and computational geometry\nComputing education\n\nSee this section in Module 6 of our course webpage for a list of popular areas in computer science.\nFor each area listed, we also document a researcher’s journey who specializes in that area.\nWrite out an email to this professor expressing an interest in working on a project related to this paper. Do not send this email to the professor. Just share the draft of this email with us. You can assume you have already done 1-2 relevant projects and courses even if you haven’t–it’s fine to reference these fictitious experiences in your email to make a case for yourself.\n\nSubmit your responses here."
  },
  {
    "objectID": "2022/03-SC310/index.html",
    "href": "2022/03-SC310/index.html",
    "title": "SC310 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/03-SC310/index.html#sc310.",
    "href": "2022/03-SC310/index.html#sc310.",
    "title": "SC310 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2022/04-GIAN/notes/D4L1/index.html",
    "href": "2022/04-GIAN/notes/D4L1/index.html",
    "title": "191014K02 | Day 4 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\nHere’s our key tool for the day!\n\n\n\n\n\n\nIsolation Lemma\n\n\n\nLet \\(U\\) be a universe with \\(|U|=n\\) and let \\(\\cal F\\) be a family of sets over \\(U\\). Pick a random weight function \\(w: U \\rightarrow\\{1, \\cdots ,W\\}\\). Then:\n\\[\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant \\frac{n}{W}\\]\n\n\nCall an element \\(u\\) critical if:\n\n\\(u\\) is in some minimum weight set, and\nif \\(w(u)\\) is increased by 1 then \\(u\\) is no longer in any minimum weight set."
  },
  {
    "objectID": "2022/04-GIAN/notes/D4L1/index.html#k02-day-4-lecture-1",
    "href": "2022/04-GIAN/notes/D4L1/index.html#k02-day-4-lecture-1",
    "title": "191014K02 | Day 4 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\nHere’s our key tool for the day!\n\n\n\n\n\n\nIsolation Lemma\n\n\n\nLet \\(U\\) be a universe with \\(|U|=n\\) and let \\(\\cal F\\) be a family of sets over \\(U\\). Pick a random weight function \\(w: U \\rightarrow\\{1, \\cdots ,W\\}\\). Then:\n\\[\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant \\frac{n}{W}\\]\n\n\nCall an element \\(u\\) critical if:\n\n\\(u\\) is in some minimum weight set, and\nif \\(w(u)\\) is increased by 1 then \\(u\\) is no longer in any minimum weight set."
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L2/index.html",
    "href": "2022/04-GIAN/notes/D1L2/index.html",
    "title": "191014K02 | Day 1 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\n\n\n\nAn integer linear program involves \\(n\\) variables \\(x_1, x_2, \\ldots, x_n \\in \\mathbb{Z}\\) and a linear objective function to be optimized.\nIn particular, we would like to minimize or maximize a function that looks like: \\[\\sum_{i = 1}^n {\\color{indianred}c_i} x_i,\\]\nsubject to \\(m\\) linear inequalities:\n\\[\\begin{aligned}\na_1^1 x_1+a_2^1 x_2+ \\cdots + a_i^1 x_i + \\cdots+a_n^1 x_n & \\leqslant b_1 \\\\\na_1^2 x_1+a_2^2 x_2+ \\cdots + a_i^2 x_i + \\cdots+a_n^2 x_n & \\leqslant b_2 \\\\\n\\vdots & \\\\\na_1^j x_1+a_2^j x_2+ \\cdots + a_i^j x_i + \\cdots+a_n^3 x_n & \\leqslant b_j\\\\\n\\vdots & \\\\\na_1^m x_1+a_2^m x_2+ \\cdots + a_i^m x_i + \\cdots+a_n^m x_n & \\leqslant b_m.\n\\end{aligned}\\]\nHere \\({\\color{indianred}c_1,\\cdots,c_n}\\) are some constants in \\(\\mathbb{Z}\\) or \\(\\mathbb{Q}\\)\nSo given the \\(a_i^j\\)’s as input \\((1 \\leqslant i \\leqslant n; 1 \\leqslant j \\leqslant m)\\), the goal is to set the \\(x_i\\)’s such that:\n\nall the inequalities are satisfied, and\nthe objective function is optimized1."
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L2/index.html#k02-day-1-lecture-2",
    "href": "2022/04-GIAN/notes/D1L2/index.html#k02-day-1-lecture-2",
    "title": "191014K02 | Day 1 Lecture 2",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L2/index.html#integer-linear-programs",
    "href": "2022/04-GIAN/notes/D1L2/index.html#integer-linear-programs",
    "title": "191014K02 | Day 1 Lecture 2",
    "section": "",
    "text": "An integer linear program involves \\(n\\) variables \\(x_1, x_2, \\ldots, x_n \\in \\mathbb{Z}\\) and a linear objective function to be optimized.\nIn particular, we would like to minimize or maximize a function that looks like: \\[\\sum_{i = 1}^n {\\color{indianred}c_i} x_i,\\]\nsubject to \\(m\\) linear inequalities:\n\\[\\begin{aligned}\na_1^1 x_1+a_2^1 x_2+ \\cdots + a_i^1 x_i + \\cdots+a_n^1 x_n & \\leqslant b_1 \\\\\na_1^2 x_1+a_2^2 x_2+ \\cdots + a_i^2 x_i + \\cdots+a_n^2 x_n & \\leqslant b_2 \\\\\n\\vdots & \\\\\na_1^j x_1+a_2^j x_2+ \\cdots + a_i^j x_i + \\cdots+a_n^3 x_n & \\leqslant b_j\\\\\n\\vdots & \\\\\na_1^m x_1+a_2^m x_2+ \\cdots + a_i^m x_i + \\cdots+a_n^m x_n & \\leqslant b_m.\n\\end{aligned}\\]\nHere \\({\\color{indianred}c_1,\\cdots,c_n}\\) are some constants in \\(\\mathbb{Z}\\) or \\(\\mathbb{Q}\\)\nSo given the \\(a_i^j\\)’s as input \\((1 \\leqslant i \\leqslant n; 1 \\leqslant j \\leqslant m)\\), the goal is to set the \\(x_i\\)’s such that:\n\nall the inequalities are satisfied, and\nthe objective function is optimized1."
  },
  {
    "objectID": "2022/04-GIAN/notes/D1L2/index.html#footnotes",
    "href": "2022/04-GIAN/notes/D1L2/index.html#footnotes",
    "title": "191014K02 | Day 1 Lecture 2",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ni.e, maximized or minimized↩︎"
  },
  {
    "objectID": "2022/04-GIAN/notes/D4L2/index.html",
    "href": "2022/04-GIAN/notes/D4L2/index.html",
    "title": "191014K02 | Day 4 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D4L2/index.html#k02-day-4-lecture-1",
    "href": "2022/04-GIAN/notes/D4L2/index.html#k02-day-4-lecture-1",
    "title": "191014K02 | Day 4 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D5L1/index.html",
    "href": "2022/04-GIAN/notes/D5L1/index.html",
    "title": "191014K02 | Day 5 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\n\n\n\n\n\n\nTournament Feedback Vertex Set (TFVS)\n\n\n\nInput: A tournament \\(T, w: V(T) \\rightarrow \\mathbb{N}\\).\nTask: Find \\(S \\subseteq V(T)\\) s.t \\(T - S\\) is acyclic & \\({\\color{indianred}w(S):=\\sum_{\\sigma \\in S} w(v)}\\) is minimized.\n\n\nSuppose:\n\\[\n|\\text{OPT}| \\geqslant n \\cdot 0.6\n\\]"
  },
  {
    "objectID": "2022/04-GIAN/notes/D5L1/index.html#k02-day-5-lecture-1",
    "href": "2022/04-GIAN/notes/D5L1/index.html#k02-day-5-lecture-1",
    "title": "191014K02 | Day 5 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Work in progress.\n\n\n\n\n\n\n\nTournament Feedback Vertex Set (TFVS)\n\n\n\nInput: A tournament \\(T, w: V(T) \\rightarrow \\mathbb{N}\\).\nTask: Find \\(S \\subseteq V(T)\\) s.t \\(T - S\\) is acyclic & \\({\\color{indianred}w(S):=\\sum_{\\sigma \\in S} w(v)}\\) is minimized.\n\n\nSuppose:\n\\[\n|\\text{OPT}| \\geqslant n \\cdot 0.6\n\\]"
  },
  {
    "objectID": "2022/04-GIAN/notes/D3L2/index.html",
    "href": "2022/04-GIAN/notes/D3L2/index.html",
    "title": "191014K02 | Day 3 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/notes/D3L2/index.html#k02-day-3-lecture-2",
    "href": "2022/04-GIAN/notes/D3L2/index.html#k02-day-3-lecture-2",
    "title": "191014K02 | Day 3 Lecture 2",
    "section": "",
    "text": "Back to the Course Page\nComing Soon."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D1Q/index.html",
    "href": "2022/04-GIAN/tutorials/D1Q/index.html",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\n\n\n\n\n\n\\(c\\)-approximate mincut\n\n\n\nA \\(c\\)-approximate mincut is a set of at most \\(cr\\) edges if \\(r\\) is the number of edges in a mincut.\n\n\n\n\n\n\n\n\nmin \\(k\\)-way cut\n\n\n\nA minimum k-cut is a smallest set of edges whose removal would partition the graph to at least \\(k\\) connected components\n\n\n\n\n\n\n\n\n\\(G(n,p)\\) graphs\n\n\n\nThe \\(G(n, p)\\) model, due to Erdös and Rényi, has two parameters, \\(n\\) and \\(p\\). Here \\(n\\) is the number of vertices of the graph and \\(p\\) is the edge probability. For each pair of distinct vertices, \\(v\\) and \\(w, p\\) is the probability that the edge \\((v, w)\\) is present. The presence of each edge is statistically independent of all other edges. The graph-valued random variable with these parameters is denoted by \\(G(n, p)\\). When we refer to “the graph \\(G(n, p)\\)”, we mean one realization of the random variable.\n\n\n\n\n\n\nGeneralize the mincut argument to \\(c\\)-approximate mincuts.\nGeneralize the mincut argument to min \\(k\\)-way cut.\nProve #min \\(k\\)-cuts is at most \\(n^{O(k)}\\).\nShow that \\(G(n, 1/2)\\) graphs have:\n\nmany cliques of size \\(2 \\log n-o(\\log n)\\) in expectation, and\nno cliques of size \\(2 \\log n+o(\\log n)\\) in expectation (and with high probability).\n\nConsider the following algorithm for finding a minimum cut. Assign a random score to each edge, and compute a minimum spanning tree. Removing the heaviest edge in the tree breaks it into two pieces. Argue that with probability \\(\\omega(1/n^2)\\), those pieces will be the two sides of a minimum cut. Hint: relate this algorithm to the contraction algorithm we did in the class. Also think about Kruskal’s algorithm.\nShow that for every \\(n \\geq 4\\), there is a simple graph \\(G_n\\) on \\(n\\) vertices that has at least \\({n \\choose 2}\\) distinct minimum cuts.\nShow that for every \\(n \\geq 3\\), there is a simple graph \\(G_n\\) on \\(n\\) vertices such that the value of ILPOPT of the vertex cover ILP associated with \\(G_n\\) is at least one less than twice the value of LPOPT of the vertex cover LP associated with \\(G_n\\), i.e:\n\n\\[\\text{ILPOPT}(G_n) \\geq 2\\cdot \\text{LPOPT}(G_n) - 1.\\]\n\nConsider the Set Cover instance shown in the figure below.\n\nShow that all-half is the unique LPOPT for this instance.\nShow that if you include every set in \\(\\mathcal{F}^\\prime\\) with probability \\(x_s\\), then the probability that \\(\\mathcal{F}^\\prime\\) covers \\(U\\) is at most \\(2^{-\\Omega(n)}\\)."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D1Q/index.html#k02-day-1-tutorial",
    "href": "2022/04-GIAN/tutorials/D1Q/index.html#k02-day-1-tutorial",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D1Q/index.html#definitions",
    "href": "2022/04-GIAN/tutorials/D1Q/index.html#definitions",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "\\(c\\)-approximate mincut\n\n\n\nA \\(c\\)-approximate mincut is a set of at most \\(cr\\) edges if \\(r\\) is the number of edges in a mincut.\n\n\n\n\n\n\n\n\nmin \\(k\\)-way cut\n\n\n\nA minimum k-cut is a smallest set of edges whose removal would partition the graph to at least \\(k\\) connected components\n\n\n\n\n\n\n\n\n\\(G(n,p)\\) graphs\n\n\n\nThe \\(G(n, p)\\) model, due to Erdös and Rényi, has two parameters, \\(n\\) and \\(p\\). Here \\(n\\) is the number of vertices of the graph and \\(p\\) is the edge probability. For each pair of distinct vertices, \\(v\\) and \\(w, p\\) is the probability that the edge \\((v, w)\\) is present. The presence of each edge is statistically independent of all other edges. The graph-valued random variable with these parameters is denoted by \\(G(n, p)\\). When we refer to “the graph \\(G(n, p)\\)”, we mean one realization of the random variable."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D1Q/index.html#problems",
    "href": "2022/04-GIAN/tutorials/D1Q/index.html#problems",
    "title": "191014K02 | Day 1 Lecture 1",
    "section": "",
    "text": "Generalize the mincut argument to \\(c\\)-approximate mincuts.\nGeneralize the mincut argument to min \\(k\\)-way cut.\nProve #min \\(k\\)-cuts is at most \\(n^{O(k)}\\).\nShow that \\(G(n, 1/2)\\) graphs have:\n\nmany cliques of size \\(2 \\log n-o(\\log n)\\) in expectation, and\nno cliques of size \\(2 \\log n+o(\\log n)\\) in expectation (and with high probability).\n\nConsider the following algorithm for finding a minimum cut. Assign a random score to each edge, and compute a minimum spanning tree. Removing the heaviest edge in the tree breaks it into two pieces. Argue that with probability \\(\\omega(1/n^2)\\), those pieces will be the two sides of a minimum cut. Hint: relate this algorithm to the contraction algorithm we did in the class. Also think about Kruskal’s algorithm.\nShow that for every \\(n \\geq 4\\), there is a simple graph \\(G_n\\) on \\(n\\) vertices that has at least \\({n \\choose 2}\\) distinct minimum cuts.\nShow that for every \\(n \\geq 3\\), there is a simple graph \\(G_n\\) on \\(n\\) vertices such that the value of ILPOPT of the vertex cover ILP associated with \\(G_n\\) is at least one less than twice the value of LPOPT of the vertex cover LP associated with \\(G_n\\), i.e:\n\n\\[\\text{ILPOPT}(G_n) \\geq 2\\cdot \\text{LPOPT}(G_n) - 1.\\]\n\nConsider the Set Cover instance shown in the figure below.\n\nShow that all-half is the unique LPOPT for this instance.\nShow that if you include every set in \\(\\mathcal{F}^\\prime\\) with probability \\(x_s\\), then the probability that \\(\\mathcal{F}^\\prime\\) covers \\(U\\) is at most \\(2^{-\\Omega(n)}\\)."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D4Q/index.html",
    "href": "2022/04-GIAN/tutorials/D4Q/index.html",
    "title": "191014K02 | Day 4 Tutorial",
    "section": "",
    "text": "Back to the Course Page\n\n\n\n\nThe statement of the isolation lemma discussed in class was the following:\nLet \\(U\\) be a universe with \\(|U|=n\\) and let \\(\\cal F\\) be a family of sets over \\(U\\). Pick a random weight function \\(w: U \\rightarrow\\{1, \\cdots ,W\\}\\). Then:\n\\[\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant 1-\\frac{n}{W}\\]\nRecall that we called an element \\(u\\) critical if:\n\n\\(u\\) is in some minimum weight set, and\nif \\(w(u)\\) is increased by 1 then \\(u\\) is no longer in any minimum weight set.\n\nArgue that \\(\\cal F\\) has a unique set of the minimum weight if and only if there are no critical elements.\n:::{.callout-tip} Foo Bar. :::\n\n\n\n\n\n\n\nTip\n\n\n\nFoo Bar.\n\n\n\nDesign a dynamic programming algorithm for Steiner Tree on graphs of bandwidth \\(k\\) with running time \\(k^{O(k)} n^{O(1)}\\).\nDemonstrate (via a direct argument) that the greedy algorithm for the maxcut problem discussed in class outputs a cut that cuts at least half the edges in the graph.\nRecall the greedy algorithm for Set Cover discussed in class. In each round, show that at least one set \\(S_i \\in F\\) covers at least 1/OPT fraction of uncovered elements.\nWhy did we need to define \\(U\\) to have edges in the \\(k\\)-path algorithm?\nDesign an algorithm for solving the Steiner Tree problem on graphs of bounded FVS.\nDesign an algorithm for the Hamiltonian Path problem on graphs of bounded bandwidth."
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D4Q/index.html#k02-day-4-tutorial",
    "href": "2022/04-GIAN/tutorials/D4Q/index.html#k02-day-4-tutorial",
    "title": "191014K02 | Day 4 Tutorial",
    "section": "",
    "text": "Back to the Course Page"
  },
  {
    "objectID": "2022/04-GIAN/tutorials/D4Q/index.html#problems",
    "href": "2022/04-GIAN/tutorials/D4Q/index.html#problems",
    "title": "191014K02 | Day 4 Tutorial",
    "section": "",
    "text": "The statement of the isolation lemma discussed in class was the following:\nLet \\(U\\) be a universe with \\(|U|=n\\) and let \\(\\cal F\\) be a family of sets over \\(U\\). Pick a random weight function \\(w: U \\rightarrow\\{1, \\cdots ,W\\}\\). Then:\n\\[\\operatorname{Pr}[{\\color{indianred}\\cal F \\text{ has a \\textbf{unique} min weight set}}] \\geqslant 1-\\frac{n}{W}\\]\nRecall that we called an element \\(u\\) critical if:\n\n\\(u\\) is in some minimum weight set, and\nif \\(w(u)\\) is increased by 1 then \\(u\\) is no longer in any minimum weight set.\n\nArgue that \\(\\cal F\\) has a unique set of the minimum weight if and only if there are no critical elements.\n:::{.callout-tip} Foo Bar. :::\n\n\n\n\n\n\n\nTip\n\n\n\nFoo Bar.\n\n\n\nDesign a dynamic programming algorithm for Steiner Tree on graphs of bandwidth \\(k\\) with running time \\(k^{O(k)} n^{O(1)}\\).\nDemonstrate (via a direct argument) that the greedy algorithm for the maxcut problem discussed in class outputs a cut that cuts at least half the edges in the graph.\nRecall the greedy algorithm for Set Cover discussed in class. In each round, show that at least one set \\(S_i \\in F\\) covers at least 1/OPT fraction of uncovered elements.\nWhy did we need to define \\(U\\) to have edges in the \\(k\\)-path algorithm?\nDesign an algorithm for solving the Steiner Tree problem on graphs of bounded FVS.\nDesign an algorithm for the Hamiltonian Path problem on graphs of bounded bandwidth."
  },
  {
    "objectID": "2025/01-CS614/index.html",
    "href": "2025/01-CS614/index.html",
    "title": "CS614 | Jan-Apr 2025",
    "section": "",
    "text": "(co-instructor with Prof. Manoj Gupta.)\nThis website pertains to the first half of the course. A link to the second half will be available here soon.\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis first half of this course will focus on techniques in approximation algorithms, where we mostly focus on getting near-optimal solutions in polynomial time, with varying degrees of closeness to OPT. In the second half, we will learn about randomized algorithms.\n\n\n\nOverview of tradeoffs\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary. For students of IITGN, this course naturally follows up on DSA-II.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures on Mondays and Thursdays: 11.30AM — 1PM (11/206)\nOffice Hours: By email.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nRegister through IMS\nAssessments on Gradescope (Code: 3RVXNG)\nAnnouncements on Google Classroom (Code: qrquvxi)\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nGrading (First Half - 50%): 12 Worksheets (40%) + Take-Home Exam (10%)\n\n\n\nNote: the videos here are unedited livestream recordings, mostly shared here for the record: pursue them at your own risk. Apologies for the choppy audio in a few of them!\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Jan, 2025\n1. Introduction to Approximation Algorithms\nExample: Load Balancing\n\n\n\n\n\n09 Jan, 2025\n2. Introduction to Linear Programming\nExample: Vertex Cover\n\n\n\n\n\n13 Jan, 2025\n3a. Adaptive Rounding - I\nExample: Bin Packing\n\n\n\n\n\n16 Jan, 2025\n3b. Adaptive Rounding - II\nExample: Bin Packing (contd)\n\n\n\n\n\n20 Jan, 2025\n4. Randomized Rounding\nExample: Set Cover\n\n\n\n\n\n23 Jan, 2025\n5a. General Techniques\nMultiway Cut via Isolating Cuts\n\n\n\n\n\n27 Jan, 2025\n5b. Randomized Rounding - I\nMultiway Cut\n\n\n\n\n\n30 Jan, 2025\n5c. Randomized Rounding - II\nMultiway Cut (contd)\n\n\n\n\n\n03 Feb, 2025\n6. Primal-Dual Approximation\nVertex Cover\n\n\n\n\n\n06 Feb, 2025\nClass Cancelled\nRemark: this class is canceled.\n\n\n\n\n\n10 Feb, 2025\n7a. Primal-Dual Approximation\nSteiner Forest\n\n\n\n\n\n13 Feb, 2025\n7b. Primal-Dual Approximation\nSteiner Forest (contd)\n\n\n\n\n\n14 Feb, 2025\n7c. Primal-Dual Approximation\nSteiner Forest (contd)\nNote: this is an extra makeup class\n\n\n\n\n\n17 Feb, 2025\nClass Canceled\nRemark: this class is canceled.\n\n\n\n\n\n19 Feb, 2025\n8a. Primal-Dual Approximation\nFacility Location - I\nNote: this is an extra makeup class\n\n\n\n\n\n20 Feb, 2025\n8b. Primal-Dual Approximation\nFacility Location II\n\n\n\n\n\n24 Feb, 2025\n9. Worksheet Discussions - I\n\n\n\n\n\n\n27 Feb, 2025\n10. Worksheet Discussions - II\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2025/01-CS614/index.html#cs614.-advanced-algorithms",
    "href": "2025/01-CS614/index.html#cs614.-advanced-algorithms",
    "title": "CS614 | Jan-Apr 2025",
    "section": "",
    "text": "(co-instructor with Prof. Manoj Gupta.)\nThis website pertains to the first half of the course. A link to the second half will be available here soon.\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nThis course will explores the tradeoffs involved in coping with NP-completeness.\nWhen we think about designing algorithms, we are usually very demanding in how we go about it: we require our algorithms to be fast and accurate on all conceivable inputs. This is asking for quite a bit, and perhaps it is not surprising that we cannot afford this luxury all the time. The good news is that most of the time we can make meaningful progress by relaxing just one of these demands:\n\nGive up on accuracy, but not completely: look for solutions that are good enough (approximation) and/or work with algorithms that report the right solution most of the time (Las-Vegas style randomization).\nGive up on coverage, a little bit: let your algorithms work well on structured inputs. Hopefully the structure is such that it is not too limiting and is interesting enough for some application scenario, and is also enough to give you algorithmic leverage, i.e, there’s enough that you can exploit to make fast and accurate algorithms.\nGive up on speed, to some extent: going beyond the traditional allowance of polynomial time, which is the holy grail of what is considered efficient, takes you places. You could either allow for your algorithms have super-polynomial running times, and optimize as much as possible while being accurate on all inputs (exact algorithms), or allow for bad running times on a bounded subset of instances (Monte-Carlo style randomization).\n\nThis first half of this course will focus on techniques in approximation algorithms, where we mostly focus on getting near-optimal solutions in polynomial time, with varying degrees of closeness to OPT. In the second half, we will learn about randomized algorithms.\n\n\n\nOverview of tradeoffs\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone who is biting their nails from the NP-completeness cliffhanger at the end of their introduction to algorithms will probably enjoy this course.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis is a theoretical course that will require mathematical maturity (in particular, the ability to understand and write formal mathematical proofs), and some background in the design and analysis of algorithms. Programming experience is tangentially useful but not necessary. For students of IITGN, this course naturally follows up on DSA-II.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nThe Design of Approximation Algorithms • David P. Williamson and David B. Shmoys\nParameterized Algorithms • Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Daniel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh\nRandomized Algorithms • Motwani and Raghavan\nBeyond the Worst-Case Analysis of Algorithms • Tim Roughgarden\nAlgorithms • Jeff Erickson\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nLectures on Mondays and Thursdays: 11.30AM — 1PM (11/206)\nOffice Hours: By email.\n\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nRegister through IMS\nAssessments on Gradescope (Code: 3RVXNG)\nAnnouncements on Google Classroom (Code: qrquvxi)\n\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nGrading (First Half - 50%): 12 Worksheets (40%) + Take-Home Exam (10%)\n\n\n\nNote: the videos here are unedited livestream recordings, mostly shared here for the record: pursue them at your own risk. Apologies for the choppy audio in a few of them!\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Jan, 2025\n1. Introduction to Approximation Algorithms\nExample: Load Balancing\n\n\n\n\n\n09 Jan, 2025\n2. Introduction to Linear Programming\nExample: Vertex Cover\n\n\n\n\n\n13 Jan, 2025\n3a. Adaptive Rounding - I\nExample: Bin Packing\n\n\n\n\n\n16 Jan, 2025\n3b. Adaptive Rounding - II\nExample: Bin Packing (contd)\n\n\n\n\n\n20 Jan, 2025\n4. Randomized Rounding\nExample: Set Cover\n\n\n\n\n\n23 Jan, 2025\n5a. General Techniques\nMultiway Cut via Isolating Cuts\n\n\n\n\n\n27 Jan, 2025\n5b. Randomized Rounding - I\nMultiway Cut\n\n\n\n\n\n30 Jan, 2025\n5c. Randomized Rounding - II\nMultiway Cut (contd)\n\n\n\n\n\n03 Feb, 2025\n6. Primal-Dual Approximation\nVertex Cover\n\n\n\n\n\n06 Feb, 2025\nClass Cancelled\nRemark: this class is canceled.\n\n\n\n\n\n10 Feb, 2025\n7a. Primal-Dual Approximation\nSteiner Forest\n\n\n\n\n\n13 Feb, 2025\n7b. Primal-Dual Approximation\nSteiner Forest (contd)\n\n\n\n\n\n14 Feb, 2025\n7c. Primal-Dual Approximation\nSteiner Forest (contd)\nNote: this is an extra makeup class\n\n\n\n\n\n17 Feb, 2025\nClass Canceled\nRemark: this class is canceled.\n\n\n\n\n\n19 Feb, 2025\n8a. Primal-Dual Approximation\nFacility Location - I\nNote: this is an extra makeup class\n\n\n\n\n\n20 Feb, 2025\n8b. Primal-Dual Approximation\nFacility Location II\n\n\n\n\n\n24 Feb, 2025\n9. Worksheet Discussions - I\n\n\n\n\n\n\n27 Feb, 2025\n10. Worksheet Discussions - II\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2025/01-CS303/index.html",
    "href": "2025/01-CS303/index.html",
    "title": "CS303 | Spring 2025",
    "section": "",
    "text": "Instructor: Prof. Manisha Padala. Tutorials are available from Gradescope.\n\n\n\n\n\n\nAbout the Course\n\n\n\nThe course covers mathematical tools necessary for various computer science and artificial intelligence courses.\nTopics covered include: Linear Algebra, Optimization, and Probabilistic Modelling.\n\n\n\n\n\n\n\n\nPrerequisites (Informal)\n\n\n\nData Centric Computing (ES 113) and Probability Statistics and Data Visualisation (ES 114)\n\n\n\n\n\n\n\n\nReferences\n\n\n\nPlease visit the main course website for course plan, lecture slides, references, and grading policy.\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\nTutorials: Thursdays 2:00 PM - 3:20 PM at 1/101\n\n\n\n\n\n\n\n\nOffice hours\n\n\n\nBy appointment.\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n5 Quizzes (individual) 10% each\n5 Worksheets (group, 5 points each) 10% in total\n2 Coding Assignments 5% each\nMid Semester Exam 10%\nEnd Semester Exam 20%\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\nRegister through IMS\nAll assessments will be conducted on Gradescope (Code: YRWVWK)\nAll announcements are made over Google Classroom."
  },
  {
    "objectID": "2025/01-CS303/index.html#cs303.-mathematical-foundations-of-ai-tutorials",
    "href": "2025/01-CS303/index.html#cs303.-mathematical-foundations-of-ai-tutorials",
    "title": "CS303 | Spring 2025",
    "section": "",
    "text": "Instructor: Prof. Manisha Padala. Tutorials are available from Gradescope.\n\n\n\n\n\n\nAbout the Course\n\n\n\nThe course covers mathematical tools necessary for various computer science and artificial intelligence courses.\nTopics covered include: Linear Algebra, Optimization, and Probabilistic Modelling.\n\n\n\n\n\n\n\n\nPrerequisites (Informal)\n\n\n\nData Centric Computing (ES 113) and Probability Statistics and Data Visualisation (ES 114)\n\n\n\n\n\n\n\n\nReferences\n\n\n\nPlease visit the main course website for course plan, lecture slides, references, and grading policy.\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\nTutorials: Thursdays 2:00 PM - 3:20 PM at 1/101\n\n\n\n\n\n\n\n\nOffice hours\n\n\n\nBy appointment.\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n5 Quizzes (individual) 10% each\n5 Worksheets (group, 5 points each) 10% in total\n2 Coding Assignments 5% each\nMid Semester Exam 10%\nEnd Semester Exam 20%\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\nRegister through IMS\nAll assessments will be conducted on Gradescope (Code: YRWVWK)\nAll announcements are made over Google Classroom."
  },
  {
    "objectID": "2024/02-CS691/index.html",
    "href": "2024/02-CS691/index.html",
    "title": "Applications of Linear Algebra | Summer 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course explores applications of tools from linear algebra in combinatorics, geometry, algorithms, and graph theory. We will emphasize proofs and proof techniques. The goal is to use the applications as a backdrop to practice and review linear algebra skills, but also to develop a an understanding of new proof techniques and recognize how to apply them in new settings as well.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nLogsitically, this course is a special summer offering meant for advanced students of the IITM online BS program in Data Science and undergraduate students of IIT Gandhinagar. Anyone with a background in linear algebra and an interest in the material is welcome to follow along.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nA little linear algerba won’t hurt. Try starting here if you have never encountered linear algebra concepts before:\n\nThe Linear Algebra course on Khan Academy\nThe 3blue1brown Playlist on the “Essence of Linear Algebra”\nAn interactive introduction from Brilliant.\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nWe will closely follow Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra. Additional pointers to tangents and related material will be listed on the individual notes pages.\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\nClass recordings and slides will be shared on this website as we go along. Notes will be made available on a best-effort basis.\n\n\n\n\n\n\n\n\n\nGrading Policy\n\n\n\n\n\n\nThe pre-requisite assignment does not contribute to the course grade.\nThe assignments are worth 45% of the final grade (best 3 out of 4, 10% each).\nThe course project is a visualization-based programming project worth 15% of the final grade.\nThe midsem exam is worth 15% of the final grade.\nThe endsem exam is worth 25% of the final grade.\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nThe lectures will be held between 4PM and 6PM on the indicated dates.\nThe venue will be announced shortly.\nThe course is hybrid, and students who are joining us remotely can attend classes in real-time over Zoom.\nThe Zoom link will be shared over email with registered participants.\nThe video recordings of the classes will be made available on this website as we go along.\n\n\n\n\n\nLecturesAssignments\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n17 May, 2024\n01. Oddtown, Eventown, and Same-Size Intersections and Medium-Size Intersections\n\n\n\n\n\n\n19 May, 2024\n02. Erdős-Ko-Rado Theorem and Sperner's theorem\n\n\n\n\n\n\n21 May, 2024\n03. An introduction to VC Dimension\n\n\n\n\n\n\n23 May, 2024\n04. The Sauer-Shelah Lemma\n\n\n\n\n\n\n25 May, 2024\n05. Computing Fibonacci Numbers, Quickly\n\n\n\n\n\n\n27 May, 2024\n06. Review and Recap\n\n\n\n\n\n\n04 Jun, 2024\n07. Finding Triangles · The Schwartz–Zippel theorem · Perfect Matchings and Determinants\n\n\n\n\n\n\n06 Jun, 2024\n08. In How Many Ways Can a Man Tile a Board? · Counting Compositions · Is it Associative?\n\n\n\n\n\n\n12 Jun, 2024\n09. Turning a Ladder Over a Finite Field\n\n\n\n\n\n\n14 Jun, 2024\n10. Equilateral Sets · Two Distances\n\n\n\n\n\n\n16 Jun, 2024\n11. Are These Distances Euclidean?\n\n\n\n\n\n\n18 Jun, 2024\n12. Rotating the Cube\n\n\n\n\n\n\n20 Jun, 2024\n13. Odd Distances · Tiling a Rectangle by Squares · Covering a Cube Minus One Vertex\n\n\n\n\n\n\n22 Jun, 2024\n14. Review and Recap\n\n\n\n\n\n\n24 Jun, 2024\n15. Packing Complete Bipartite Graphs · Three Petersens Are Not Enough\n\n\n\n\n\n\n26 Jun, 2024\n16. Counting Spanning Trees\n\n\n\n\n\n\n28 Jun, 2024\n17. Cutting Cheaply Using Eigenvectors\n\n\n\n\n\n\n30 Jun, 2024\n18. Petersen, Hoffman–Singleton, and Maybe 57\n\n\n\n\n\n\n02 Jul, 2024\n19. The Secret Agent and the Umbrella\n\n\n\n\n\n\n04 Jul, 2024\n20. Shannon Capacity of the Union: A Tale of Two Fields\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 May, 2024\n            \n            \n                Assignment 0 (Pre-Requsites)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 May, 2024\n            \n            \n                Assignment 1 (Set Systems)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Jun, 2024\n            \n            \n                Assignment 2 (Randomized Algorithms)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jun, 2024\n            \n            \n                Assignment 3 (Geometry)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jun, 2024\n            \n            \n                Assignment 4 (Graphs)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/02-CS691/index.html#applications-of-linear-algebra",
    "href": "2024/02-CS691/index.html#applications-of-linear-algebra",
    "title": "Applications of Linear Algebra | Summer 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis course explores applications of tools from linear algebra in combinatorics, geometry, algorithms, and graph theory. We will emphasize proofs and proof techniques. The goal is to use the applications as a backdrop to practice and review linear algebra skills, but also to develop a an understanding of new proof techniques and recognize how to apply them in new settings as well.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nLogsitically, this course is a special summer offering meant for advanced students of the IITM online BS program in Data Science and undergraduate students of IIT Gandhinagar. Anyone with a background in linear algebra and an interest in the material is welcome to follow along.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nA little linear algerba won’t hurt. Try starting here if you have never encountered linear algebra concepts before:\n\nThe Linear Algebra course on Khan Academy\nThe 3blue1brown Playlist on the “Essence of Linear Algebra”\nAn interactive introduction from Brilliant.\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nWe will closely follow Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra. Additional pointers to tangents and related material will be listed on the individual notes pages.\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\nClass recordings and slides will be shared on this website as we go along. Notes will be made available on a best-effort basis.\n\n\n\n\n\n\n\n\n\nGrading Policy\n\n\n\n\n\n\nThe pre-requisite assignment does not contribute to the course grade.\nThe assignments are worth 45% of the final grade (best 3 out of 4, 10% each).\nThe course project is a visualization-based programming project worth 15% of the final grade.\nThe midsem exam is worth 15% of the final grade.\nThe endsem exam is worth 25% of the final grade.\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n\nThe lectures will be held between 4PM and 6PM on the indicated dates.\nThe venue will be announced shortly.\nThe course is hybrid, and students who are joining us remotely can attend classes in real-time over Zoom.\nThe Zoom link will be shared over email with registered participants.\nThe video recordings of the classes will be made available on this website as we go along.\n\n\n\n\n\nLecturesAssignments\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n17 May, 2024\n01. Oddtown, Eventown, and Same-Size Intersections and Medium-Size Intersections\n\n\n\n\n\n\n19 May, 2024\n02. Erdős-Ko-Rado Theorem and Sperner's theorem\n\n\n\n\n\n\n21 May, 2024\n03. An introduction to VC Dimension\n\n\n\n\n\n\n23 May, 2024\n04. The Sauer-Shelah Lemma\n\n\n\n\n\n\n25 May, 2024\n05. Computing Fibonacci Numbers, Quickly\n\n\n\n\n\n\n27 May, 2024\n06. Review and Recap\n\n\n\n\n\n\n04 Jun, 2024\n07. Finding Triangles · The Schwartz–Zippel theorem · Perfect Matchings and Determinants\n\n\n\n\n\n\n06 Jun, 2024\n08. In How Many Ways Can a Man Tile a Board? · Counting Compositions · Is it Associative?\n\n\n\n\n\n\n12 Jun, 2024\n09. Turning a Ladder Over a Finite Field\n\n\n\n\n\n\n14 Jun, 2024\n10. Equilateral Sets · Two Distances\n\n\n\n\n\n\n16 Jun, 2024\n11. Are These Distances Euclidean?\n\n\n\n\n\n\n18 Jun, 2024\n12. Rotating the Cube\n\n\n\n\n\n\n20 Jun, 2024\n13. Odd Distances · Tiling a Rectangle by Squares · Covering a Cube Minus One Vertex\n\n\n\n\n\n\n22 Jun, 2024\n14. Review and Recap\n\n\n\n\n\n\n24 Jun, 2024\n15. Packing Complete Bipartite Graphs · Three Petersens Are Not Enough\n\n\n\n\n\n\n26 Jun, 2024\n16. Counting Spanning Trees\n\n\n\n\n\n\n28 Jun, 2024\n17. Cutting Cheaply Using Eigenvectors\n\n\n\n\n\n\n30 Jun, 2024\n18. Petersen, Hoffman–Singleton, and Maybe 57\n\n\n\n\n\n\n02 Jul, 2024\n19. The Secret Agent and the Umbrella\n\n\n\n\n\n\n04 Jul, 2024\n20. Shannon Capacity of the Union: A Tale of Two Fields\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 May, 2024\n            \n            \n                Assignment 0 (Pre-Requsites)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 May, 2024\n            \n            \n                Assignment 1 (Set Systems)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Jun, 2024\n            \n            \n                Assignment 2 (Randomized Algorithms)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Jun, 2024\n            \n            \n                Assignment 3 (Geometry)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                22 Jun, 2024\n            \n            \n                Assignment 4 (Graphs)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-CS329/Q01.html",
    "href": "2024/03-CS329/Q01.html",
    "title": "Courses",
    "section": "",
    "text": "![[0000 The Game of Death CSP Edition]]\n\n![[0026 Dr Nim Game Tree]]"
  },
  {
    "objectID": "2024/03-CS329/Q01.html#quiz-1",
    "href": "2024/03-CS329/Q01.html#quiz-1",
    "title": "Courses",
    "section": "",
    "text": "![[0000 The Game of Death CSP Edition]]\n\n![[0026 Dr Nim Game Tree]]"
  },
  {
    "objectID": "2024/01-WEBSITE/index.html",
    "href": "2024/01-WEBSITE/index.html",
    "title": "A Primer on Making Personal Websites",
    "section": "",
    "text": "Logistics\n\n\n\n\n\nDate: 06 -07 April (Saturday, Sunday) · Time: 10:30 AM - 12:30 PM IST · Venue: 6/201\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe workshop material is beginner-friendly: we assume no background in web development.\n\n\n\n\n\n\n\nOn the first day, we will go over:\n\nWebsite styles: personal blog, resume, knowledge gardens, etc.\nWebsites we love: case studies\nHosting and setup: main options\nPlanning your content\nAesthetics\nAccessibility and Security\nAuxiliary platforms\n\nOn the second day, we will discuss and get feedback on websites that participants have made.\n\n\n\nAnswer the following questions:\n\nWhat is the goal of your website? Who is the target audience? What do you think they are looking for?\nWhat kind of content would you like to share on your website?\nWhat features do you want your website to have?\nWhat are some of the websites that you have found useful and think of as model examples for your own?\nWhat is your degree of comfort with writing code and basic scripting?\nCome up with a basic content plan for your website: what elements will the navigation have, and have a summary of what you want each page to contain.\n\nPlease share a Google Doc with answers to these questions by Friday 5PM. This will help me fine-tune to the workshop to your needs."
  },
  {
    "objectID": "2024/01-WEBSITE/index.html#a-primer-on-making-personal-websites",
    "href": "2024/01-WEBSITE/index.html#a-primer-on-making-personal-websites",
    "title": "A Primer on Making Personal Websites",
    "section": "",
    "text": "Logistics\n\n\n\n\n\nDate: 06 -07 April (Saturday, Sunday) · Time: 10:30 AM - 12:30 PM IST · Venue: 6/201\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThe workshop material is beginner-friendly: we assume no background in web development.\n\n\n\n\n\n\n\nOn the first day, we will go over:\n\nWebsite styles: personal blog, resume, knowledge gardens, etc.\nWebsites we love: case studies\nHosting and setup: main options\nPlanning your content\nAesthetics\nAccessibility and Security\nAuxiliary platforms\n\nOn the second day, we will discuss and get feedback on websites that participants have made.\n\n\n\nAnswer the following questions:\n\nWhat is the goal of your website? Who is the target audience? What do you think they are looking for?\nWhat kind of content would you like to share on your website?\nWhat features do you want your website to have?\nWhat are some of the websites that you have found useful and think of as model examples for your own?\nWhat is your degree of comfort with writing code and basic scripting?\nCome up with a basic content plan for your website: what elements will the navigation have, and have a summary of what you want each page to contain.\n\nPlease share a Google Doc with answers to these questions by Friday 5PM. This will help me fine-tune to the workshop to your needs."
  },
  {
    "objectID": "2024/01-CS607/index.html",
    "href": "2024/01-CS607/index.html",
    "title": "CS607 | Jan-Apr 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\nJust as arithmetic deals with integers (with the standard operations), algebra deals with operations in general, analysis deals with functions, geometry deals with rigid shapes, and topology deals with continuity, so does combinatorics deal with configurations. Combinatorics counts, enumerates, examines, and investigates the existence of configurations with certain specified properties. With combinatorics, one looks for their intrinsic properties, and studies transformations of one configuration into another, as well as “subconfigurations” of a given configuration.\n\nClaude Berge, Principles of Combinatorics, Dunod, Paris, 1968 (English translation: Academic Press, New York, 1971)\n\n\n\nMathematics is the art of reducing any problem to linear algebra.\n\nWilliam Stein\n\n\nThis course will delve into some special highlights from the field of combinatorics, with a broad emphasis on applications to computer science. We will frequently encounter the use of linear algebraic methods. We will roughly have four major themes: extremal set systems, randomized algorithms, geometry, graphs. Every now and then, we’ll work through “puzzles”, which are questions that have a recreational flavor.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nDid you enjoy Discrete Mathematics? That’s a sign: there’s a good chance you’ll like this too! You might find a slight change of pace and style in the offering, but it will be just as fun and full of awe-inspiring discovery.\nIf you haven’t done Discrete Mathematics, but you enjoy discret-ey puzzles and questions, you’ll probably also like this.\nThat said, I am not a recommender algorithm, so please join us for a class or two during the add/drop period to decide if this course is for you :)\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is mostly self-contained, but a general degree of comfort with proofs and some elementary linear algebra would be useful.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\nThirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra by Jiří Matoušek\nExtremal Combinatorics: With Applications in Computer Science (Texts in Theoretical Computer Science. An EATCS Series) by Stasys Jukna\n\nAdditional pointers (papers, articles, videos, etc.) specific to each lecture will be provided in the summaries of the course plans. Some lectures may have additional notes linked to from the course plan as well.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 7/110\nTimings: 15:30 - 16:50 on Mondays and 14:00 - 15:20 on Thursdays.\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTA: Aditi Sethia\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three quizzes account for 10% of the grade.\nThe midsem exam accounts for 15% of the grade.\nThe endsem exam accounts for 20% of the grade.\nThere will be worksheets accompanying each lecture, due at midnight on the day of the lecture. Each worksheet is worth two points, and your total points from the worksheets is capped at 35 points, which contributes to 35% of the grade.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code ebtcrf2.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesWorksheetsQuizzesExams\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2024\n01. Icebreaker Puzzle\nThe Impossible Chessboard Situation and Hamming Codes\nBased on Miniature #5 and these videos: [1], [2].\n\n\n\n\n\n08 Jan, 2024\n02. Extremal Set Systems\nOddtown, Eventown, and Same-Size Intersections and Medium-Size Intersections\n\n\n\n\n\n\n11 Jan, 2024\n03. Extremal Set Systems\nErdős-Ko-Rado Theorem and Sperner's theorem\n\n\n\n\n\n\n15 Jan, 2024\n04. Extremal Set Systems\nVC Dimension and Sauer-Shelah Lemma\n\n\n\n\n\n\n18 Jan, 2024\n05. Extremal Set Systems\nSunflowers and Applications\n\n\n\n\n\n\n22 Jan, 2024\n06. Quiz 1\n\n\n\n\n\n\n25 Jan, 2024\n07. (No Class.)\n\n\n\n\n\n\n29 Jan, 2024\n08. Puzzle Interlude\nWalking in the Yard\n\n\n\n\n\n\n01 Feb, 2024\n09. Computational Interlude\nComputing Fibonacci Numbers, Quickly\nThis is the source for the quote in the tooltip :)\n\n\n\n\n\n05 Feb, 2024\n10. Quiz 2\n\n\n\n\n\n\n08 Feb, 2024\n11. Randomized Algorithms\nWarm Up: Finding Triangles · The Schwartz–Zippel theorem · Perfect Matchings and Determinants\n\n\n\n\n\n\n12 Feb, 2024\n12. Randomized Algorithms\nCounting Compositions · Is it Associative?\n\n\n\n\n\n\n15 Feb, 2024\n13. Puzzle Interlude\nTurning a Ladder Over a Finite Field\n\n\n\n\n\n\n26 Feb, 2024\n14. Geometry\nEquilateral Sets · Two Distances\n\n\n\n\n\n\n29 Feb, 2024\n15. Geometry\nAre These Distances Euclidean?\n\n\n\n\n\n\n04 Mar, 2024\n16. Geometry\nEquiangular Lines\n\n\n\n\n\n\n07 Mar, 2024\n17. Geometry\nOn the Difficulty of Reducing the Diameter\n\n\n\n\n\n\n11 Mar, 2024\n18. Geometry\nCovering a Cube Minus One Vertex\n\n\n\n\n\n\n14 Mar, 2024\n19. Geometry\nRotating the Cube\n\n\n\n\n\n\n18 Mar, 2024\n20. Puzzle Interlude\nOdd Distances · Tiling a Rectangle by Squares\n\n\n\n\n\n\n21 Mar, 2024\n21. Quiz 3\n\n\n\n\n\n\n01 Apr, 2024\n22. Graphs\nPacking Complete Bipartite Graphs · Three Petersens Are Not Enough\n\n\n\n\n\n\n04 Apr, 2024\n23. Graphs\nIn How Many Ways Can a Man Tile a Board?\n\n\n\n\n\n\n08 Apr, 2024\n24. Graphs\nPetersen, Hoffman–Singleton, and Maybe 57\n\n\n\n\n\n\n11 Apr, 2024\n25. Holiday (Idu'l Fitr)\n\n\n\n\n\n\n15 Apr, 2024\n26. Graphs\nCounting Spanning Trees\n\n\n\n\n\n\n18 Apr, 2024\n27. Graphs\nCutting Cheaply Using Eigenvectors\n\n\n\n\n\n\n22 Apr, 2024\n28. Final Puzzles\nThe End of the Small Coins · More Bricks — More Walls?\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nComing Soon.\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                04 Jan, 2024\n            \n            \n                Worksheet 01\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\nComing Soon.\n\n\n\nComing Soon.\n\n\n\n\n:::"
  },
  {
    "objectID": "2024/01-CS607/index.html#cs607.-combinatorics-with-applications-in-computer-science",
    "href": "2024/01-CS607/index.html#cs607.-combinatorics-with-applications-in-computer-science",
    "title": "CS607 | Jan-Apr 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\nJust as arithmetic deals with integers (with the standard operations), algebra deals with operations in general, analysis deals with functions, geometry deals with rigid shapes, and topology deals with continuity, so does combinatorics deal with configurations. Combinatorics counts, enumerates, examines, and investigates the existence of configurations with certain specified properties. With combinatorics, one looks for their intrinsic properties, and studies transformations of one configuration into another, as well as “subconfigurations” of a given configuration.\n\nClaude Berge, Principles of Combinatorics, Dunod, Paris, 1968 (English translation: Academic Press, New York, 1971)\n\n\n\nMathematics is the art of reducing any problem to linear algebra.\n\nWilliam Stein\n\n\nThis course will delve into some special highlights from the field of combinatorics, with a broad emphasis on applications to computer science. We will frequently encounter the use of linear algebraic methods. We will roughly have four major themes: extremal set systems, randomized algorithms, geometry, graphs. Every now and then, we’ll work through “puzzles”, which are questions that have a recreational flavor.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nDid you enjoy Discrete Mathematics? That’s a sign: there’s a good chance you’ll like this too! You might find a slight change of pace and style in the offering, but it will be just as fun and full of awe-inspiring discovery.\nIf you haven’t done Discrete Mathematics, but you enjoy discret-ey puzzles and questions, you’ll probably also like this.\nThat said, I am not a recommender algorithm, so please join us for a class or two during the add/drop period to decide if this course is for you :)\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is mostly self-contained, but a general degree of comfort with proofs and some elementary linear algebra would be useful.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\nThirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra by Jiří Matoušek\nExtremal Combinatorics: With Applications in Computer Science (Texts in Theoretical Computer Science. An EATCS Series) by Stasys Jukna\n\nAdditional pointers (papers, articles, videos, etc.) specific to each lecture will be provided in the summaries of the course plans. Some lectures may have additional notes linked to from the course plan as well.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 7/110\nTimings: 15:30 - 16:50 on Mondays and 14:00 - 15:20 on Thursdays.\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTA: Aditi Sethia\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three quizzes account for 10% of the grade.\nThe midsem exam accounts for 15% of the grade.\nThe endsem exam accounts for 20% of the grade.\nThere will be worksheets accompanying each lecture, due at midnight on the day of the lecture. Each worksheet is worth two points, and your total points from the worksheets is capped at 35 points, which contributes to 35% of the grade.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code ebtcrf2.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesWorksheetsQuizzesExams\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2024\n01. Icebreaker Puzzle\nThe Impossible Chessboard Situation and Hamming Codes\nBased on Miniature #5 and these videos: [1], [2].\n\n\n\n\n\n08 Jan, 2024\n02. Extremal Set Systems\nOddtown, Eventown, and Same-Size Intersections and Medium-Size Intersections\n\n\n\n\n\n\n11 Jan, 2024\n03. Extremal Set Systems\nErdős-Ko-Rado Theorem and Sperner's theorem\n\n\n\n\n\n\n15 Jan, 2024\n04. Extremal Set Systems\nVC Dimension and Sauer-Shelah Lemma\n\n\n\n\n\n\n18 Jan, 2024\n05. Extremal Set Systems\nSunflowers and Applications\n\n\n\n\n\n\n22 Jan, 2024\n06. Quiz 1\n\n\n\n\n\n\n25 Jan, 2024\n07. (No Class.)\n\n\n\n\n\n\n29 Jan, 2024\n08. Puzzle Interlude\nWalking in the Yard\n\n\n\n\n\n\n01 Feb, 2024\n09. Computational Interlude\nComputing Fibonacci Numbers, Quickly\nThis is the source for the quote in the tooltip :)\n\n\n\n\n\n05 Feb, 2024\n10. Quiz 2\n\n\n\n\n\n\n08 Feb, 2024\n11. Randomized Algorithms\nWarm Up: Finding Triangles · The Schwartz–Zippel theorem · Perfect Matchings and Determinants\n\n\n\n\n\n\n12 Feb, 2024\n12. Randomized Algorithms\nCounting Compositions · Is it Associative?\n\n\n\n\n\n\n15 Feb, 2024\n13. Puzzle Interlude\nTurning a Ladder Over a Finite Field\n\n\n\n\n\n\n26 Feb, 2024\n14. Geometry\nEquilateral Sets · Two Distances\n\n\n\n\n\n\n29 Feb, 2024\n15. Geometry\nAre These Distances Euclidean?\n\n\n\n\n\n\n04 Mar, 2024\n16. Geometry\nEquiangular Lines\n\n\n\n\n\n\n07 Mar, 2024\n17. Geometry\nOn the Difficulty of Reducing the Diameter\n\n\n\n\n\n\n11 Mar, 2024\n18. Geometry\nCovering a Cube Minus One Vertex\n\n\n\n\n\n\n14 Mar, 2024\n19. Geometry\nRotating the Cube\n\n\n\n\n\n\n18 Mar, 2024\n20. Puzzle Interlude\nOdd Distances · Tiling a Rectangle by Squares\n\n\n\n\n\n\n21 Mar, 2024\n21. Quiz 3\n\n\n\n\n\n\n01 Apr, 2024\n22. Graphs\nPacking Complete Bipartite Graphs · Three Petersens Are Not Enough\n\n\n\n\n\n\n04 Apr, 2024\n23. Graphs\nIn How Many Ways Can a Man Tile a Board?\n\n\n\n\n\n\n08 Apr, 2024\n24. Graphs\nPetersen, Hoffman–Singleton, and Maybe 57\n\n\n\n\n\n\n11 Apr, 2024\n25. Holiday (Idu'l Fitr)\n\n\n\n\n\n\n15 Apr, 2024\n26. Graphs\nCounting Spanning Trees\n\n\n\n\n\n\n18 Apr, 2024\n27. Graphs\nCutting Cheaply Using Eigenvectors\n\n\n\n\n\n\n22 Apr, 2024\n28. Final Puzzles\nThe End of the Small Coins · More Bricks — More Walls?\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nComing Soon.\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                04 Jan, 2024\n            \n            \n                Worksheet 01\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\nComing Soon.\n\n\n\nComing Soon.\n\n\n\n\n:::"
  },
  {
    "objectID": "2024/01-MG/04/index.html",
    "href": "2024/01-MG/04/index.html",
    "title": "#04. Nim (Vol 1, Ch 15)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/02/index.html",
    "href": "2024/01-MG/02/index.html",
    "title": "#02. Tic-tac-toes Game (Vol 10, Ch 9)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/18/index.html",
    "href": "2024/01-MG/18/index.html",
    "title": "#18. Game of Life (Vol. 10, Ch 20-22)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/16/index.html",
    "href": "2024/01-MG/16/index.html",
    "title": "#16. The Game of Halma (Vol. 10, Ch 11)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/10/index.html",
    "href": "2024/01-MG/10/index.html",
    "title": "#10. Sim, chomp, racetrack (Vol 11, Ch 9)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/index.html",
    "href": "2024/01-MG/index.html",
    "title": "Martin Gardner Reading Group | Spring 2024",
    "section": "",
    "text": "About the Meetups\n\n\n\n\n\nThis is a reading group based on games and puzzles described by Martin Gardner across his various books and columns. Curated and presented by Jyothi Krishnan.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find these meetings interesting if any of the following is relatable:\n\nyou enjoy puzzles and/or games\nyou are a Martin Gardner fan\nyou are generally math-curious\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nWe make no assumptions, although we appreciate everyone bringing their enthusiasm along :)\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nHexaflexagons And Other Mathematical Diversions · The First Scientific American Book of Mathematical Puzzles and Games by Martin Gardner\nThe Second Scientific American Book Of Mathematical Puzzles And Diversions by Martin Gardner\nNew Mathematical Diversions by Martin Gardner · The Mathematical Association of America (MAA)\nThe Unexpected Hanging And Other Mathematical Diversions · A Classic Collection of Puzzles and Games From Scientific American · Martin Gardner\nThe Sixth Book of Mathematical Diversions by Martin Gardner\nMathematical Carnival by Martin Gardner · The Mathematical Association of America (MAA)\nMathematical Magic Show by Martin Gardner · The Mathematical Association of America (MAA)\nMathematical Circus by Martin Gardner · The Mathematical Association of America (MAA)\nThe Magic Numbers of Dr. MATRIX by Martin Gardner · Prometheus Books Buffalo, New York\nWheels, Life and Other Mathematical Amusements by Martin Gardner · W. H. Freeman and Company, New York\nKnotted Doughnuts and Other Mathematical Entertainments by Martin Gardner · W. H. Freeman and Company, New York\nPenrose Tiles to Trapdoor Ciphers… And the Return of Dr. Matrix by Martin Gardner · The Mathematical Association of America (MAA)\nFractal Music Hypercards and More… Mathematical Recreations from SCIENTIFIC AMERICAN Magazine by Martin Gardner\nThe Last Recreations Hydras, Eggs, and Other Mathematical Mystifications · The final collection of Martin Gardner’s Mathematical Games column from Scientific American\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\nWill be updated.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nWe meet at 9PM IST on all weekdays in January except for the third week. Join via Zoom (Meeting ID: 992 2443 9902, Passcode: gardner) and sign up for reminders below.\n\n\n\n\n\n\n\n\n\n\nSign Up for Reminders\n\n\n\nIf you are a calendar person, you can use this link to add all events to your Google Calendar. This requires you to be signed in. Otherwise, you can sign up for daily reminders at 7PM using the form below.\n\n\n\n\n\n\n\n\n\n\n\n\nAcknowledgements. This reading group is led by Jyothi: many thanks to her for volunteering the idea and her time!\n\n\n\n\n\n\n\n\n\nNote. Topics are tentative and subject to change. Links to recordings will be added below as we go along. You can find the playlist of the recordings here.\n\n\n\n\n\n    \n        Date\n        Lecture\n        Notes\n        Video\n        Slides\n        Book Chapter\n    \n    \n    \n                    \n            \n                01 Jan, 2024\n            \n            \n                #01. Tic-Tac-Toe (Vol 1, Ch 4)\n                Tic-tac-toe, toe-tac-tic (the first player to finish a line loses), 3D variations, and Teeko (moving counters).\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                02 Jan, 2024\n            \n            \n                #02. Tic-tac-toes Game (Vol 10, Ch 9)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                03 Jan, 2024\n            \n            \n                #03. Generalised tic-tac-toe (Vol. 14 Ch 13) \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                04 Jan, 2024\n            \n            \n                #04. Nim (Vol 1, Ch 15)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                05 Jan, 2024\n            \n            \n                #05. Nim and Hackenbrush (Vol 10, Ch 14)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                08 Jan, 2024\n            \n            \n                #06. Wythoff Nim (Vol 13, Ch 8)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                09 Jan, 2024\n            \n            \n                #07. Sim, chomp, racetrack (Vol 11, Ch 9)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                10 Jan, 2024\n            \n            \n                #08. 4 unusual board games (Vol. 5, Ch 5)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                11 Jan, 2024\n            \n            \n                #09. Sprouts and Brussel sprouts (Vol.6, Ch 1)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                12 Jan, 2024\n            \n            \n                #10. The Game of Trust\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                15 Jan, 2024\n            \n            \n                #11. Game theory, guess it, foxholes (Vol. 7, Ch 3)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                16 Jan, 2024\n            \n            \n                #12. The Game of Hex (Vol. 1, Ch 8)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                17 Jan, 2024\n            \n            \n                #13. Dodgem and Other Simple Games\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                18 Jan, 2024\n            \n            \n                #14. Nim and Tac Tix (Vol 1, Ch 15)\n                Revisiting Tac Tix\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                29 Jan, 2024\n            \n            \n                #16. The Game of Halma (Vol. 10, Ch 11)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                30 Jan, 2024\n            \n            \n                #17. TBA\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                31 Jan, 2024\n            \n            \n                #18. Game of Life (Vol. 10, Ch 20-22)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                01 Feb, 2024\n            \n            \n                #19. Game of Life (Vol. 10, Ch 20-22)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                02 Feb, 2024\n            \n            \n                #20. Conway’s Surreal Numbers (Vol 13, Ch 4)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/01-MG/index.html#reading-group-on-martin-gardners-games-and-puzzles",
    "href": "2024/01-MG/index.html#reading-group-on-martin-gardners-games-and-puzzles",
    "title": "Martin Gardner Reading Group | Spring 2024",
    "section": "",
    "text": "About the Meetups\n\n\n\n\n\nThis is a reading group based on games and puzzles described by Martin Gardner across his various books and columns. Curated and presented by Jyothi Krishnan.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find these meetings interesting if any of the following is relatable:\n\nyou enjoy puzzles and/or games\nyou are a Martin Gardner fan\nyou are generally math-curious\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nWe make no assumptions, although we appreciate everyone bringing their enthusiasm along :)\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nHexaflexagons And Other Mathematical Diversions · The First Scientific American Book of Mathematical Puzzles and Games by Martin Gardner\nThe Second Scientific American Book Of Mathematical Puzzles And Diversions by Martin Gardner\nNew Mathematical Diversions by Martin Gardner · The Mathematical Association of America (MAA)\nThe Unexpected Hanging And Other Mathematical Diversions · A Classic Collection of Puzzles and Games From Scientific American · Martin Gardner\nThe Sixth Book of Mathematical Diversions by Martin Gardner\nMathematical Carnival by Martin Gardner · The Mathematical Association of America (MAA)\nMathematical Magic Show by Martin Gardner · The Mathematical Association of America (MAA)\nMathematical Circus by Martin Gardner · The Mathematical Association of America (MAA)\nThe Magic Numbers of Dr. MATRIX by Martin Gardner · Prometheus Books Buffalo, New York\nWheels, Life and Other Mathematical Amusements by Martin Gardner · W. H. Freeman and Company, New York\nKnotted Doughnuts and Other Mathematical Entertainments by Martin Gardner · W. H. Freeman and Company, New York\nPenrose Tiles to Trapdoor Ciphers… And the Return of Dr. Matrix by Martin Gardner · The Mathematical Association of America (MAA)\nFractal Music Hypercards and More… Mathematical Recreations from SCIENTIFIC AMERICAN Magazine by Martin Gardner\nThe Last Recreations Hydras, Eggs, and Other Mathematical Mystifications · The final collection of Martin Gardner’s Mathematical Games column from Scientific American\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\nWill be updated.\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nWe meet at 9PM IST on all weekdays in January except for the third week. Join via Zoom (Meeting ID: 992 2443 9902, Passcode: gardner) and sign up for reminders below.\n\n\n\n\n\n\n\n\n\n\nSign Up for Reminders\n\n\n\nIf you are a calendar person, you can use this link to add all events to your Google Calendar. This requires you to be signed in. Otherwise, you can sign up for daily reminders at 7PM using the form below.\n\n\n\n\n\n\n\n\n\n\n\n\nAcknowledgements. This reading group is led by Jyothi: many thanks to her for volunteering the idea and her time!\n\n\n\n\n\n\n\n\n\nNote. Topics are tentative and subject to change. Links to recordings will be added below as we go along. You can find the playlist of the recordings here.\n\n\n\n\n\n    \n        Date\n        Lecture\n        Notes\n        Video\n        Slides\n        Book Chapter\n    \n    \n    \n                    \n            \n                01 Jan, 2024\n            \n            \n                #01. Tic-Tac-Toe (Vol 1, Ch 4)\n                Tic-tac-toe, toe-tac-tic (the first player to finish a line loses), 3D variations, and Teeko (moving counters).\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                02 Jan, 2024\n            \n            \n                #02. Tic-tac-toes Game (Vol 10, Ch 9)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                03 Jan, 2024\n            \n            \n                #03. Generalised tic-tac-toe (Vol. 14 Ch 13) \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                04 Jan, 2024\n            \n            \n                #04. Nim (Vol 1, Ch 15)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                05 Jan, 2024\n            \n            \n                #05. Nim and Hackenbrush (Vol 10, Ch 14)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                08 Jan, 2024\n            \n            \n                #06. Wythoff Nim (Vol 13, Ch 8)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                09 Jan, 2024\n            \n            \n                #07. Sim, chomp, racetrack (Vol 11, Ch 9)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                10 Jan, 2024\n            \n            \n                #08. 4 unusual board games (Vol. 5, Ch 5)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                11 Jan, 2024\n            \n            \n                #09. Sprouts and Brussel sprouts (Vol.6, Ch 1)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                12 Jan, 2024\n            \n            \n                #10. The Game of Trust\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                15 Jan, 2024\n            \n            \n                #11. Game theory, guess it, foxholes (Vol. 7, Ch 3)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                16 Jan, 2024\n            \n            \n                #12. The Game of Hex (Vol. 1, Ch 8)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                17 Jan, 2024\n            \n            \n                #13. Dodgem and Other Simple Games\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                18 Jan, 2024\n            \n            \n                #14. Nim and Tac Tix (Vol 1, Ch 15)\n                Revisiting Tac Tix\n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                29 Jan, 2024\n            \n            \n                #16. The Game of Halma (Vol. 10, Ch 11)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                30 Jan, 2024\n            \n            \n                #17. TBA\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                31 Jan, 2024\n            \n            \n                #18. Game of Life (Vol. 10, Ch 20-22)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                01 Feb, 2024\n            \n            \n                #19. Game of Life (Vol. 10, Ch 20-22)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n                    \n            \n                02 Feb, 2024\n            \n            \n                #20. Conway’s Surreal Numbers (Vol 13, Ch 4)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                  \n            \n            \n                \n                    \n                  \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/01-MG/09/index.html",
    "href": "2024/01-MG/09/index.html",
    "title": "#09. Sprouts and Brussel sprouts (Vol.6, Ch 1)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/01/index.html",
    "href": "2024/01-MG/01/index.html",
    "title": "#01. Tic-Tac-Toe (Vol 1, Ch 4)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/15/index.html",
    "href": "2024/01-MG/15/index.html",
    "title": "#15. Peg solitaire (Vol. 4, Ch 11)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-MG/13/index.html",
    "href": "2024/01-MG/13/index.html",
    "title": "#13. Game theory, guess it, foxholes (Vol. 7, Ch 3)",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "2024/01-noc24-cs29/index.html",
    "href": "2024/01-noc24-cs29/index.html",
    "title": "noc24-cs29 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/01-noc24-cs29/index.html#noc24-cs29.",
    "href": "2024/01-noc24-cs29/index.html#noc24-cs29.",
    "title": "noc24-cs29 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-ES242/Q06.html",
    "href": "2024/03-ES242/Q06.html",
    "title": "Courses",
    "section": "",
    "text": "![[0016 Euler Tour on a Floor Plan]]\n\n![[0017 Make Eulerian]]\n\n![[0018 Bridges and Euler Circuits]]"
  },
  {
    "objectID": "2024/03-ES242/Q06.html#quiz-on-29-08-2024",
    "href": "2024/03-ES242/Q06.html#quiz-on-29-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0016 Euler Tour on a Floor Plan]]\n\n![[0017 Make Eulerian]]\n\n![[0018 Bridges and Euler Circuits]]"
  },
  {
    "objectID": "2024/03-ES242/Q03.html",
    "href": "2024/03-ES242/Q03.html",
    "title": "Courses",
    "section": "",
    "text": "![[0008 15 Puzzle Array Implementation]]\n\n![[0009 2048 Array Implementation]]"
  },
  {
    "objectID": "2024/03-ES242/Q03.html#quiz-on-20-08-2024",
    "href": "2024/03-ES242/Q03.html#quiz-on-20-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0008 15 Puzzle Array Implementation]]\n\n![[0009 2048 Array Implementation]]"
  },
  {
    "objectID": "2024/03-ES242/index.html",
    "href": "2024/03-ES242/index.html",
    "title": "ES242 | Fall 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nTuesdays and Fridays, 2:30 PM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice hours with instructors available by appointment\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\nCourse Enrollment: 112 students\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 Aug, 2024\nSets and Functions\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-ES242/index.html#es242.-discrete-mathematics",
    "href": "2024/03-ES242/index.html#es242.-discrete-mathematics",
    "title": "ES242 | Fall 2024",
    "section": "",
    "text": "About the Course\n\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nTuesdays and Fridays, 2:30 PM Room 10/201\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice hours with instructors available by appointment\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\nCourse Enrollment: 112 students\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 Aug, 2024\nSets and Functions\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-ES242/index.html#course-materials",
    "href": "2024/03-ES242/index.html#course-materials",
    "title": "ES242 | Fall 2024",
    "section": "",
    "text": "Date\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Aug, 2024\nIntroduction and Course Overview\n\n\n\n\n\n\n09 Aug, 2024\nSets and Functions\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/03-ES242/Q04.html",
    "href": "2024/03-ES242/Q04.html",
    "title": "Courses",
    "section": "",
    "text": "![[0010 Mr and Mrs Sharma Handshake Puzzle]]\n\n![[0011 Handshake Lemma]]\n\n![[0012 Distinct Degrees]]"
  },
  {
    "objectID": "2024/03-ES242/Q04.html#quiz-on-23-08-2024",
    "href": "2024/03-ES242/Q04.html#quiz-on-23-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0010 Mr and Mrs Sharma Handshake Puzzle]]\n\n![[0011 Handshake Lemma]]\n\n![[0012 Distinct Degrees]]"
  },
  {
    "objectID": "2024/03-ES242/Q01.html",
    "href": "2024/03-ES242/Q01.html",
    "title": "Courses",
    "section": "",
    "text": "![[0000 Identify Blocking Pairs]]\n\n![[0001 Best Pair Match]]\n\n![[0002 Mutual Favorites Partner in Every Stable Matching]]\n\n![[0003 Mutual Haters Never Partner in Any Stable Matching]]"
  },
  {
    "objectID": "2024/03-ES242/Q01.html#quiz-on-08-08-2024",
    "href": "2024/03-ES242/Q01.html#quiz-on-08-08-2024",
    "title": "Courses",
    "section": "",
    "text": "![[0000 Identify Blocking Pairs]]\n\n![[0001 Best Pair Match]]\n\n![[0002 Mutual Favorites Partner in Every Stable Matching]]\n\n![[0003 Mutual Haters Never Partner in Any Stable Matching]]"
  },
  {
    "objectID": "2024/01-ST699/index.html",
    "href": "2024/01-ST699/index.html",
    "title": "ST699 | Jan-Apr 2024",
    "section": "",
    "text": "(co-instructor with Dr. Jyothi Krishnan.)\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWe are going to play some games and analyze them! Here are some typical questions we will explore:\n\nWho is going to win assuming optimal play?\nWhat is the complexity of determining the winner (or a winning strategy) given the rules of a game?\n\nIf you are curious about how this typically goes, start with the excellent talks here and here.\nIf you want to play: here’s Subtraction, and here’s Sim.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou enjoy playing games,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is mostly self-contained, but a general degree of comfort with proofs and an interest in games (either in theory or practice) would be useful.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nGame Theory: A Playful Introduction, by Matt DeVos and Deborah A. Kent\nCombinatorial Game Theory, by Aaron N. Siegel\nWinning Ways for your Mathematical Plays, by Elwyn R. Berlekamp, John H. Conway, and Richard K. Guy\nLessons in Play, by Michael H. Albert, Richard J. Nowakowski, and David Wolfe\nMath Games with Bad Drawings, by Ben Orlin\nGames With Pencil And Paper, by Eric Solomon\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 7/101\nTimings: 2PM to 5PM on Saturdays (with a 20-minute break at 3:20PM).\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nPick any one of the following for 20 points:\n\nCreate your own game and demonstrate a non-trivial analysis\nImplement a known game in as an interactive JS application\nDevelop new insights about the complexity of an existing game\n\nFurther, there will be:\n\nFour assignments, issued on the 10th and due on the 20th of each month = 20 X 4 = 80 points\nNo exams!\n\nThe use of assistance from tools like chatGPT or similar is permitted for the development of the interactive experiences.\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nFor IITGN students, register through IMS as usual.\nNote to students of the IITM online BS program: you may register for this course officially for credit by signing up as a part-time visiting student of IIT Gandhinagar. Please get in touch for details.\nOthers: please send me an email at: neeldhara.m@iitgn.ac.in.\nMaterials for the assignments will be announced on this website.\nFor announcements, please join this Whatsapp Group.\n\n\n\n\n\nLecturesAssignments\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Jan, 2024\n01. Nim and Friends\nMany thanks to V Vinay for developing the narrative that we follow here for building up towards the winning criteria for Nim!\n\n\n\n\n\n13 Jan, 2024\n02. Hackenbush\n\n\n\n\n\n\n20 Jan, 2024\n03. Hanabi\nBased on this paper and the example run is from these slides.\n\n\n\n\n\n27 Jan, 2024\n04. Introduction to Transformations\n\n\n\n\n\n\n03 Feb, 2024\n05. Game Day!\n\n\n\n\n\n\n10 Feb, 2024\n06. More Complexity\n\n\n\n\n\n\n17 Feb, 2024\n07. The Game of SET\n\n\n\n\n\n\n02 Mar, 2024\n08. Hex and Fixed-Point Theorems\n\n\n\n\n\n\n09 Mar, 2024\n09. Hex and Fixed-Point Theorems (contd.)\n\n\n\n\n\n\n16 Mar, 2024\n10. Games We Love: Tic Tac Toe and Hand Cricket\n\n\n\n\n\n\n06 Apr, 2024\n11. TBA\n\n\n\n\n\n\n13 Apr, 2024\n12. Surreal Numbers\n\n\n\n\n\n\n20 Apr, 2024\n13. Presentations\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nThe first part of each assignment can be found on Mathmatize. Timelines on future assignments are suggestive and may change slightly.\nYou can find a solution template for the second part of the January assignment here. Feel free to make a copy and edit the LaTeX directly, or take a print out and write your answers in the blank spaces provided. Please send your solutions by email with the subject line: Topics in Games: January Assignment.\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                16 Jan, 2024\n            \n            \n                Assignment 1 (January)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Feb, 2024\n            \n            \n                Assignment 2 (February)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Mar, 2024\n            \n            \n                Assignment 3 (March)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Apr, 2024\n            \n            \n                Assignment 4 (April)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/01-ST699/index.html#st699.-special-topics-in-games",
    "href": "2024/01-ST699/index.html#st699.-special-topics-in-games",
    "title": "ST699 | Jan-Apr 2024",
    "section": "",
    "text": "(co-instructor with Dr. Jyothi Krishnan.)\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWe are going to play some games and analyze them! Here are some typical questions we will explore:\n\nWho is going to win assuming optimal play?\nWhat is the complexity of determining the winner (or a winning strategy) given the rules of a game?\n\nIf you are curious about how this typically goes, start with the excellent talks here and here.\nIf you want to play: here’s Subtraction, and here’s Sim.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if:\n\nyou enjoy playing games,\nyou enjoy logic puzzles like this one or probability puzzles like this one, or\nyou like box-stacking challenges.\n\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThe course is mostly self-contained, but a general degree of comfort with proofs and an interest in games (either in theory or practice) would be useful.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\n\nGame Theory: A Playful Introduction, by Matt DeVos and Deborah A. Kent\nCombinatorial Game Theory, by Aaron N. Siegel\nWinning Ways for your Mathematical Plays, by Elwyn R. Berlekamp, John H. Conway, and Richard K. Guy\nLessons in Play, by Michael H. Albert, Richard J. Nowakowski, and David Wolfe\nMath Games with Bad Drawings, by Ben Orlin\nGames With Pencil And Paper, by Eric Solomon\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: 7/101\nTimings: 2PM to 5PM on Saturdays (with a 20-minute break at 3:20PM).\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nPick any one of the following for 20 points:\n\nCreate your own game and demonstrate a non-trivial analysis\nImplement a known game in as an interactive JS application\nDevelop new insights about the complexity of an existing game\n\nFurther, there will be:\n\nFour assignments, issued on the 10th and due on the 20th of each month = 20 X 4 = 80 points\nNo exams!\n\nThe use of assistance from tools like chatGPT or similar is permitted for the development of the interactive experiences.\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\n\nFor IITGN students, register through IMS as usual.\nNote to students of the IITM online BS program: you may register for this course officially for credit by signing up as a part-time visiting student of IIT Gandhinagar. Please get in touch for details.\nOthers: please send me an email at: neeldhara.m@iitgn.ac.in.\nMaterials for the assignments will be announced on this website.\nFor announcements, please join this Whatsapp Group.\n\n\n\n\n\nLecturesAssignments\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n06 Jan, 2024\n01. Nim and Friends\nMany thanks to V Vinay for developing the narrative that we follow here for building up towards the winning criteria for Nim!\n\n\n\n\n\n13 Jan, 2024\n02. Hackenbush\n\n\n\n\n\n\n20 Jan, 2024\n03. Hanabi\nBased on this paper and the example run is from these slides.\n\n\n\n\n\n27 Jan, 2024\n04. Introduction to Transformations\n\n\n\n\n\n\n03 Feb, 2024\n05. Game Day!\n\n\n\n\n\n\n10 Feb, 2024\n06. More Complexity\n\n\n\n\n\n\n17 Feb, 2024\n07. The Game of SET\n\n\n\n\n\n\n02 Mar, 2024\n08. Hex and Fixed-Point Theorems\n\n\n\n\n\n\n09 Mar, 2024\n09. Hex and Fixed-Point Theorems (contd.)\n\n\n\n\n\n\n16 Mar, 2024\n10. Games We Love: Tic Tac Toe and Hand Cricket\n\n\n\n\n\n\n06 Apr, 2024\n11. TBA\n\n\n\n\n\n\n13 Apr, 2024\n12. Surreal Numbers\n\n\n\n\n\n\n20 Apr, 2024\n13. Presentations\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nThe first part of each assignment can be found on Mathmatize. Timelines on future assignments are suggestive and may change slightly.\nYou can find a solution template for the second part of the January assignment here. Feel free to make a copy and edit the LaTeX directly, or take a print out and write your answers in the blank spaces provided. Please send your solutions by email with the subject line: Topics in Games: January Assignment.\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                16 Jan, 2024\n            \n            \n                Assignment 1 (January)\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                12 Feb, 2024\n            \n            \n                Assignment 2 (February)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                10 Mar, 2024\n            \n            \n                Assignment 3 (March)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                01 Apr, 2024\n            \n            \n                Assignment 4 (April)\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-CS30.bak/index.html",
    "href": "2023/01-CS30.bak/index.html",
    "title": "NPTEL | CS82 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis is a course on algorithm design with a focus on issues of modeling and implementation. Each lecture will be focused entirely on one or two problems that reveal the use of a specific algorithmic technique. The techniques themselves are chosen to be in line with those covered in existing NPTEL courses on data structures and algorithms, so that students who complete those courses can find in this course a natural follow up.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is intended for anyone who wants to deepen their appreciation for algorithmic techniques that they have learned in a foundational course and/or would like to take a first step towards preparing for coding competitions such as the ICPC.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course assumes some background in the design and analysis of algorithm and a working familiarity with some programming language. Knowing C++ is useful but not required.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nBooks.\n\nAlgorithms by Jeff Erickson\nOpen Data Structures by Pat Morin\nAlgorithms Illuminated by Tim Roughgarden\nAlgorithm Design by J. Kleinberg and E. Tardos\nProblem Solving with Algorithms and Data Structures using C++ by Brad Miller, David Ranum, and Jan Pearce\nProblem Solving with Algorithms and Data Structures using Python by Brad Miller and David Ranum\nThink Data Structures by Allen B. Downey\nSome introductory notes on Design and Analysis of Algorithms (PDF) by Venkatesh Raman\nCompetitive Programming (4th Edition) by Steven Halim, Felix Halim, and Suhendry Effendy\nCompetitive Programmer’s Handbook by Antti Laaksonen\n\n\nOther NPTEL Courses.\n\nDSA with Python by Madhavan Mukund\nDSA by Naveen Garg\n\n\nYouTube Channels.\n\nCodechef\nErrichto\nWilliam Lin\nWilliam Fiset\n\n\nVisualizations.\n\nVisualgo\nOpenDSA\n\n\nBlogs.\n\nPetr Mitrichev\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures are pre-recorded. Any remote live sessions will be announced directly over email.\n\n\n\n\n\n\n\n\n\nTAs\n\n\n\n\n\nTBA\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nIf you have taken up this course through Swayam, then you would need to be formally enrolled in the course, and register for the certification exam to get a certificate of completion for the course.\nThe grading policy is as follows.\n\n12.5% of the final grade comes from the weekly quiz-based assignments. The best 8 out of 12 scores are considered.\n12.5% of the final grade comes from the weekly programming assignments, where the weekly score is the average of the programming assignments every week. Again, only the best 8 out of 12 are considered.\n75% of the final grade comes from the final exam, which is held at a physical location and whose format is similar to the weekly quizzes. Please note that there are no programming-based assessments in the final exam.\n\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Important Note. You will be eligible for a certificate only if average assignment score (quizzes and programming assignments combined) \\(\\geq\\) 10/25 and exam score \\(\\geq\\) 30/75. If one of the two criteria is not met, you will not get the certificate even if the final score is \\(\\geq\\) 40/100.\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nSign up for the course from here. (Note: enrollment ends on 30 Jan 2023!)\nAlso, you might find the following links useful:\n\nInvitation to the Discord Community\nGitHub repository of solutions to the problems discussed in the lectures\nLink to YouTube Playlist for the course\n\n\n\n\n\nLecturesAssignmentsExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2023\n1. Ad-Hoc and Implementation\nIn this week, we explore some puzzle-based problems in competitive programming. These don’t require any specific algorithmic background, but instead rely on ad-hoc observations and often simple implementations.\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\nThese are some practice assignments: the due date is simply the recommended completion deadline. There is no need to submit these assignments.\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Assignment 1\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Feb, 2023\n            \n            \n                Assignment 2\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Apr, 2023\n            \n            \n                Assignment 3\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-CS30.bak/index.html#cs614.-advanced-algorithms",
    "href": "2023/01-CS30.bak/index.html#cs614.-advanced-algorithms",
    "title": "NPTEL | CS82 | Jan-Apr 2022",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis is a course on algorithm design with a focus on issues of modeling and implementation. Each lecture will be focused entirely on one or two problems that reveal the use of a specific algorithmic technique. The techniques themselves are chosen to be in line with those covered in existing NPTEL courses on data structures and algorithms, so that students who complete those courses can find in this course a natural follow up.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nThis course is intended for anyone who wants to deepen their appreciation for algorithmic techniques that they have learned in a foundational course and/or would like to take a first step towards preparing for coding competitions such as the ICPC.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nThis course assumes some background in the design and analysis of algorithm and a working familiarity with some programming language. Knowing C++ is useful but not required.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nBooks.\n\nAlgorithms by Jeff Erickson\nOpen Data Structures by Pat Morin\nAlgorithms Illuminated by Tim Roughgarden\nAlgorithm Design by J. Kleinberg and E. Tardos\nProblem Solving with Algorithms and Data Structures using C++ by Brad Miller, David Ranum, and Jan Pearce\nProblem Solving with Algorithms and Data Structures using Python by Brad Miller and David Ranum\nThink Data Structures by Allen B. Downey\nSome introductory notes on Design and Analysis of Algorithms (PDF) by Venkatesh Raman\nCompetitive Programming (4th Edition) by Steven Halim, Felix Halim, and Suhendry Effendy\nCompetitive Programmer’s Handbook by Antti Laaksonen\n\n\nOther NPTEL Courses.\n\nDSA with Python by Madhavan Mukund\nDSA by Naveen Garg\n\n\nYouTube Channels.\n\nCodechef\nErrichto\nWilliam Lin\nWilliam Fiset\n\n\nVisualizations.\n\nVisualgo\nOpenDSA\n\n\nBlogs.\n\nPetr Mitrichev\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nLectures are pre-recorded. Any remote live sessions will be announced directly over email.\n\n\n\n\n\n\n\n\n\nTAs\n\n\n\n\n\nTBA\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\nIf you have taken up this course through Swayam, then you would need to be formally enrolled in the course, and register for the certification exam to get a certificate of completion for the course.\nThe grading policy is as follows.\n\n12.5% of the final grade comes from the weekly quiz-based assignments. The best 8 out of 12 scores are considered.\n12.5% of the final grade comes from the weekly programming assignments, where the weekly score is the average of the programming assignments every week. Again, only the best 8 out of 12 are considered.\n75% of the final grade comes from the final exam, which is held at a physical location and whose format is similar to the weekly quizzes. Please note that there are no programming-based assessments in the final exam.\n\n{{&lt; bi exclamation-triangle-fill color=\"indianred\" &gt;}} Important Note. You will be eligible for a certificate only if average assignment score (quizzes and programming assignments combined) \\(\\geq\\) 10/25 and exam score \\(\\geq\\) 30/75. If one of the two criteria is not met, you will not get the certificate even if the final score is \\(\\geq\\) 40/100.\n\n\n\n\n\n\n\n\n\nRegister\n\n\n\n\n\nSign up for the course from here. (Note: enrollment ends on 30 Jan 2023!)\nAlso, you might find the following links useful:\n\nInvitation to the Discord Community\nGitHub repository of solutions to the problems discussed in the lectures\nLink to YouTube Playlist for the course\n\n\n\n\n\nLecturesAssignmentsExams\n\n\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n04 Jan, 2023\n1. Ad-Hoc and Implementation\nIn this week, we explore some puzzle-based problems in competitive programming. These don’t require any specific algorithmic background, but instead rely on ad-hoc observations and often simple implementations.\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\nThese are some practice assignments: the due date is simply the recommended completion deadline. There is no need to submit these assignments.\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                11 Jan, 2023\n            \n            \n                Assignment 1\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                20 Feb, 2023\n            \n            \n                Assignment 2\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                03 Apr, 2023\n            \n            \n                Assignment 3\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 2\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n                    \n            \n                TBA\n            \n            \n                Exam 3\n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/01-CS614/exams/E02.html",
    "href": "2023/01-CS614/exams/E02.html",
    "title": "CS614. Advanced Algorithms. Exam 2.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\nArturo I. Merino, Torsten Mütze, Aaron Williams: All Your bases Are Belong to Us: Listing All Bases of a Matroid by Greedy Exchanges. FUN 2022: 22:1-22:28 [PDF]\nDaniel Lokshtanov, Bernardo Subercaseaux: Wordle Is NP-Hard. FUN 2022: 19:1-19:8 [PDF]\nChristoph Brause, Ingo Schiermeyer: Kernelization of the 3-path vertex cover problem. Discret. Math. 339(7): 1935-1939 (2016) [PDF]\nRémy Belmonte, Tesshu Hanaka, Ioannis Katsikarelis, Michael Lampis, Hirotaka Ono, Yota Otachi: Parameterized Complexity of Safe Set. J. Graph Algorithms Appl. 24(3): 215-245 (2020) [PDF]\n\n\n\n\n\n\n\nNote for Paper #4\n\n\n\n\n\nFocus on Sections 5 and 7 for the presentation.\n\n\n\n\nRadovan Cervený, Ondrej Suchý: Faster FPT Algorithm for 5-Path Vertex Cover. MFCS 2019: 32:1-32:13 [PDF]\n\n\n\n\n\n\n\nNote for Paper #5\n\n\n\n\n\nSince there are several cases to the branching algorithm, there is no need to comprehensively cover them in the presentation\n\n\n\n\nFedor V. Fomin, Torstein J. F. Strømme: Vertex Cover Structural Parameterization Revisited. WG 2016: 171-182 [PDF]\n\n\n\n\n\n\n\nNote for Paper #6\n\n\n\n\n\nFocus on Section 3 for the presentation.\n\n\n\n\nA Note on Max k-Vertex Cover: Faster FPT-AS, Smaller Approximate Kernel and Improved Approximation. SOSA 2019: 15:1-15:21 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nChoose an appropriate subset of results to present.\n\n\n\n\nDan Hefetz, Orna Kupferman, Amir Lellouche, Gal Vardi: Spanning-Tree Games. MFCS 2018: 35:1-35:16 [PDF]\nMichael Lampis, Valia Mitsou: The Computational Complexity of the Game of Set and Its Theoretical Applications. LATIN 2014: 24-34 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nFocus on the NP-completeness and FPT results here.\n\n\n\n\nJulián Mestre: A Primal-Dual Approximation Algorithm for Partial Vertex Cover: Making Educated Guesses. APPROX-RANDOM 2005: 182-191 [PDF]"
  },
  {
    "objectID": "2023/01-CS614/exams/E02.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/exams/E02.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. Exam 2.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\nArturo I. Merino, Torsten Mütze, Aaron Williams: All Your bases Are Belong to Us: Listing All Bases of a Matroid by Greedy Exchanges. FUN 2022: 22:1-22:28 [PDF]\nDaniel Lokshtanov, Bernardo Subercaseaux: Wordle Is NP-Hard. FUN 2022: 19:1-19:8 [PDF]\nChristoph Brause, Ingo Schiermeyer: Kernelization of the 3-path vertex cover problem. Discret. Math. 339(7): 1935-1939 (2016) [PDF]\nRémy Belmonte, Tesshu Hanaka, Ioannis Katsikarelis, Michael Lampis, Hirotaka Ono, Yota Otachi: Parameterized Complexity of Safe Set. J. Graph Algorithms Appl. 24(3): 215-245 (2020) [PDF]\n\n\n\n\n\n\n\nNote for Paper #4\n\n\n\n\n\nFocus on Sections 5 and 7 for the presentation.\n\n\n\n\nRadovan Cervený, Ondrej Suchý: Faster FPT Algorithm for 5-Path Vertex Cover. MFCS 2019: 32:1-32:13 [PDF]\n\n\n\n\n\n\n\nNote for Paper #5\n\n\n\n\n\nSince there are several cases to the branching algorithm, there is no need to comprehensively cover them in the presentation\n\n\n\n\nFedor V. Fomin, Torstein J. F. Strømme: Vertex Cover Structural Parameterization Revisited. WG 2016: 171-182 [PDF]\n\n\n\n\n\n\n\nNote for Paper #6\n\n\n\n\n\nFocus on Section 3 for the presentation.\n\n\n\n\nA Note on Max k-Vertex Cover: Faster FPT-AS, Smaller Approximate Kernel and Improved Approximation. SOSA 2019: 15:1-15:21 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nChoose an appropriate subset of results to present.\n\n\n\n\nDan Hefetz, Orna Kupferman, Amir Lellouche, Gal Vardi: Spanning-Tree Games. MFCS 2018: 35:1-35:16 [PDF]\nMichael Lampis, Valia Mitsou: The Computational Complexity of the Game of Set and Its Theoretical Applications. LATIN 2014: 24-34 [PDF]\n\n\n\n\n\n\n\nNote for Paper #7\n\n\n\n\n\nFocus on the NP-completeness and FPT results here.\n\n\n\n\nJulián Mestre: A Primal-Dual Approximation Algorithm for Partial Vertex Cover: Making Educated Guesses. APPROX-RANDOM 2005: 182-191 [PDF]"
  },
  {
    "objectID": "2023/01-CS614/exams/E01.html",
    "href": "2023/01-CS614/exams/E01.html",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nRemarks\n\n\n\nProblem indices on Gradescope for Problem 1 are off-by-one. Add one to the index here to match to Gradescope.\nErrata based on feedback from the class (thanks!) — these changes have been made in the questions below:\n\nQ5: it should have been \\(v \\in S\\) and not \\(v \\in G\\).\nQ1.4: assume that the cycles \\(C\\) and \\(D\\) are edge-disjoint.\nQ1.6: the last return statement is G and not G-v (the vertex \\(v\\) is moved to \\(F\\), not removed from the graph).\n\n\n\n\n\n\n\n\n\nProblem 1. The Constrained Cycle Hitting Set (CCHS) Problem.\n\n\n\n\n\n\n\n\n\nMarks Distribution.\n\n\n\nThis problem is worth 20 points overall. All subproblems carry two points each except 1.9 (which is zero marks).\n\n\nLet \\(G = (V,E)\\) be a simple and undirected graph. Let \\(F \\subseteq V\\) be a subset of vertices that we will call a forbidden subset. An instance of CCHS is given by \\((G,F,k)\\), where \\(k \\in \\mathbb{Z}^+\\) is a budget. Such an instance is a YES-instance if there exists a subset of \\(S \\subseteq V \\setminus F\\) such that:\n\n\\(|S| \\leqslant k\\), and\n\\(G \\setminus S\\) is a forest, i.e, there are no cycles.\n\nSuch a subset is called a constrained cycle hitting set with respect to \\(F\\). In this question, we will develop a \\(c^k\\) algorithm for solving a CCHS instance, combining reduction and branching rules in a spirit somewhat similar to what we have done for Vertex Cover in class.\nOur goal will be to return a solution, i.e, a subset of vertices that is a constrained cycle hitting set with respect to \\(F\\). In particular, an informal overview of our approach, detailed further in the questions below, is the following:\n\nWe will eliminate low-degree (vertices of degree at most one) vertices, and branch on high-degree vertices.\nFor the base case, we will find ourselves “stuck” when the graph only has vertices of degree at most two, but this can be handled in polynomial time.\n\nOur algorithm will be denoted solve-CCHS(G,F,k). We begin the following straightforward rules:\n\nIf k &lt; 0, return NO.\nIf \\(V(G) = \\emptyset\\), return \\(\\emptyset\\).\n\n\n\n\n\n\n\nProblem 1.0 No Hope Rule\n\n\n\n\n\nSuppose \\(G[F]\\) has a cycle \\(C\\). Note that all vertices of \\(C\\) belong to \\(F\\). Then return:\n\nNO\nsolve-CCHS(G-v,F-v,k-1) where \\(v\\) is a maximum degree vertex from \\(C\\).\nsolve-CCHS(G-v,F-v,k-1) where \\(v\\) is a minimum degree vertex from \\(C\\).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.1 Low Degree Rule.\n\n\n\n\n\nIf a vertex \\(v\\) has degree zero or one, then return:\n\nsolve-CCHS(G-v,F-v,k).\nsolve-CCHS(G-v,F-v,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Forced Vertex Rule.\n\n\n\n\n\nIf a vertex \\(v \\in G \\setminus F\\) has two neighbors in a single connected component of \\(G[F]\\), then return:\n\nsolve-CCHS(G-v,F,k).\nsolve-CCHS(G-v,F,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.3 High Degree Vertex Has Low Degree - Structure I\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nLet \\(C\\) be a cycle in \\(G\\). Which of the following scenarios are not feasible?\n\n\\(C \\cap F \\neq \\emptyset\\) and \\(C \\cap (V \\setminus F) \\neq \\emptyset\\)\n\\(C \\cap F = \\emptyset\\) and \\(C \\cap (V \\setminus F) \\neq \\emptyset\\)\n\\(C \\cap F \\neq \\emptyset\\) and \\(C \\cap (V \\setminus F) = \\emptyset\\)\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.4 High Degree Vertex Has Low Degree - Structure II\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nLet \\(C\\) and \\(D\\) be two edge-disjoint cycles in \\(G\\). Which of the following scenarios are not feasible?\n\n\\(C \\cap D \\neq \\emptyset\\)\n\\((C \\cap F) \\cap (D \\cap F) \\neq \\emptyset\\)\n\\((C \\cap (V\\setminus F)) \\cap (D \\cap (V \\setminus F)) \\neq \\emptyset\\)\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.5 High Degree Vertex Has Low Degree - Rule\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nConsider the following algorithm to solve this instance:\ninit X = emptyset\nwhile G\\X has a cycle C:\n    let v be a vertex in C\\F:\n        add v to X\nif |X| &gt; k:\n    return NO\nelse:\n    return X\nWhat can you say about the procedure above?\n\nIt correctly solves the kind of CCHS questions being considered in this problem.\nIt will not be correct if there are no vertices in \\(C\\setminus F\\), as required in line 3.\nIt will not be correct if there are two overlapping cycles in the instance.\n\nPick the correct option and justify your answer briefly. If you believe this is not the right algorithm, please suggest an alternative that works. In further questions when we refer to the rule in problem 1.5, we are referring to either the algorithm above or the one in your justification.\n\n\n\n\n\n\n\n\n\nProblem 1.6 The Branching Step\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1, 1.2, and 1.5 do not apply. Let \\(v\\) be a vertex in \\(G \\setminus F\\) of maximum degree. Now we branch as follows:\nOption A.\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption B.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k-1) // omit v\nOption C.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption D.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F,k) // omit v\nPick the right branching strategy and justify your answer.\n\n\n\nWe summarize the overall algorithm below.\nIf k &lt; 0, return NO.\nIf V(G) is empty, return the empty set.\n\nApply rules 1.0, 1.1, and 1.2.\n\nPick a vertex v in G\\F of maximum degree.\n\nIf d(v) = 2, apply rule 1.5.\nOtherwise branch according to 1.6.\nIn the next few questions, we will analyze the running time of this algorithm. Assume that the algorithm is called with \\(F = \\emptyset\\), i.e, there are no forbidden vertices to begin with. Fix an execution path \\(P\\) in the branching tree1 of the algorithm that does not return NO. Now:\n\nWe use \\(S(P)\\) to denote the output: note that this would consist of the set of vertices that are removed from the instance for inclusion in the solution, i.e, vertices chosen by the first branch in Step 1.6.\nWe use \\(F(P)\\) to denote the set of vertices that are made forbidden along the path \\(P\\), i.e, these are vertices chosen by the second branch in Step 1.6.\n\nNote that at the output node, the instance we have is \\((G,F(P),\\ell)\\) for some \\(\\ell \\leqslant k\\), where \\(S(P)\\) is a constrained cycle hitting set with respect to \\(F(P)\\) of size at most \\(k - \\ell\\). Also the number of steps in the execution path \\(P\\) is given by \\(|F(P)| + |S(P)|\\), since every time we branch, we either include a vertex in the solution or make it forbidden.\n\n\n\n\n\n\nProblem 1.7 Degree 3 vs Leaves in Trees\n\n\n\n\n\nLet \\(T\\) be a tree and let \\(X\\) be the set of leaves in \\(T\\), and let \\(Y\\) be the set of vertices of degree three or more in \\(T\\). Show that:\n\\[\\sum_{v \\in Y} (d(v)-2) = |X| - 2,\\]\nusing elementary facts about trees.\n\n\n\n\n\n\n\n\n\nProblem 1.8 Degree Evolution\n\n\n\n\n\nFix an execution path \\(P\\) on an instance \\((G,\\emptyset,k)\\) (i.e, a path from root to leaf in the branching tree associated with the algorithm when the input is \\((G,\\emptyset,k)\\)) and consider a vertex \\(v\\) that belongs to \\(F(P)\\), which is to say that the vertex \\(v\\) was included in the set of forbidden vertices at some point during the execution of the algorithm. Denote the instance at this stage of the algorithm by \\((H,F,k^\\prime)\\). In particular, \\(H\\) is the graph obtained after \\(v\\) was included in \\(F\\). Let \\(d(v)\\) denote the degree of the vertex \\(v\\) in the original instance \\(G\\), and let \\(d^\\star(v)\\) denote its degree in the graph \\(H\\). Which of the following is true?\n\n\\(3 \\leqslant d^\\star(v) \\leqslant d(v)\\)\n\\(3 \\leqslant d^\\star(v) &lt; d(v)\\)\n\\(d^\\star(v) \\geqslant \\min(d(v),3)\\)\n\\(d^\\star(v) &gt; \\min(d(v),3)\\)\n\n\n\n\n\n\n\n\n\n\nProblem 1.9 Successful Execution Paths are Short\n\n\n\n\n\nConsider an execution path \\(P\\) that does not return NO. Show that \\(F(P) \\leqslant 3S(P)\\).\nThis is an optional question that you can skip. It carries no points.\n\n\n\n\n\n\n\n\n\nProblem 1.10 The Final Running Time\n\n\n\n\n\nCan you use the fact from the previous question to come up with an algorithm for CCHS that runs in time \\(O^\\star(16^k)\\)? Note that the \\(O^\\star(\\cdot)\\) notation is used to hide factors that are polynomial in \\(n\\) and \\(k\\).\nHint: Use the algorithm described previously in the question, but modify it slightly. In particular, if an execution path pushes more than \\(3S(P)\\) vertices into the forbidden set \\(F\\), can you terminate it prematurely? Also, what is the cost of the successful execution paths?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. GreedyHS [2 points]\n\n\n\nLet \\(U=\\left\\{x_1, \\ldots, x_n\\right\\}\\) be an univere of \\(n\\) elements. Suppose we have a family \\(\\mathcal{F}\\) over \\(U\\) that consists of three-sized subsets of \\(U\\), for example:\n\\[\n\\mathcal{F} = \\left(x_1, x_3, x_4\\right),\\left(x_2, x_3, x_7\\right),\\left(x_1, x_5, x_6\\right)\n\\]\nWe want to find a smallest subset \\(X\\) of \\(U\\) such that for all sets \\(S \\in \\mathcal{F}\\), \\(S \\cap X \\neq \\emptyset\\).\nConsider the following algorithm for this problem.\nGreedy(U,F)\n\nInit X = emptyset\nwhile F is non-empty do:\n    Take an arbitrary set S in F.\n    Let x be an element in S\n    X = X U {x}\n    Remove all sets from F that contain x\nend while\nWhat can you say about the worst-case approximation ratio of this algorithm?\n\n\n\n\n\n\n\n\nProblem 3. Knapsack [2 points]\n\n\n\nConsider the knapsack problem. Given a set \\(X=\\left\\{x_1, \\ldots, x_n\\right\\}\\) of \\(n\\) items with weights \\(w\\left(x_i\\right)\\) and values \\(v\\left(x_i\\right)\\), it asks for the highest total value of items we can put into our knapsack such that the total weight of all these items is at most \\(W\\).\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\nProblem 4. Rectangle Covering [4 Points]\n\n\n\n\n\n\nRectangle Cover Problem Example\n\n\nSuppose we have a set \\(P=\\left\\{p_1, \\ldots, p_n\\right\\}\\) of \\(n\\) points and a set \\(R=\\left\\{r_1 \\ldots, r_m\\right\\}\\) of \\(m\\) rectangles, as in the image above. Each rectangle \\(r_i \\in R\\) has a certain cost \\(c_i&gt;0\\) associated with it. We wish to find a subset \\(S \\subseteq R\\) of rectangles whose cost is minimized such that the rectangles in \\(S\\) together cover all points in \\(P\\).\nWe wish to model this problem as a 0/1-LP. To this end we introduce a decision variable \\(x_i\\) for each rectangle \\(r_i \\in R\\), where \\(x_i=1\\) corresponds to putting rectangle \\(r_i\\) into \\(S\\) and \\(x_i=0\\) corresponds to not putting \\(r_i\\) into \\(S\\). otherwise. Furthermore, for a point \\(p_j \\in P\\), define \\(R\\left(p_j\\right)=\\left\\{r_i \\in R: p_j \\in r_i\\right\\}\\).\n\n\n\n\n\n\nLP for Rectangle Cover\n\n\n\n\n\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\n\nLP-based Approximation for Rectangle Cover\n\n\n\n\n\nDescribe a \\(5\\)-approximation assuming that each point is contained in at most 5 rectangles.\n\n\n\n\n\n\n\n\n\n\n\nProblem 5. Dominating Set Reduction Rule When The Graph has No Short Cycles [2 points]\n\n\n\nSuppose \\(G\\) is a simple, undirected graph that has no cycles of length three or four. Recall that a subset \\(S\\) of vertices of \\(G\\) is called a dominating set if every vertex \\(v\\) of \\(G\\) either belongs to \\(S\\) or has a neighbor in \\(S\\), in other words, \\(N[v] \\cap S \\neq \\emptyset\\).\nLet \\(S\\) be a dominating set of \\(G\\) of size at most \\(k\\), where \\(G\\) is as given above (i.e, \\(G\\) has no triangles and no cycles of length four). Show that if the degree of \\(v\\) is more than \\(k\\) in \\(G\\), then \\(v \\in S\\)."
  },
  {
    "objectID": "2023/01-CS614/exams/E01.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/exams/E01.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nRemarks\n\n\n\nProblem indices on Gradescope for Problem 1 are off-by-one. Add one to the index here to match to Gradescope.\nErrata based on feedback from the class (thanks!) — these changes have been made in the questions below:\n\nQ5: it should have been \\(v \\in S\\) and not \\(v \\in G\\).\nQ1.4: assume that the cycles \\(C\\) and \\(D\\) are edge-disjoint.\nQ1.6: the last return statement is G and not G-v (the vertex \\(v\\) is moved to \\(F\\), not removed from the graph).\n\n\n\n\n\n\n\n\n\nProblem 1. The Constrained Cycle Hitting Set (CCHS) Problem.\n\n\n\n\n\n\n\n\n\nMarks Distribution.\n\n\n\nThis problem is worth 20 points overall. All subproblems carry two points each except 1.9 (which is zero marks).\n\n\nLet \\(G = (V,E)\\) be a simple and undirected graph. Let \\(F \\subseteq V\\) be a subset of vertices that we will call a forbidden subset. An instance of CCHS is given by \\((G,F,k)\\), where \\(k \\in \\mathbb{Z}^+\\) is a budget. Such an instance is a YES-instance if there exists a subset of \\(S \\subseteq V \\setminus F\\) such that:\n\n\\(|S| \\leqslant k\\), and\n\\(G \\setminus S\\) is a forest, i.e, there are no cycles.\n\nSuch a subset is called a constrained cycle hitting set with respect to \\(F\\). In this question, we will develop a \\(c^k\\) algorithm for solving a CCHS instance, combining reduction and branching rules in a spirit somewhat similar to what we have done for Vertex Cover in class.\nOur goal will be to return a solution, i.e, a subset of vertices that is a constrained cycle hitting set with respect to \\(F\\). In particular, an informal overview of our approach, detailed further in the questions below, is the following:\n\nWe will eliminate low-degree (vertices of degree at most one) vertices, and branch on high-degree vertices.\nFor the base case, we will find ourselves “stuck” when the graph only has vertices of degree at most two, but this can be handled in polynomial time.\n\nOur algorithm will be denoted solve-CCHS(G,F,k). We begin the following straightforward rules:\n\nIf k &lt; 0, return NO.\nIf \\(V(G) = \\emptyset\\), return \\(\\emptyset\\).\n\n\n\n\n\n\n\nProblem 1.0 No Hope Rule\n\n\n\n\n\nSuppose \\(G[F]\\) has a cycle \\(C\\). Note that all vertices of \\(C\\) belong to \\(F\\). Then return:\n\nNO\nsolve-CCHS(G-v,F-v,k-1) where \\(v\\) is a maximum degree vertex from \\(C\\).\nsolve-CCHS(G-v,F-v,k-1) where \\(v\\) is a minimum degree vertex from \\(C\\).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.1 Low Degree Rule.\n\n\n\n\n\nIf a vertex \\(v\\) has degree zero or one, then return:\n\nsolve-CCHS(G-v,F-v,k).\nsolve-CCHS(G-v,F-v,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.2 Forced Vertex Rule.\n\n\n\n\n\nIf a vertex \\(v \\in G \\setminus F\\) has two neighbors in a single connected component of \\(G[F]\\), then return:\n\nsolve-CCHS(G-v,F,k).\nsolve-CCHS(G-v,F,k-1).\n\nChoose the correct option and justify the correctness of the reduction rule.\n\n\n\n\n\n\n\n\n\nProblem 1.3 High Degree Vertex Has Low Degree - Structure I\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nLet \\(C\\) be a cycle in \\(G\\). Which of the following scenarios are not feasible?\n\n\\(C \\cap F \\neq \\emptyset\\) and \\(C \\cap (V \\setminus F) \\neq \\emptyset\\)\n\\(C \\cap F = \\emptyset\\) and \\(C \\cap (V \\setminus F) \\neq \\emptyset\\)\n\\(C \\cap F \\neq \\emptyset\\) and \\(C \\cap (V \\setminus F) = \\emptyset\\)\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.4 High Degree Vertex Has Low Degree - Structure II\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nLet \\(C\\) and \\(D\\) be two edge-disjoint cycles in \\(G\\). Which of the following scenarios are not feasible?\n\n\\(C \\cap D \\neq \\emptyset\\)\n\\((C \\cap F) \\cap (D \\cap F) \\neq \\emptyset\\)\n\\((C \\cap (V\\setminus F)) \\cap (D \\cap (V \\setminus F)) \\neq \\emptyset\\)\n\nPick the correct option and justify your answer briefly.\n\n\n\n\n\n\n\n\n\nProblem 1.5 High Degree Vertex Has Low Degree - Rule\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1 and 1.2 do not apply. Suppose further that \\(d(v) = 2\\).\nConsider the following algorithm to solve this instance:\ninit X = emptyset\nwhile G\\X has a cycle C:\n    let v be a vertex in C\\F:\n        add v to X\nif |X| &gt; k:\n    return NO\nelse:\n    return X\nWhat can you say about the procedure above?\n\nIt correctly solves the kind of CCHS questions being considered in this problem.\nIt will not be correct if there are no vertices in \\(C\\setminus F\\), as required in line 3.\nIt will not be correct if there are two overlapping cycles in the instance.\n\nPick the correct option and justify your answer briefly. If you believe this is not the right algorithm, please suggest an alternative that works. In further questions when we refer to the rule in problem 1.5, we are referring to either the algorithm above or the one in your justification.\n\n\n\n\n\n\n\n\n\nProblem 1.6 The Branching Step\n\n\n\n\n\nLet \\(v\\) be a vertex of maximum degree in \\(G \\setminus F\\), and suppose \\(G\\) is an instance where the rules from Problem 1.0, 1.1, 1.2, and 1.5 do not apply. Let \\(v\\) be a vertex in \\(G \\setminus F\\) of maximum degree. Now we branch as follows:\nOption A.\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption B.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F U {v},k-1) // omit v\nOption C.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X\notherwise:\n    return solve-CCHS(G,F U {v},k) // omit v\nOption D.\n\nX = solve-CCHS(G-v,F,k-1) // pick v\nif X is not NO:\n    return X U {v}\notherwise:\n    return solve-CCHS(G,F,k) // omit v\nPick the right branching strategy and justify your answer.\n\n\n\nWe summarize the overall algorithm below.\nIf k &lt; 0, return NO.\nIf V(G) is empty, return the empty set.\n\nApply rules 1.0, 1.1, and 1.2.\n\nPick a vertex v in G\\F of maximum degree.\n\nIf d(v) = 2, apply rule 1.5.\nOtherwise branch according to 1.6.\nIn the next few questions, we will analyze the running time of this algorithm. Assume that the algorithm is called with \\(F = \\emptyset\\), i.e, there are no forbidden vertices to begin with. Fix an execution path \\(P\\) in the branching tree1 of the algorithm that does not return NO. Now:\n\nWe use \\(S(P)\\) to denote the output: note that this would consist of the set of vertices that are removed from the instance for inclusion in the solution, i.e, vertices chosen by the first branch in Step 1.6.\nWe use \\(F(P)\\) to denote the set of vertices that are made forbidden along the path \\(P\\), i.e, these are vertices chosen by the second branch in Step 1.6.\n\nNote that at the output node, the instance we have is \\((G,F(P),\\ell)\\) for some \\(\\ell \\leqslant k\\), where \\(S(P)\\) is a constrained cycle hitting set with respect to \\(F(P)\\) of size at most \\(k - \\ell\\). Also the number of steps in the execution path \\(P\\) is given by \\(|F(P)| + |S(P)|\\), since every time we branch, we either include a vertex in the solution or make it forbidden.\n\n\n\n\n\n\nProblem 1.7 Degree 3 vs Leaves in Trees\n\n\n\n\n\nLet \\(T\\) be a tree and let \\(X\\) be the set of leaves in \\(T\\), and let \\(Y\\) be the set of vertices of degree three or more in \\(T\\). Show that:\n\\[\\sum_{v \\in Y} (d(v)-2) = |X| - 2,\\]\nusing elementary facts about trees.\n\n\n\n\n\n\n\n\n\nProblem 1.8 Degree Evolution\n\n\n\n\n\nFix an execution path \\(P\\) on an instance \\((G,\\emptyset,k)\\) (i.e, a path from root to leaf in the branching tree associated with the algorithm when the input is \\((G,\\emptyset,k)\\)) and consider a vertex \\(v\\) that belongs to \\(F(P)\\), which is to say that the vertex \\(v\\) was included in the set of forbidden vertices at some point during the execution of the algorithm. Denote the instance at this stage of the algorithm by \\((H,F,k^\\prime)\\). In particular, \\(H\\) is the graph obtained after \\(v\\) was included in \\(F\\). Let \\(d(v)\\) denote the degree of the vertex \\(v\\) in the original instance \\(G\\), and let \\(d^\\star(v)\\) denote its degree in the graph \\(H\\). Which of the following is true?\n\n\\(3 \\leqslant d^\\star(v) \\leqslant d(v)\\)\n\\(3 \\leqslant d^\\star(v) &lt; d(v)\\)\n\\(d^\\star(v) \\geqslant \\min(d(v),3)\\)\n\\(d^\\star(v) &gt; \\min(d(v),3)\\)\n\n\n\n\n\n\n\n\n\n\nProblem 1.9 Successful Execution Paths are Short\n\n\n\n\n\nConsider an execution path \\(P\\) that does not return NO. Show that \\(F(P) \\leqslant 3S(P)\\).\nThis is an optional question that you can skip. It carries no points.\n\n\n\n\n\n\n\n\n\nProblem 1.10 The Final Running Time\n\n\n\n\n\nCan you use the fact from the previous question to come up with an algorithm for CCHS that runs in time \\(O^\\star(16^k)\\)? Note that the \\(O^\\star(\\cdot)\\) notation is used to hide factors that are polynomial in \\(n\\) and \\(k\\).\nHint: Use the algorithm described previously in the question, but modify it slightly. In particular, if an execution path pushes more than \\(3S(P)\\) vertices into the forbidden set \\(F\\), can you terminate it prematurely? Also, what is the cost of the successful execution paths?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. GreedyHS [2 points]\n\n\n\nLet \\(U=\\left\\{x_1, \\ldots, x_n\\right\\}\\) be an univere of \\(n\\) elements. Suppose we have a family \\(\\mathcal{F}\\) over \\(U\\) that consists of three-sized subsets of \\(U\\), for example:\n\\[\n\\mathcal{F} = \\left(x_1, x_3, x_4\\right),\\left(x_2, x_3, x_7\\right),\\left(x_1, x_5, x_6\\right)\n\\]\nWe want to find a smallest subset \\(X\\) of \\(U\\) such that for all sets \\(S \\in \\mathcal{F}\\), \\(S \\cap X \\neq \\emptyset\\).\nConsider the following algorithm for this problem.\nGreedy(U,F)\n\nInit X = emptyset\nwhile F is non-empty do:\n    Take an arbitrary set S in F.\n    Let x be an element in S\n    X = X U {x}\n    Remove all sets from F that contain x\nend while\nWhat can you say about the worst-case approximation ratio of this algorithm?\n\n\n\n\n\n\n\n\nProblem 3. Knapsack [2 points]\n\n\n\nConsider the knapsack problem. Given a set \\(X=\\left\\{x_1, \\ldots, x_n\\right\\}\\) of \\(n\\) items with weights \\(w\\left(x_i\\right)\\) and values \\(v\\left(x_i\\right)\\), it asks for the highest total value of items we can put into our knapsack such that the total weight of all these items is at most \\(W\\).\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\nProblem 4. Rectangle Covering [4 Points]\n\n\n\n\n\n\nRectangle Cover Problem Example\n\n\nSuppose we have a set \\(P=\\left\\{p_1, \\ldots, p_n\\right\\}\\) of \\(n\\) points and a set \\(R=\\left\\{r_1 \\ldots, r_m\\right\\}\\) of \\(m\\) rectangles, as in the image above. Each rectangle \\(r_i \\in R\\) has a certain cost \\(c_i&gt;0\\) associated with it. We wish to find a subset \\(S \\subseteq R\\) of rectangles whose cost is minimized such that the rectangles in \\(S\\) together cover all points in \\(P\\).\nWe wish to model this problem as a 0/1-LP. To this end we introduce a decision variable \\(x_i\\) for each rectangle \\(r_i \\in R\\), where \\(x_i=1\\) corresponds to putting rectangle \\(r_i\\) into \\(S\\) and \\(x_i=0\\) corresponds to not putting \\(r_i\\) into \\(S\\). otherwise. Furthermore, for a point \\(p_j \\in P\\), define \\(R\\left(p_j\\right)=\\left\\{r_i \\in R: p_j \\in r_i\\right\\}\\).\n\n\n\n\n\n\nLP for Rectangle Cover\n\n\n\n\n\nDescribe a 0/1-LP that models the problem correctly.\n\n\n\n\n\n\n\n\n\nLP-based Approximation for Rectangle Cover\n\n\n\n\n\nDescribe a \\(5\\)-approximation assuming that each point is contained in at most 5 rectangles.\n\n\n\n\n\n\n\n\n\n\n\nProblem 5. Dominating Set Reduction Rule When The Graph has No Short Cycles [2 points]\n\n\n\nSuppose \\(G\\) is a simple, undirected graph that has no cycles of length three or four. Recall that a subset \\(S\\) of vertices of \\(G\\) is called a dominating set if every vertex \\(v\\) of \\(G\\) either belongs to \\(S\\) or has a neighbor in \\(S\\), in other words, \\(N[v] \\cap S \\neq \\emptyset\\).\nLet \\(S\\) be a dominating set of \\(G\\) of size at most \\(k\\), where \\(G\\) is as given above (i.e, \\(G\\) has no triangles and no cycles of length four). Show that if the degree of \\(v\\) is more than \\(k\\) in \\(G\\), then \\(v \\in S\\)."
  },
  {
    "objectID": "2023/01-CS614/exams/E01.html#footnotes",
    "href": "2023/01-CS614/exams/E01.html#footnotes",
    "title": "CS614. Advanced Algorithms. Exam 1.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that the branching tree has a node for all executions of step 1.6, with all non-branching steps executed at the node itself.↩︎"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L02.html",
    "href": "2023/01-CS614/quizzes/L02.html",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L02.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L02.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L07.html",
    "href": "2023/01-CS614/quizzes/L07.html",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph \\(G\\) has a subset \\(S\\) of at most \\(k\\) vertices such that \\(G \\setminus S\\) is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a \\(3^k \\cdot n^{\\mathcal{O}(1)}\\) algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a \\(3\\)-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2 -CNF formula \\(\\phi\\) and an integer \\(k\\), and the objective is to decide whether there exists an assignment for \\(\\phi\\) that satisfies at most \\(k\\) clauses.\nShow that MIN-2-SAT can be solved in time \\(2^k n^{\\mathcal{O}(1)}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L07.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L07.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph \\(G\\) has a subset \\(S\\) of at most \\(k\\) vertices such that \\(G \\setminus S\\) is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a \\(3^k \\cdot n^{\\mathcal{O}(1)}\\) algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a \\(3\\)-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2 -CNF formula \\(\\phi\\) and an integer \\(k\\), and the objective is to decide whether there exists an assignment for \\(\\phi\\) that satisfies at most \\(k\\) clauses.\nShow that MIN-2-SAT can be solved in time \\(2^k n^{\\mathcal{O}(1)}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L12.html",
    "href": "2023/01-CS614/quizzes/L12.html",
    "title": "CS614. Advanced Algorithms. L12 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. List Coloring\n\n\n\nIn the List Coloring problem, we are given a graph \\(G\\) and for each vertex \\(v \\in V(G)\\) there is a set (also called a list) of admissible colors \\(L(v) \\subseteq N\\). The goal is to verify whether it is possible to find a proper vertex coloring c: \\(V(G) \\rightarrow \\mathbb{N}\\) of \\(G\\) such that for ever y vertex \\(v\\) we have \\(c(v) \\in L(v)\\). In other words, \\(L(v)\\) is the set of colors allowed for \\(v\\).\nShow a \\(2^n n^{\\mathcal{O}(1)}\\)-time algorithm for List Coloring.\nHint. Read Theorem 10.8 from the Parameterized Algorithms text.\n\n\n\n\n\n\n\n\nProblem 2. Triangle Packing\n\n\n\nIn the Triangle Packing problem, we are given an undirected graph \\(G\\) and a positive integer \\(k\\), and the objective is to test whether \\(G\\) has \\(k\\)-vertex disjoint triangles. Using color coding show that the problem admits an algorithm with running time \\(2^{O(k)} n^{O(1)}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L12.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L12.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L12 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. List Coloring\n\n\n\nIn the List Coloring problem, we are given a graph \\(G\\) and for each vertex \\(v \\in V(G)\\) there is a set (also called a list) of admissible colors \\(L(v) \\subseteq N\\). The goal is to verify whether it is possible to find a proper vertex coloring c: \\(V(G) \\rightarrow \\mathbb{N}\\) of \\(G\\) such that for ever y vertex \\(v\\) we have \\(c(v) \\in L(v)\\). In other words, \\(L(v)\\) is the set of colors allowed for \\(v\\).\nShow a \\(2^n n^{\\mathcal{O}(1)}\\)-time algorithm for List Coloring.\nHint. Read Theorem 10.8 from the Parameterized Algorithms text.\n\n\n\n\n\n\n\n\nProblem 2. Triangle Packing\n\n\n\nIn the Triangle Packing problem, we are given an undirected graph \\(G\\) and a positive integer \\(k\\), and the objective is to test whether \\(G\\) has \\(k\\)-vertex disjoint triangles. Using color coding show that the problem admits an algorithm with running time \\(2^{O(k)} n^{O(1)}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L10.html",
    "href": "2023/01-CS614/quizzes/L10.html",
    "title": "CS614. Advanced Algorithms. L10 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Set Cover: The Greedy Bound is Tight\n\n\n\nWe argued in class that the greedy approach to solving the unweighted Set Cover problem achieves an approximation ratio of \\(O(H_n)\\). Argue that this bound is tight, i.e, come up with examples where the algorithm picks sets in a manner that the cost of the solution is roughly \\(H_n\\) worse than optimal.\n\n\n\n\n\n\n\n\nProblem 2. Set Cover and Related Problems\n\n\n\n\nShow that Vertex Cover is a special case of Set Cover.\nAlso show that Dominating Set and Set Cover are equivalent (i.e, Set Cover can be reduced to Dominating Set and vice versa)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L10.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L10.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L10 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Set Cover: The Greedy Bound is Tight\n\n\n\nWe argued in class that the greedy approach to solving the unweighted Set Cover problem achieves an approximation ratio of \\(O(H_n)\\). Argue that this bound is tight, i.e, come up with examples where the algorithm picks sets in a manner that the cost of the solution is roughly \\(H_n\\) worse than optimal.\n\n\n\n\n\n\n\n\nProblem 2. Set Cover and Related Problems\n\n\n\n\nShow that Vertex Cover is a special case of Set Cover.\nAlso show that Dominating Set and Set Cover are equivalent (i.e, Set Cover can be reduced to Dominating Set and vice versa)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L05.html",
    "href": "2023/01-CS614/quizzes/L05.html",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be \\(S\\).\nLet \\(I := V(G) \\setminus S\\).\nIf \\(I = \\emptyset\\), then let \\(v \\in V(G)\\) be an arbitrary vertex; set \\(I := \\{v\\}\\).\n\nLet:\n\n\\(p\\) denote the size of a largest independent set in \\(G\\)\n\\(q\\) denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\n\\(r\\) denote \\(\\max(q,1)\\)\n\nNote that \\(r\\) is the size of the independent set output by the algorithm above.\nCome up with a graph where \\(p\\) can be a factor of \\(cn\\) larger than \\(r\\) for some constant \\(c\\).\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph \\(G\\) form a matroid over the universe \\(V(G)\\)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L05.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L05.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L05 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Approximate Vertex Cover\n\n\n\nGive an example of a graph where the 2-approximate solution (via maximal matchings) is worse than the optimal one. Even just slightly worse is enough :)\n\n\n\n\n\n\n\n\nProblem 2. Approximate Independent Set\n\n\n\nSince the complement of a vertex cover is an independent set, you might be tempted to think that the approximation discussed in class also approximates independent set. In particular, consider the following algorithm for independent set:\n\nRun the 2-approximation for vertex cover discussed in class, let the output be \\(S\\).\nLet \\(I := V(G) \\setminus S\\).\nIf \\(I = \\emptyset\\), then let \\(v \\in V(G)\\) be an arbitrary vertex; set \\(I := \\{v\\}\\).\n\nLet:\n\n\\(p\\) denote the size of a largest independent set in \\(G\\)\n\\(q\\) denote the size of the set obtained by taking the complement of the output of the 2-approximation discussed in class.\n\\(r\\) denote \\(\\max(q,1)\\)\n\nNote that \\(r\\) is the size of the independent set output by the algorithm above.\nCome up with a graph where \\(p\\) can be a factor of \\(cn\\) larger than \\(r\\) for some constant \\(c\\).\n\n\n\n\n\n\n\n\nProblem 3. Vertex Cover Matroid\n\n\n\nDo the set of vertex covers in a graph \\(G\\) form a matroid over the universe \\(V(G)\\)? If not, select the axiom that fails:\n\nExchange Axiom\nHereditary Axiom\nVertex covers do form a matroid"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A07.html",
    "href": "2023/01-CS614/quizzes/A07.html",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph \\(G\\) has a subset \\(S\\) of at most \\(k\\) vertices such that \\(G \\setminus S\\) is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a \\(3^k \\cdot n^{\\mathcal{O}(1)}\\) algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a \\(3\\)-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAs discussed in class, the induced path on three vertices is a forbidden substructure for a cluster graph. We state and prove this fact here for completeness.\n\nClaim. A graph \\(G\\) is a disjoint union of cliques if and only if it does not contain a path on three vertices as an induced subgraph.\nProof (sketch). Suppose \\(G\\) is a disjoint union of cliques, and for the sake of contradiction, suppose it has an induced path on vertices \\(x,y,z\\) with the edges being between \\(x\\) and \\(y\\), and \\(y\\) and \\(z\\). Note that since this is an induced path, there is no edge between \\(x\\) and \\(z\\). Since every component of \\(G\\) is a clique, we know that \\(x\\) and \\(z\\) must be in different components. However, there is a path from \\(x\\) to \\(z\\) via \\(y\\), which is a contradiction.\nSuppose \\(G\\) does not contain a path on three vertices as an induced subgraph. Again, for the sake of contradiction, suppose \\(G\\) has a connected component that is not a clique. Let \\((u,v)\\) be a non-edge in this component. Let \\(P\\) be a shortest path between \\(u\\) and \\(v\\) consisting of the vertices:\n\\[P := \\{u, w_1, \\ldots, w_t, \\ldots v\\}.\\]\nNotice that \\(t \\geqslant 1\\), otherwise \\((u,v)\\) is an edge. Further, notice that \\(u, w_1, w_2\\) forms an induced path of length three1 (if \\((u,w_2)\\) was an edge then we have a shorter path by omitting \\(w_1\\), contradicting our assumption that \\(P\\) is a shortest path between \\(u\\) and \\(v\\)). This contradicts our assumption.\n\nBased on this, we have the following algorithm:\nCVD(G,k):\n    If k &lt;= 0 and G has an induced P3 - RETURN NO\n    If k &gt;= 0 and G is a cluster graph - RETURN YES\n\n    Let a,b,c be vertices such that ab and bc are edges and ac is not an edge.\n\n    Return (CVD(G-a,k-1) OR CVD(G-b,k-1) OR (G-c,k-1))\nOne can obtain a \\(3\\)-approximation by enumerating a maximal collection of disjoint induced \\(P_3\\)’s and including all vertices from the collection in the solution. If the collection has size \\(t\\), we know that any solution (and in particular, the optimal one) must contain at least \\(t\\) vertices and the output has at most \\(3t\\) vertices. The algorithm is summarized below:\nCVD-3-Approx(G):\n    Init S = emptyset\n\n    While there is an induced P3 = (x,y,z) in G:\n        include (x,y,z) in S\n        G = G - (x,y,z)\n\n    return S\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2-CNF formula \\(\\phi\\) and an integer \\(k\\), and the objective is to decide whether there exists an assignment for \\(\\phi\\) that satisfies at most \\(k\\) clauses.\nShow that MIN-2-SAT can be solved in time \\(2^k n^{\\mathcal{O}(1)}\\).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf there is a variable \\(x\\) that occurs only positively in \\(\\phi\\), we claim that there exists an optimal assignment that sets it to \\(0\\). Indeed, let \\(\\tau\\) be an assignment that sets \\(x\\) to \\(1\\). Let \\(\\tau_x\\) be the assignment obtained from \\(\\tau\\) by flipping the value of \\(x\\) from \\(1\\) to \\(0\\). Note that the clauses that do not contain the variable \\(x\\) are either satisfied or falsified in both \\(\\tau\\) and \\(\\tau_x\\). For clauses that contain \\(x\\), it is possible that they are satisfied by \\(\\tau\\) but not by \\(\\tau_x\\), but not vice versa. Therefore, \\(\\tau_x\\) falsifies at least as many clauses as \\(\\tau\\), and we are done.\nBased on this, our algorithm proceeds as follows:\nif there is a variable x that occurs only as a positive literal:\n    set x to 0\nif there is a variable x that occurs only as a negated literal:\n    set x to 1\nThe argument for the negated occurrences is symmetric to the one we have for positive literals.\nOnce we perform this preprocessing, assuming that have clauses remaining, we have the following guarantee:\n\nEvery variable has at least one positive and one negated occurrence.\n\nNow we can branch exhuastively on the settings of variables; with the promise that either setting of the variable reduces our budget by at least one. The overall algorithm is summarized in the following pseudocode:\nMINSAT(phi,k):\n    if there is a variable x that occurs only as a positive literal:\n        set x to 0\n    if there is a variable x that occurs only as a negated literal:\n        set x to 1\n\n    if phi is empty:\n        return YES\n    if phi is not empty and k &lt;= 0:\n        return NO\n\n    Let x be any variable that occurs in phi.\n    return MINSAT(phi|[x = TRUE],k-1) OR MINSAT(phi|[x = FALSE],k-1)"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A07.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A07.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgement\n\n\n\nThe questions in this problem set are adapted from the textbook on Parameterized Algorithms by Marek Cygan, Fedor V. Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh.\n\n\n\n\n\n\n\n\nProblem 1. Cluster Vertex Deletion\n\n\n\nIn the Cluster Vertex Deletion problem, we want to know if a simple undirected graph \\(G\\) has a subset \\(S\\) of at most \\(k\\) vertices such that \\(G \\setminus S\\) is a disjoint union of cliques.\n\n\n\n\n\n\nProblem 1.1 A Branching Algorithm\n\n\n\nDesign a \\(3^k \\cdot n^{\\mathcal{O}(1)}\\) algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\nProblem 1.2 Decreasing the threshold\n\n\n\nDesign a \\(3\\)-approximation algorithm for Cluster Vertex Deletion.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAs discussed in class, the induced path on three vertices is a forbidden substructure for a cluster graph. We state and prove this fact here for completeness.\n\nClaim. A graph \\(G\\) is a disjoint union of cliques if and only if it does not contain a path on three vertices as an induced subgraph.\nProof (sketch). Suppose \\(G\\) is a disjoint union of cliques, and for the sake of contradiction, suppose it has an induced path on vertices \\(x,y,z\\) with the edges being between \\(x\\) and \\(y\\), and \\(y\\) and \\(z\\). Note that since this is an induced path, there is no edge between \\(x\\) and \\(z\\). Since every component of \\(G\\) is a clique, we know that \\(x\\) and \\(z\\) must be in different components. However, there is a path from \\(x\\) to \\(z\\) via \\(y\\), which is a contradiction.\nSuppose \\(G\\) does not contain a path on three vertices as an induced subgraph. Again, for the sake of contradiction, suppose \\(G\\) has a connected component that is not a clique. Let \\((u,v)\\) be a non-edge in this component. Let \\(P\\) be a shortest path between \\(u\\) and \\(v\\) consisting of the vertices:\n\\[P := \\{u, w_1, \\ldots, w_t, \\ldots v\\}.\\]\nNotice that \\(t \\geqslant 1\\), otherwise \\((u,v)\\) is an edge. Further, notice that \\(u, w_1, w_2\\) forms an induced path of length three1 (if \\((u,w_2)\\) was an edge then we have a shorter path by omitting \\(w_1\\), contradicting our assumption that \\(P\\) is a shortest path between \\(u\\) and \\(v\\)). This contradicts our assumption.\n\nBased on this, we have the following algorithm:\nCVD(G,k):\n    If k &lt;= 0 and G has an induced P3 - RETURN NO\n    If k &gt;= 0 and G is a cluster graph - RETURN YES\n\n    Let a,b,c be vertices such that ab and bc are edges and ac is not an edge.\n\n    Return (CVD(G-a,k-1) OR CVD(G-b,k-1) OR (G-c,k-1))\nOne can obtain a \\(3\\)-approximation by enumerating a maximal collection of disjoint induced \\(P_3\\)’s and including all vertices from the collection in the solution. If the collection has size \\(t\\), we know that any solution (and in particular, the optimal one) must contain at least \\(t\\) vertices and the output has at most \\(3t\\) vertices. The algorithm is summarized below:\nCVD-3-Approx(G):\n    Init S = emptyset\n\n    While there is an induced P3 = (x,y,z) in G:\n        include (x,y,z) in S\n        G = G - (x,y,z)\n\n    return S\n\n\n\n\n\n\n\n\n\nProblem 2. Don’t Satisfy Too Much!\n\n\n\nIn the MIN-2-SAT problem, we are given a 2-CNF formula \\(\\phi\\) and an integer \\(k\\), and the objective is to decide whether there exists an assignment for \\(\\phi\\) that satisfies at most \\(k\\) clauses.\nShow that MIN-2-SAT can be solved in time \\(2^k n^{\\mathcal{O}(1)}\\).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf there is a variable \\(x\\) that occurs only positively in \\(\\phi\\), we claim that there exists an optimal assignment that sets it to \\(0\\). Indeed, let \\(\\tau\\) be an assignment that sets \\(x\\) to \\(1\\). Let \\(\\tau_x\\) be the assignment obtained from \\(\\tau\\) by flipping the value of \\(x\\) from \\(1\\) to \\(0\\). Note that the clauses that do not contain the variable \\(x\\) are either satisfied or falsified in both \\(\\tau\\) and \\(\\tau_x\\). For clauses that contain \\(x\\), it is possible that they are satisfied by \\(\\tau\\) but not by \\(\\tau_x\\), but not vice versa. Therefore, \\(\\tau_x\\) falsifies at least as many clauses as \\(\\tau\\), and we are done.\nBased on this, our algorithm proceeds as follows:\nif there is a variable x that occurs only as a positive literal:\n    set x to 0\nif there is a variable x that occurs only as a negated literal:\n    set x to 1\nThe argument for the negated occurrences is symmetric to the one we have for positive literals.\nOnce we perform this preprocessing, assuming that have clauses remaining, we have the following guarantee:\n\nEvery variable has at least one positive and one negated occurrence.\n\nNow we can branch exhuastively on the settings of variables; with the promise that either setting of the variable reduces our budget by at least one. The overall algorithm is summarized in the following pseudocode:\nMINSAT(phi,k):\n    if there is a variable x that occurs only as a positive literal:\n        set x to 0\n    if there is a variable x that occurs only as a negated literal:\n        set x to 1\n\n    if phi is empty:\n        return YES\n    if phi is not empty and k &lt;= 0:\n        return NO\n\n    Let x be any variable that occurs in phi.\n    return MINSAT(phi|[x = TRUE],k-1) OR MINSAT(phi|[x = FALSE],k-1)"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A07.html#footnotes",
    "href": "2023/01-CS614/quizzes/A07.html#footnotes",
    "title": "CS614. Advanced Algorithms. L07 Quiz.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that it is possible that \\(w_2 = v\\).↩︎"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A04.html",
    "href": "2023/01-CS614/quizzes/A04.html",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph \\(D=(V, E \\subseteq V \\times V)\\). A set \\(T \\subseteq E\\) is an arborescence (oriented forest) if:\n\n\\(T\\) does not contain a cycle (ignoring directions of edges).\nEvery vertex in \\(V\\) has at most one incoming edge.\n\nAn arborescence \\(T\\) with \\(|T|=n-1\\) will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph \\(G_D = (V,E)\\) associated with \\(D\\) (this is the graph obtained by “erasing the arrows” in \\(D\\)). Consider the universe given by \\(E\\). Suggest two matroids \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\) for which set of arborescences is given by the sets independent in both \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\nHint: these are both matroids seen in class. Further, you might find it useful to partition \\(E\\) into \\(|V|\\) many parts as follows — the part \\(P_v\\) contains all edges that are incoming arcs for the vertex \\(v\\) in \\(D\\). Can you define a matroid based on this partition?\nDescribe \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nTake \\({\\mathcal M}_1\\) to be the graphic matroid and \\({\\mathcal M}_2\\) to be the partition matroid with all budgets set to one. Membership in the first matroid ensures that there are no underlying undirected cycles and membership in the second matroid ensures that every vertex in \\(V\\) has at most one incoming edge.\n\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nPart (3) was under-specified: the second player wins on complete graphs with at least four vertices but the first player has easy wins if the graph is an edge (a complete graph on two vertices) or a triangle (a complete graph on three vertices).\nGrading note: everyone recieves a full grade for this question.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSuppose both players indeed win. Let us delete the edges chosen by the first player. What is left is: (a) the set of edges chosen by the second player and (b) a disconnected graph. But the second player also won, so this set contains a spanning tree. A graph cannot simultaneously admit a spanning tree and be disconnected, this is a contradiction when applied on the graph induced by the leftover edges.\nPlayer 1 can choose any edge in the first step and he already wins.\nAssume that the graph has at least four vertices. Player 2 wins because notice that no matter how the first player plays the first \\((n-1)\\) steps, it is not enough to disconnect the graph. By chosing edges carefully1, Player 2 can ensure that (s)he has booked a spanning tree already within the first \\((n-1)\\) moves.\nNo spoilers on this one (yet)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A04.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A04.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Matroid Intersection Example\n\n\n\nConsider a directed graph \\(D=(V, E \\subseteq V \\times V)\\). A set \\(T \\subseteq E\\) is an arborescence (oriented forest) if:\n\n\\(T\\) does not contain a cycle (ignoring directions of edges).\nEvery vertex in \\(V\\) has at most one incoming edge.\n\nAn arborescence \\(T\\) with \\(|T|=n-1\\) will have one incoming edge incident on each node except one. If we denote this special node as root, this is an oriented spanning tree as shown in the figure.\n\n\n\nAn example arborescence.\n\n\nConsider the underlying undirected graph \\(G_D = (V,E)\\) associated with \\(D\\) (this is the graph obtained by “erasing the arrows” in \\(D\\)). Consider the universe given by \\(E\\). Suggest two matroids \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\) for which set of arborescences is given by the sets independent in both \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\nHint: these are both matroids seen in class. Further, you might find it useful to partition \\(E\\) into \\(|V|\\) many parts as follows — the part \\(P_v\\) contains all edges that are incoming arcs for the vertex \\(v\\) in \\(D\\). Can you define a matroid based on this partition?\nDescribe \\({\\mathcal M}_1\\) and \\({\\mathcal M}_2\\).\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nTake \\({\\mathcal M}_1\\) to be the graphic matroid and \\({\\mathcal M}_2\\) to be the partition matroid with all budgets set to one. Membership in the first matroid ensures that there are no underlying undirected cycles and membership in the second matroid ensures that every vertex in \\(V\\) has at most one incoming edge.\n\n\n\n\n\n\n\n\n\nProblem 2. Maker-Breaker Game\n\n\n\nTwo players take turns removing edges from an undirected graph until there are no edges left.\nPlayer 2 wins if the edges they remove contains a spanning tree, player 1 wins if the set of edges they remove would disconnect the original graph.\n\nIs it true that exactly one player wins this game? In other words, is the following statement true?\n\n“It is NOT the case that after the game has been played, both players can claim a win.”\n\nYes\nNo\n\n\nWhich player wins on a path?\n\n\nPlayer 1\nPlayer 2\n\n\nWhich player wins on a complete graph?\n\n\nPlayer 1\nPlayer 2\n\n\nComplete this sentence: player 2 has the winning strategy if and only if the graph contains BLANK.\n\n(No marks for answering this question, take your best guess :) )\n\n\n\n\n\n\n\n\nHeads Up\n\n\n\nPart (3) was under-specified: the second player wins on complete graphs with at least four vertices but the first player has easy wins if the graph is an edge (a complete graph on two vertices) or a triangle (a complete graph on three vertices).\nGrading note: everyone recieves a full grade for this question.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSuppose both players indeed win. Let us delete the edges chosen by the first player. What is left is: (a) the set of edges chosen by the second player and (b) a disconnected graph. But the second player also won, so this set contains a spanning tree. A graph cannot simultaneously admit a spanning tree and be disconnected, this is a contradiction when applied on the graph induced by the leftover edges.\nPlayer 1 can choose any edge in the first step and he already wins.\nAssume that the graph has at least four vertices. Player 2 wins because notice that no matter how the first player plays the first \\((n-1)\\) steps, it is not enough to disconnect the graph. By chosing edges carefully1, Player 2 can ensure that (s)he has booked a spanning tree already within the first \\((n-1)\\) moves.\nNo spoilers on this one (yet)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/A04.html#footnotes",
    "href": "2023/01-CS614/quizzes/A04.html#footnotes",
    "title": "CS614. Advanced Algorithms. L04 Quiz.",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis can be done, for example, by choosing an edge incident on the \\(i\\)-th vertex in the \\(i\\)-th move that connectes the \\(i\\)-th vertex to the subgraph built so far by the second player: it can be shown that this is doable.↩︎"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A02.html",
    "href": "2023/01-CS614/quizzes/A02.html",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe circuits of the graphic matroid are the cycles of the graph \\(G\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c,d\\}\\) with the edges \\(\\{ab, cd, ad\\}\\).\nThere are two matchings in this instance:\n\n\\(M_1 := \\{ab,cd\\}\\)\n\\(M_2: \\{ad\\}\\)\n\nHowever, although \\(|M_1| &gt; |M_2|\\), neither of the edges from \\(M_1\\) can be added to \\(M_2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c\\}\\) with the edges \\(\\{ab, ac\\}\\). There are two independent sets: \\(S_1 := \\{b,c\\}\\) and \\(M_2: \\{a\\}\\), but neither of the vertices from \\(S_1\\) can be added to \\(S_2\\).\n\nIf the independent sets formed a matroid the problem of finding a maximum independent set would not be NP-complete. {{&lt; bi emoji-smile-upside-down &gt;}}\n— Comment in class"
  },
  {
    "objectID": "2023/01-CS614/quizzes/A02.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/A02.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L02 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Identify the Circuits\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the graphic matroid discussed in class, i.e, where:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are acyclic.\n\nA maximal independent set in a matroid is called a basis, and for this example, the maximal independent sets correspond to spanning trees.\nA minimal dependent set in a matroid is called a circuit. In this example, what are the circuits?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe circuits of the graphic matroid are the cycles of the graph \\(G\\).\n\n\n\n\n\n\n\n\n\nProblem 2. Matchings\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of edges of \\(G\\), i.e, \\(E(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets of edges that are matchings.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c,d\\}\\) with the edges \\(\\{ab, cd, ad\\}\\).\nThere are two matchings in this instance:\n\n\\(M_1 := \\{ab,cd\\}\\)\n\\(M_2: \\{ad\\}\\)\n\nHowever, although \\(|M_1| &gt; |M_2|\\), neither of the edges from \\(M_1\\) can be added to \\(M_2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Independent Sets\n\n\n\nLet \\(G\\) be a simple, undirected, and connected graph. Consider the following set system:\n\nthe universe \\(U\\) is the set of vertices of \\(G\\), i.e, \\(V(G)\\);\nthe family \\(\\mathcal{F}\\) of independent sets is the collection of all subsets \\(S\\) of that are independent in \\(G\\), i.e, the subgraph \\(G[S]\\) has no edges.\n\nIs this a matroid? Why or why not? Justify your answer.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNot a matroid: consider the graph on the vertex set \\(\\{a,b,c\\}\\) with the edges \\(\\{ab, ac\\}\\). There are two independent sets: \\(S_1 := \\{b,c\\}\\) and \\(M_2: \\{a\\}\\), but neither of the vertices from \\(S_1\\) can be added to \\(S_2\\).\n\nIf the independent sets formed a matroid the problem of finding a maximum independent set would not be NP-complete. {{&lt; bi emoji-smile-upside-down &gt;}}\n— Comment in class"
  },
  {
    "objectID": "2023/01-CS614/quizzes/L08.html",
    "href": "2023/01-CS614/quizzes/L08.html",
    "title": "CS614. Advanced Algorithms. L08 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Better Approximation given a k-coloring\n\n\n\nGiven a \\(k\\)-coloring of a graph \\(G\\), show that we can find a vertex cover which is a \\(2\\bigl(1−\\frac{1}{k}\\bigr)\\) approximation.\nHint: use the \\(k\\)-coloring on the vertices of \\(V_{1/2}\\).\n\n\n\n\n\n\n\n\nProblem 2. Point Line Cover\n\n\n\nIn the Point Line Cover problem, we are given a set of \\(n\\) points in the plane and an integer \\(k\\), and the goal is to check if there exists a set of \\(k\\) lines on the plane that contain all the input points.\nShow a kernel for this problem with \\(\\mathcal{O}\\left(k^2\\right)\\) points."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L08.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L08.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L08 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Better Approximation given a k-coloring\n\n\n\nGiven a \\(k\\)-coloring of a graph \\(G\\), show that we can find a vertex cover which is a \\(2\\bigl(1−\\frac{1}{k}\\bigr)\\) approximation.\nHint: use the \\(k\\)-coloring on the vertices of \\(V_{1/2}\\).\n\n\n\n\n\n\n\n\nProblem 2. Point Line Cover\n\n\n\nIn the Point Line Cover problem, we are given a set of \\(n\\) points in the plane and an integer \\(k\\), and the goal is to check if there exists a set of \\(k\\) lines on the plane that contain all the input points.\nShow a kernel for this problem with \\(\\mathcal{O}\\left(k^2\\right)\\) points."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L22.html",
    "href": "2023/01-CS614/quizzes/L22.html",
    "title": "CS614. Advanced Algorithms. L22 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Hall Set\n\n\n\nGiven a bipartite graph \\(G\\) with bipartite classes \\(A, B \\subseteq V(G)\\) and an integer \\(k\\), the Hall SET problem asks for a Hall set of size at most \\(k\\), that is, a set \\(S \\subseteq A\\) of size at most \\(k\\) such that \\(|N(S)|&lt;|S|\\). Show that HalL SET is W[1]-hard.\n\nHint: Reduce from Clique. Given a graph \\(G\\), we construct a bipartite graph where class \\(A\\) corresponds to the edges of \\(G\\) and class \\(B\\) corresponds to the vertices of \\(B\\); the vertex of \\(A\\) corresponding to edge \\(u v\\) of \\(G\\) is adjacent to the two vertices \\(u, v \\in B\\). Additionally, we introduce a set of \\({k \\choose 2}-k-1\\) vertices into \\(B\\) and make them adjacent to every vertex of \\(A\\).\nShow that every Hall set of size at most \\({k \\choose 2}\\) has size exactly \\({k \\choose 2}\\) and corresponds to the edges of a \\(k\\)-clique in \\(G\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L22.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L22.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L22 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. Hall Set\n\n\n\nGiven a bipartite graph \\(G\\) with bipartite classes \\(A, B \\subseteq V(G)\\) and an integer \\(k\\), the Hall SET problem asks for a Hall set of size at most \\(k\\), that is, a set \\(S \\subseteq A\\) of size at most \\(k\\) such that \\(|N(S)|&lt;|S|\\). Show that HalL SET is W[1]-hard.\n\nHint: Reduce from Clique. Given a graph \\(G\\), we construct a bipartite graph where class \\(A\\) corresponds to the edges of \\(G\\) and class \\(B\\) corresponds to the vertices of \\(B\\); the vertex of \\(A\\) corresponding to edge \\(u v\\) of \\(G\\) is adjacent to the two vertices \\(u, v \\in B\\). Additionally, we introduce a set of \\({k \\choose 2}-k-1\\) vertices into \\(B\\) and make them adjacent to every vertex of \\(A\\).\nShow that every Hall set of size at most \\({k \\choose 2}\\) has size exactly \\({k \\choose 2}\\) and corresponds to the edges of a \\(k\\)-clique in \\(G\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L18.html",
    "href": "2023/01-CS614/quizzes/L18.html",
    "title": "CS614. Advanced Algorithms. L18 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. 3-Hitting Set\n\n\n\nObtain an algorithm for 3-Hitting Set running in time \\(2.4656^k n^{\\mathcal{O}(1)}\\) using iterative compression.\n\n\n\n\n\n\n\n\nProblem 2. d-Hitting Set\n\n\n\nGeneralize the algorithm from the previous problem to obtain an algorithm for \\(d\\)-Hitting Set running in time \\(((d-1)+0.4656)^k n^{\\mathcal{O}(1)}\\)."
  },
  {
    "objectID": "2023/01-CS614/quizzes/L18.html#cs614.-advanced-algorithms.",
    "href": "2023/01-CS614/quizzes/L18.html#cs614.-advanced-algorithms.",
    "title": "CS614. Advanced Algorithms. L18 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1. 3-Hitting Set\n\n\n\nObtain an algorithm for 3-Hitting Set running in time \\(2.4656^k n^{\\mathcal{O}(1)}\\) using iterative compression.\n\n\n\n\n\n\n\n\nProblem 2. d-Hitting Set\n\n\n\nGeneralize the algorithm from the previous problem to obtain an algorithm for \\(d\\)-Hitting Set running in time \\(((d-1)+0.4656)^k n^{\\mathcal{O}(1)}\\)."
  },
  {
    "objectID": "2023/03-ES214/tutorials/T01.html",
    "href": "2023/03-ES214/tutorials/T01.html",
    "title": "ES214. Discrete Mathematics. Tutorial 01 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1A. How did they do it?\n\n\n\n\n\nImagine a friend gives you a deck of cards and lets you shuffle it a few times. They then ask vou to deal out the top 26 cards face down, which divides the deck into two.\nYou keep one half and they take the other. They ask you to count how many red cards you have. In the meantime, you notice that they are silently looking through their own half of the deck. But whatever they are doing they did it as quickly as you, because once you’re done they declare that they know how many red cards you counted, and correctly announce the answer!\nHow did they do it?\n\n\n\n\n\n\n\n\n\nProblem 1B. How did they do it? (Redux)\n\n\n\n\n\nDeduce how the following trick works.\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Handshakes\n\n\n\n\n\nMr. and Mrs. Sharma invited four couples to their home. Some guests were friends of Mr. Sharma, and some others were friends of Mrs. Sharma. When the guests arrived, people who knew each other beforehand shook hands, those who did not know each other just greeted each other.\nAfter all this took place, the observant Mr. Sharma said “How interesting. If you disregard me, there are no two people present who shook hands the same number of times\nHow many times did Mrs. Sharma shake hands?\n\n\n\n\n\n\n\n\n\nProblem 3. Chessboard Game\n\n\n\n\n\nAlice begins by marking a corner square of an n × n chessboard; Bob marks an orthogonally adjacent square.\nThereafter, Alice and Bob continue alternating. each marking a square adjacent to the last one marked, until no unmarked adjacent square is available at which time the player whose turn it is to play loses.\nFor which n does Alice have a winning strategy? For which n does she win if the first square marked is instead a neighbor of a corner square?\nHint: dominoes.\n\n\n\n\n\n\n\n\n\nProblem 4. An Odd Party\n\n\n\n\n\nYou are at a party where any two people have an odd number of mutual friends at the party.\nShow that there are an odd number of attendees."
  },
  {
    "objectID": "2023/03-ES214/tutorials/T01.html#es214.-discrete-mathematics",
    "href": "2023/03-ES214/tutorials/T01.html#es214.-discrete-mathematics",
    "title": "ES214. Discrete Mathematics. Tutorial 01 Quiz.",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nProblem 1A. How did they do it?\n\n\n\n\n\nImagine a friend gives you a deck of cards and lets you shuffle it a few times. They then ask vou to deal out the top 26 cards face down, which divides the deck into two.\nYou keep one half and they take the other. They ask you to count how many red cards you have. In the meantime, you notice that they are silently looking through their own half of the deck. But whatever they are doing they did it as quickly as you, because once you’re done they declare that they know how many red cards you counted, and correctly announce the answer!\nHow did they do it?\n\n\n\n\n\n\n\n\n\nProblem 1B. How did they do it? (Redux)\n\n\n\n\n\nDeduce how the following trick works.\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Handshakes\n\n\n\n\n\nMr. and Mrs. Sharma invited four couples to their home. Some guests were friends of Mr. Sharma, and some others were friends of Mrs. Sharma. When the guests arrived, people who knew each other beforehand shook hands, those who did not know each other just greeted each other.\nAfter all this took place, the observant Mr. Sharma said “How interesting. If you disregard me, there are no two people present who shook hands the same number of times\nHow many times did Mrs. Sharma shake hands?\n\n\n\n\n\n\n\n\n\nProblem 3. Chessboard Game\n\n\n\n\n\nAlice begins by marking a corner square of an n × n chessboard; Bob marks an orthogonally adjacent square.\nThereafter, Alice and Bob continue alternating. each marking a square adjacent to the last one marked, until no unmarked adjacent square is available at which time the player whose turn it is to play loses.\nFor which n does Alice have a winning strategy? For which n does she win if the first square marked is instead a neighbor of a corner square?\nHint: dominoes.\n\n\n\n\n\n\n\n\n\nProblem 4. An Odd Party\n\n\n\n\n\nYou are at a party where any two people have an odd number of mutual friends at the party.\nShow that there are an odd number of attendees."
  },
  {
    "objectID": "2023/crypto.html",
    "href": "2023/crypto.html",
    "title": "A nano-course in modern cryptography",
    "section": "",
    "text": "— Prof. Venkata Koppula, IIT Delhi\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWhile cryptography has been around for centuries, since the middle of twentieth century, cryptography has gradually moved from ‘art’ to ‘science’. Today, most cryptographic primitives/protocols come with a formal security proof. In this lecture series, we will discuss how to define security for cryptographic primitives, followed by constructions, security proofs (and vulnerabilities in real-world cryptosystems).\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nVenkata Koppula is an Assistant Professor at IIT Delhi. His primary area of research is theoretical cryptography.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n\nDates: 21-26 December\nFormat: Hybrid (over Zoom and at 7/101)\nTime: 5-6:30pm\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone with interest in theoretical computer science is welcome to attend. No cryptography background will be assumed.\n\n\n\n\n\n\n\n\n\nJoin us on Zoom! Use this link with the following details.\n\nMeeting ID: 994 5573 9745\nPasscode: 007700\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLecture 1: How to define security?\nWe will start with the most basic security setting: Alice and Bob share a secret key, and want to use this secret key for exchanging information securely. The cryptographic primitive that is used for this is called private-key encryption. In this first lecture, we will build towards a popular security definition (called security against ‘chosen plaintext attacks’) for private key encryption.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 1 Assignments\n\n\n\n\n\n\nShow that any correct encryption scheme with perfect one-time security must have key space at least as large as the message space.\nIn the first lecture, we discussed one-time perfect security. This definition aims to capture the intuition that the adversary does not learn anything about the message if the scheme is one-time perfectly secure.\nSuppose an encryption scheme is one-time perfectly secure. Show that no adversary, given an encryption of a uniformly random message (using a uniformly random key), can compute the parity of the message bits (with probability 1). You can assume the message space is \\(n\\)-bit strings.\n\n\n\n\n\n\n\n\n\n\nLecture 2: The first construction Part I\nIn this lecture, we will discuss how to build a private-key encryption scheme secure against chosen-plaintext attacks. We will then discuss how to optimise the ciphertext size (without compromising on security). We will conclude this lecture with a popular cryptographic standard (PKCS v1.5) which was proposed and implemented in the 90s.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 3: The first construction Part II\nIn this lecture, we will discuss how to build a private-key encryption scheme secure against chosen-plaintext attacks. We will then discuss how to optimise the ciphertext size (without compromising on security). We will conclude this lecture with a popular cryptographic standard (PKCS v1.5) which was proposed and implemented in the 90s.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 4: The need for stronger security\nWhile the PKCS v1.5 satisfies security against ‘chosen-plaintext attacks’, it turns out that this security is not enough for the real-world! We will start this lecture with an attack on the PKCS v1.5 scheme, then discuss a stronger definition (called security against ‘chosen ciphertext attacks’). This is now the ‘gold standard’ security definition for encryption schemes. In order to achieve this security, we require a new cryptographic primitive called ‘message authentication codes’. We will define and build message auth. codes. Next, we will see how to use message authentication codes to achieve security against chosen-ciphertext attacks.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 5: Public key encryption\nOne of the biggest innovations in the area of cryptography is the advent of public key cryptography. In this lecture, we will discuss some background on public key cryptography, followed by a construction for public key encryption.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 6: Digital signatures\nDigital signatures are an essential component in the public key infrastructure. We will discuss their role in public key infrastructure, as well as their importance as a standalone primitive). We will conclude this lecture with a construction of a digital signature scheme.\n ·  ·"
  },
  {
    "objectID": "2023/crypto.html#a-nano-course-in-modern-cryptography",
    "href": "2023/crypto.html#a-nano-course-in-modern-cryptography",
    "title": "A nano-course in modern cryptography",
    "section": "",
    "text": "— Prof. Venkata Koppula, IIT Delhi\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nWhile cryptography has been around for centuries, since the middle of twentieth century, cryptography has gradually moved from ‘art’ to ‘science’. Today, most cryptographic primitives/protocols come with a formal security proof. In this lecture series, we will discuss how to define security for cryptographic primitives, followed by constructions, security proofs (and vulnerabilities in real-world cryptosystems).\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nVenkata Koppula is an Assistant Professor at IIT Delhi. His primary area of research is theoretical cryptography.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n\nDates: 21-26 December\nFormat: Hybrid (over Zoom and at 7/101)\nTime: 5-6:30pm\n\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nAnyone with interest in theoretical computer science is welcome to attend. No cryptography background will be assumed.\n\n\n\n\n\n\n\n\n\nJoin us on Zoom! Use this link with the following details.\n\nMeeting ID: 994 5573 9745\nPasscode: 007700\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLecture 1: How to define security?\nWe will start with the most basic security setting: Alice and Bob share a secret key, and want to use this secret key for exchanging information securely. The cryptographic primitive that is used for this is called private-key encryption. In this first lecture, we will build towards a popular security definition (called security against ‘chosen plaintext attacks’) for private key encryption.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 1 Assignments\n\n\n\n\n\n\nShow that any correct encryption scheme with perfect one-time security must have key space at least as large as the message space.\nIn the first lecture, we discussed one-time perfect security. This definition aims to capture the intuition that the adversary does not learn anything about the message if the scheme is one-time perfectly secure.\nSuppose an encryption scheme is one-time perfectly secure. Show that no adversary, given an encryption of a uniformly random message (using a uniformly random key), can compute the parity of the message bits (with probability 1). You can assume the message space is \\(n\\)-bit strings.\n\n\n\n\n\n\n\n\n\n\nLecture 2: The first construction Part I\nIn this lecture, we will discuss how to build a private-key encryption scheme secure against chosen-plaintext attacks. We will then discuss how to optimise the ciphertext size (without compromising on security). We will conclude this lecture with a popular cryptographic standard (PKCS v1.5) which was proposed and implemented in the 90s.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 3: The first construction Part II\nIn this lecture, we will discuss how to build a private-key encryption scheme secure against chosen-plaintext attacks. We will then discuss how to optimise the ciphertext size (without compromising on security). We will conclude this lecture with a popular cryptographic standard (PKCS v1.5) which was proposed and implemented in the 90s.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 4: The need for stronger security\nWhile the PKCS v1.5 satisfies security against ‘chosen-plaintext attacks’, it turns out that this security is not enough for the real-world! We will start this lecture with an attack on the PKCS v1.5 scheme, then discuss a stronger definition (called security against ‘chosen ciphertext attacks’). This is now the ‘gold standard’ security definition for encryption schemes. In order to achieve this security, we require a new cryptographic primitive called ‘message authentication codes’. We will define and build message auth. codes. Next, we will see how to use message authentication codes to achieve security against chosen-ciphertext attacks.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 5: Public key encryption\nOne of the biggest innovations in the area of cryptography is the advent of public key cryptography. In this lecture, we will discuss some background on public key cryptography, followed by a construction for public key encryption.\n ·  · \n\n\n\n\n\n\n\n\n\nLecture 6: Digital signatures\nDigital signatures are an essential component in the public key infrastructure. We will discuss their role in public key infrastructure, as well as their importance as a standalone primitive). We will conclude this lecture with a construction of a digital signature scheme.\n ·  ·"
  },
  {
    "objectID": "2023/02-ADVALG.bak/quizzes/P01.html",
    "href": "2023/02-ADVALG.bak/quizzes/P01.html",
    "title": "Advanced Algorithms. Week 1 Practice Problems",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgements\n\n\n\nThese questions are from Chapter 4 of Jeff Erickson’s textbook on Algorithms.\n\n\n\n\n\n\n\n\nProblem 1. Alternate Greedy Schedules\n\n\n\n\n\nThe GreedySchedule algorithm we described for the class scheduling problem is not the only greedy strategy we could have tried. For each of the following alternative greedy strategies, either prove that the resulting algorithm always constructs an optimal schedule, or describe a small input example for which the algorithm does not produce an optimal schedule.\nAssume that all algorithms break ties arbitrarily (that is, in a manner that is completely out of your control).\n[Hint: Three of these algorithms are actually correct.]\n\nChoose the course \\(x\\) that ends last, discard classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) that starts first, discard all classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) that starts last, discard all classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) with shortest duration, discard all classes that conflict with \\(x\\), and recurse.\nChoose a course \\(x\\) that conflicts with the fewest other courses, discard all classes that conflict with \\(x\\), and recurse.\nIf no classes conflict, choose them all. Otherwise, discard the course with longest duration and recurse.\nIf no classes conflict, choose them all. Otherwise, discard a course that conflicts with the most other courses and recurse.\nLet \\(x\\) be the class with the earliest start time, and let \\(y\\) be the class with the second earliest start time.\n\n\nIf \\(x\\) and \\(y\\) are disjoint, choose \\(x\\) and recurse on everything but \\(x\\).\nIf \\(x\\) completely contains \\(y\\), discard \\(x\\) and recurse.\nOtherwise, discard \\(y\\) and recurse.\n\n\nIf any course \\(x\\) completely contains another course, discard \\(x\\) and recurse. Otherwise, choose the course \\(y\\) that ends last, discard all classes that conflict with \\(y\\), and recurse.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Weighted Scheduling\n\n\n\n\n\nNow consider a weighted version of the class scheduling problem, where different classes offer different number of credit hours (totally unrelated to the duration of the class lectures). Your goal is now to choose a set of non-conflicting classes that give you the largest possible number of credit hours, given arrays of start times, end times, and credit hours as input.\n\nProve that the greedy algorithm described at the beginning of this chapter-Choose the class that ends first and recurse-does not always return an optimal schedule.\nProve that none of the greedy algorithms described in Exercise 1 always return an optimal schedule. [Hint: Solve Exercise 1 first; the algorithms that don’t work there don’t work here, either.]\nBONUS QUESTION Describe and analyze an algorithm that always computes an optimal schedule. [Hint: Your algorithm will not be greedy.]\n\n\n\n\n\n\n\n\n\n\nProblem 3. Finding a Cover\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. We say that a subset of intervals \\(Y \\subseteq X\\) covers \\(X\\) if the union of all intervals in \\(Y\\) is equal to the union of all intervals in \\(X\\). The size of a cover is just the number of intervals.\nDescribe and analyze an efficient algorithm to compute the smallest cover of \\(X\\). Assume that your input consists of two arrays \\(L[1 \\ldots n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). If you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA set of intervals, with a cover (shaded) of size 7.\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. Finding a Stabbing Set\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. We say that a set \\(P\\) of points stabs \\(X\\) if every interval in \\(X\\) contains at least one point in \\(P\\). Describe and analyze an efficient algorithm to compute the smallest set of points that stabs \\(X\\). Assume that your input consists of two arrays \\(L[1 . . n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). As usual, If you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA set of intervals stabbed by four points (shown here as vertical segments).\n\n\n\n\n\n\n\n\n\n\n\nProblem 5. Proper Coloring\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. A proper coloring of \\(X\\) assigns a color to each interval, so that any two overlapping intervals are assigned different colors. Describe and analyze an efficient algorithm to compute the minimum number of colors needed to properly color \\(X\\). Assume that your input consists of two arrays \\(L[1 . . n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). As usual, if you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA proper coloring of a set of intervals using five colors.\n\n\n\n\n\n\n\n\n\n\n\nProblem 6. Stable Matchings\n\n\n\n\n\n\nProve that it is possible for the Gale-Shapley algorithm to perform \\(\\Omega\\left(n^{2}\\right)\\) offers before termination.\n(You need to describe both a suitable input and a sequence of \\(\\Omega\\left(n^{2}\\right)\\) valid offers.)\nDescribe for any integer \\(n\\) a set of preferences for \\(n\\) men and \\(n\\) women that forces the Gale-Shapley algorithm to execute \\(\\Omega\\left(n^{2}\\right)\\) rounds, no matter which valid proposal is made in each round.\n[Hint: Part (b) implies part (a).]\n\n\n\n\n\n\n\n\n\n\nProblem 7. A Unique Stable Matching\n\n\n\n\n\nDescribe and analyze an efficient algorithm to determine whether a given set of men and women preferences has to have a unique stable matching."
  },
  {
    "objectID": "2023/02-ADVALG.bak/quizzes/P01.html#advanced-algorithms.",
    "href": "2023/02-ADVALG.bak/quizzes/P01.html#advanced-algorithms.",
    "title": "Advanced Algorithms. Week 1 Practice Problems",
    "section": "",
    "text": "Back to the course page\n\n\n\n\n\n\nAcknowledgements\n\n\n\nThese questions are from Chapter 4 of Jeff Erickson’s textbook on Algorithms.\n\n\n\n\n\n\n\n\nProblem 1. Alternate Greedy Schedules\n\n\n\n\n\nThe GreedySchedule algorithm we described for the class scheduling problem is not the only greedy strategy we could have tried. For each of the following alternative greedy strategies, either prove that the resulting algorithm always constructs an optimal schedule, or describe a small input example for which the algorithm does not produce an optimal schedule.\nAssume that all algorithms break ties arbitrarily (that is, in a manner that is completely out of your control).\n[Hint: Three of these algorithms are actually correct.]\n\nChoose the course \\(x\\) that ends last, discard classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) that starts first, discard all classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) that starts last, discard all classes that conflict with \\(x\\), and recurse.\nChoose the course \\(x\\) with shortest duration, discard all classes that conflict with \\(x\\), and recurse.\nChoose a course \\(x\\) that conflicts with the fewest other courses, discard all classes that conflict with \\(x\\), and recurse.\nIf no classes conflict, choose them all. Otherwise, discard the course with longest duration and recurse.\nIf no classes conflict, choose them all. Otherwise, discard a course that conflicts with the most other courses and recurse.\nLet \\(x\\) be the class with the earliest start time, and let \\(y\\) be the class with the second earliest start time.\n\n\nIf \\(x\\) and \\(y\\) are disjoint, choose \\(x\\) and recurse on everything but \\(x\\).\nIf \\(x\\) completely contains \\(y\\), discard \\(x\\) and recurse.\nOtherwise, discard \\(y\\) and recurse.\n\n\nIf any course \\(x\\) completely contains another course, discard \\(x\\) and recurse. Otherwise, choose the course \\(y\\) that ends last, discard all classes that conflict with \\(y\\), and recurse.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Weighted Scheduling\n\n\n\n\n\nNow consider a weighted version of the class scheduling problem, where different classes offer different number of credit hours (totally unrelated to the duration of the class lectures). Your goal is now to choose a set of non-conflicting classes that give you the largest possible number of credit hours, given arrays of start times, end times, and credit hours as input.\n\nProve that the greedy algorithm described at the beginning of this chapter-Choose the class that ends first and recurse-does not always return an optimal schedule.\nProve that none of the greedy algorithms described in Exercise 1 always return an optimal schedule. [Hint: Solve Exercise 1 first; the algorithms that don’t work there don’t work here, either.]\nBONUS QUESTION Describe and analyze an algorithm that always computes an optimal schedule. [Hint: Your algorithm will not be greedy.]\n\n\n\n\n\n\n\n\n\n\nProblem 3. Finding a Cover\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. We say that a subset of intervals \\(Y \\subseteq X\\) covers \\(X\\) if the union of all intervals in \\(Y\\) is equal to the union of all intervals in \\(X\\). The size of a cover is just the number of intervals.\nDescribe and analyze an efficient algorithm to compute the smallest cover of \\(X\\). Assume that your input consists of two arrays \\(L[1 \\ldots n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). If you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA set of intervals, with a cover (shaded) of size 7.\n\n\n\n\n\n\n\n\n\n\n\nProblem 4. Finding a Stabbing Set\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. We say that a set \\(P\\) of points stabs \\(X\\) if every interval in \\(X\\) contains at least one point in \\(P\\). Describe and analyze an efficient algorithm to compute the smallest set of points that stabs \\(X\\). Assume that your input consists of two arrays \\(L[1 . . n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). As usual, If you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA set of intervals stabbed by four points (shown here as vertical segments).\n\n\n\n\n\n\n\n\n\n\n\nProblem 5. Proper Coloring\n\n\n\n\n\nLet \\(X\\) be a set of \\(n\\) intervals on the real line. A proper coloring of \\(X\\) assigns a color to each interval, so that any two overlapping intervals are assigned different colors. Describe and analyze an efficient algorithm to compute the minimum number of colors needed to properly color \\(X\\). Assume that your input consists of two arrays \\(L[1 . . n]\\) and \\(R[1 . . n]\\), representing the left and right endpoints of the intervals in \\(X\\). As usual, if you use a greedy algorithm, you must prove that it is correct.\n\n\n\nA proper coloring of a set of intervals using five colors.\n\n\n\n\n\n\n\n\n\n\n\nProblem 6. Stable Matchings\n\n\n\n\n\n\nProve that it is possible for the Gale-Shapley algorithm to perform \\(\\Omega\\left(n^{2}\\right)\\) offers before termination.\n(You need to describe both a suitable input and a sequence of \\(\\Omega\\left(n^{2}\\right)\\) valid offers.)\nDescribe for any integer \\(n\\) a set of preferences for \\(n\\) men and \\(n\\) women that forces the Gale-Shapley algorithm to execute \\(\\Omega\\left(n^{2}\\right)\\) rounds, no matter which valid proposal is made in each round.\n[Hint: Part (b) implies part (a).]\n\n\n\n\n\n\n\n\n\n\nProblem 7. A Unique Stable Matching\n\n\n\n\n\nDescribe and analyze an efficient algorithm to determine whether a given set of men and women preferences has to have a unique stable matching."
  },
  {
    "objectID": "2023/02-BSCS4021/index.html",
    "href": "2023/02-BSCS4021/index.html",
    "title": "BSCS4021 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/02-BSCS4021/index.html#bscs4021.",
    "href": "2023/02-BSCS4021/index.html#bscs4021.",
    "title": "BSCS4021 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-noc23-cs102/index.html",
    "href": "2023/03-noc23-cs102/index.html",
    "title": "noc23-cs102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-noc23-cs102/index.html#noc23-cs102.",
    "href": "2023/03-noc23-cs102/index.html#noc23-cs102.",
    "title": "noc23-cs102 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-33/04/index.html",
    "href": "2023/03-33/04/index.html",
    "title": "#4. Same-Size Intersections",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nWork out the “pedestrian proof” of the nonsingularity of \\(B\\).\nRecover the De Bruijn–Erdős theorem as a special case of the generalized Fisher inequality:\n\nLet \\(P\\) be a configuration of \\(n\\) points in a projective plane, not all on a line. Let \\(t\\) be the number of lines determined by \\(P\\). Then,\n\n\\(t \\geqslant n\\), and\nif \\(t = n\\), any two lines have exactly one point of \\(P\\) in common. In this case, \\(P\\) is either a projective plane or \\(P\\) is a near pencil, meaning that exactly \\(n - 1\\) of the points are collinear.\n\n\n\n\nHere’s the combinatorial proof of Fisher’s inequality mentioned during the discussion."
  },
  {
    "objectID": "2023/03-33/33/index.html",
    "href": "2023/03-33/33/index.html",
    "title": "#33. Set Pairs and Exterior Products",
    "section": "",
    "text": "(Back to course page.)\nComing soon!"
  },
  {
    "objectID": "2023/03-33/02/index.html",
    "href": "2023/03-33/02/index.html",
    "title": "#2. Fibonacci Numbers, the Formula",
    "section": "",
    "text": "(Back to course page.)\nLink to slides · Link to recording\n\nPrompts for discussion:\nExercise 1. Show that: \\[\nF_n=\\left\\lfloor\\frac{1}{\\sqrt{5}} \\cdot\\left(\\frac{1+\\sqrt{5}}{2}\\right)^n\\right\\rfloor\n\\]\n(Source: generatingfunctionology, Wilf; h/t Matthew Drescher and John Azariah for a fun Twitter discussion on this.)\nExercise 2. Use this method to work out a closed form for:\n\\[\ny_{n+2}=2 y_{n+1}-y_n\n\\]\n(Source: This is an exercise from the book.)"
  },
  {
    "objectID": "2023/03-33/18/index.html",
    "href": "2023/03-33/18/index.html",
    "title": "#18. On the Difficulty of Reducing the Diameter",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\nSome seemingly natural generalizations of the diameter-reduction goal:\n\nCan we come up with a partition where most parts experience a reduction of diameter, for some suitable quantification of “most”?\nCan we come up with a partition so that the diameter in each part reduces by at least a certain degree? For example, I figure that if we want the diameter in each part to be at most half of the original diameter, we would have to allow for many more parts. How many more?"
  },
  {
    "objectID": "2023/03-33/11/index.html",
    "href": "2023/03-33/11/index.html",
    "title": "#11. Checking Matrix Multiplication",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to Recording\n\nPrompts for discussion:\n\nCan we extend this method to distinguish between situations when \\(C\\) is “very close” to \\(A \\times B\\) vs when \\(C\\) is “far” from \\(A \\times B\\), for a suitable notion of distance between matrices?\nLet’s say the Matrix Wizard always outputs \\(I_n\\) and you are always multiplying two permutation matrices. Is it possible to count, in terms of some aspect of the permutation represented by \\(A \\times B\\), the number of vectors \\(\\mathbf{x}\\) for which \\(D \\mathbf{x} \\neq 0\\)?"
  },
  {
    "objectID": "2023/03-33/16/index.html",
    "href": "2023/03-33/16/index.html",
    "title": "#16. Covering a Cube Minus One Vertex",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nWe saw during the discussion two different ways of covering the cube minus the origin with (d) hyperplanes: we can use the hyperplanes \\(\\left\\{x_i=1\\right\\}, i=1,2, \\ldots, d\\), or the hyperplanes \\(\\left\\{x_1+x_2+\\cdots+x_d=k\\right\\}, k=1,2, \\ldots, d\\). Are there other ways? Can all the ways be counted?\nWhat happens if you are trying to avoid two points? Note that it now perhaps matters which two!"
  },
  {
    "objectID": "2023/03-33/17/index.html",
    "href": "2023/03-33/17/index.html",
    "title": "#17. Medium-Size Intersection Is Hard To Avoid",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nAre medium-sized intersections particularly special? Are other-sized intersections also hard to avoid?\nHere’s the statement that we used in the next miniature, whose proof is in this one, and one that I chose to skip: Let \\(\\mathcal{F}\\) be as in the theorem, i.e, \\(|\\mathcal{F}| \\leq\\left(\\begin{array}{l}\nn \\\\\n0\n\\end{array}\\right)+\\left(\\begin{array}{l}\nn \\\\\n1\n\\end{array}\\right)+\\cdots+\\left(\\begin{array}{c}\nn \\\\\np-1\n\\end{array}\\right)\\). If \\(n=4p\\), then \\(\\frac{\\left(\\begin{array}{c}4 p \\\\2 p-1\\end{array}\\right)}{|\\mathcal{F}|} \\geq 1.1^n \\text {. }\\) There are (apparently) many ways to prove this. Does this inequality have some visible intuition?"
  },
  {
    "objectID": "2023/03-33/19/index.html",
    "href": "2023/03-33/19/index.html",
    "title": "#19. The End of the Small Coins",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\nRecall that this was the main result:\n\nIf at most (t) pieces of each product have been ordered in total, and if no order asks for more than one piece of each product, then it is possible to round the prices so that the total price of each order changes by no more than (t) Euros.\n\nOne interesting aspect of this is that the change in price is independent of the total number of orders and the number of different products (also pointed out in the miniature). However, we do pay a price for this coolness: the two assumptions about the frequency of orders and the fact that we are restricted to each order having at most one piece of each product. What happens if you relax either/both assumptions? Can we meaningfully extend the result to accommodate more scenarios (e.g, no order asks for more than \\(d\\) pieces of each product)? Can we design examples that justify the assumptions?\nAnother discrepancy-inspired puzzle is covered in this Numberphile video."
  },
  {
    "objectID": "2023/03-33/index.html",
    "href": "2023/03-33/index.html",
    "title": "33 Miniatures | Winter 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis is a reading group for the book Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra that will be active between 1st November to 10th December.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if\n\nyou have some background in linear algebra\nyou enjoyed the linear algebra you have seen\nyou are curious about linear algebraic concepts can be useful in contexts of combinatorics, geometry, and algorithms.\n\nIf you have not formally studied linear algebra before and have been looking for an excuse to pick it up, then that should be a good use-case too!\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nA little linear algerba won’t hurt. Try starting here if you have never encountered linear algebra concepts before:\n\nThe Linear Algebra course on Khan Academy\nThe 3blue1brown Playlist on the “Essence of Linear Algebra”\nAn interactive introduction from Brilliant.\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nWe will closely follow Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra. Additional pointers to tangents and related material will be listed on the individual notes pages.\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nAll Slides (online, work in progress)\nDropbox Folder with PDF exports (updated sporadically, but should be fully up to date by the end of the course)\nYoutube Playlist (updated daily)\nDiscourse Community (for pointers emerging from discussions)\nMiniature-wise notes and discussion pages linked to below\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n(03/12) The reading group meetings have concluded (for now). We met at 10PM IST on all days during November, with three skips (one for Diwali, one for the CWC finals, and one because of technical issues). So we met for the first two days of December too, clocking in 29 total sessions, 26-ish hours, and 28 miniatures (two of them took two days, and we once covered two miniatures in one session). We tentatively plan to do a week-long reunion meet in January some time to discuss the five remaining miniatures (#28, #29, #31, #32, #33). The forum will remain open until then: please feel free to discuss while we take a break from the daily meetings!\n(01/11) We meet at 10PM IST. Join via Zoom (code: matousek) and/or check out the slides here. Here’s a Google Calendar that you can subscribe to (simplest if you are already logged into gmail), or a link to download an ICS file (easier if you are not on gmail but want to add the events to your calendar app).\n\n\n\n\n\n\n\n\n\n\nAcknowledgements. Special thanks to Vinay for a lot of guidance with these sessions, and for all the insights during the discussions! Many thanks to all the participants for being there: this was very motivating for me, and it was a lot of fun doing this collectively :) Also, I owe one to Saket for introducing me to these miniatures when I was in grad school!\n\n\n\n\n\n\n\n\n\nTools. In no particular order:\n\nI used Slides, a very helpful UI on top of the revealjs framework, to make these slides.\nAs is perhaps quite apparent, I borrowed heavily from the miniatures themselves, and mathpix made that easy to do.\nThe font I use everywhere (in particular, also on the slides) is Heliotrope by Matthew Butterick.\nSome of the content on the slides (typically example matrices) were generated by Copilot].\nSome content was generated using Polypad by Mathigon and Geogebra.\nThe discussions are hosted on Discourse, who offer a education discount on their hosted plans, and they were also very supportive in responding to all my setup-related inquiries!\nThis webpage is powered by Quarto.\nThe meetings were hosted on Zoom, on a IITGN-provided account.\n\n\n\n\n\n\n\n\n\n\nDiscussions. If you are interested in discussions around these topics, please join our limited-edition online Discourse community! You don’t need to login if you just want to read the posts, but perks of creating an account include:\n\nDaily email reminders\nThe ability to react and respond to posts\n\nPlease note that the community will only remain active until ~end of January 2024, and will be archived thereafter. A static copy of the contents will be made available on a best-effort basis.\n\n\n\n\n\n\n    \n        Date\n        Lecture\n        Discussion\n        Notes\n        Video\n        Slides\n    \n    \n    \n                    \n            \n                01 Nov, 2023\n            \n            \n                #1. Fibonacci Numbers, Quickly\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2023\n            \n            \n                #2. Fibonacci Numbers, the Formula\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                03 Nov, 2023\n            \n            \n                #3. The Clubs of Oddtown\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                04 Nov, 2023\n            \n            \n                #4. Same-Size Intersections\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Nov, 2023\n            \n            \n                #5. Error-Correcting Codes\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Nov, 2023\n            \n            \n                #5. Error-Correcting Codes\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Nov, 2023\n            \n            \n                #6. Odd Distances\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Nov, 2023\n            \n            \n                #7. Are These Distances Euclidean?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Nov, 2023\n            \n            \n                #8. Packing Complete Bipartite Graphs\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                10 Nov, 2023\n            \n            \n                #9. Equiangular Lines\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Nov, 2023\n            \n            \n                #10. Where is the Triangle?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Nov, 2023\n            \n            \n                #11. Checking Matrix Multiplication\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                13 Nov, 2023\n            \n            \n                #12. Tiling a Rectangle by Squares\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                14 Nov, 2023\n            \n            \n                #13. Three Petersens Are Not Enough\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                15 Nov, 2023\n            \n            \n                #14. Petersen, Hoffman–Singleton, and Maybe 57\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2023\n            \n            \n                #15. Only Two Distances\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                17 Nov, 2023\n            \n            \n                #16. Covering a Cube Minus One Vertex\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                18 Nov, 2023\n            \n            \n                #17. Medium-Size Intersection Is Hard To Avoid\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                20 Nov, 2023\n            \n            \n                #18. On the Difficulty of Reducing the Diameter\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                21 Nov, 2023\n            \n            \n                #19. The End of the Small Coins\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2023\n            \n            \n                #20. Walking in the Yard\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                24 Nov, 2023\n            \n            \n                #21. Counting Spanning Trees\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                25 Nov, 2023\n            \n            \n                #21. Counting Spanning Trees\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                26 Nov, 2023\n            \n            \n                #22. In How Many Ways Can a Man Tile a Board?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                27 Nov, 2023\n            \n            \n                #23. More Bricks—More Walls?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                28 Nov, 2023\n            \n            \n                #24. Perfect Matchings and Determinants\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                29 Nov, 2023\n            \n            \n                #25. Turning a Ladder Over a Finite Field\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                30 Nov, 2023\n            \n            \n                #26. Counting Compositions\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                01 Dec, 2023\n            \n            \n                #27. Is It Associative?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                02 Dec, 2023\n            \n            \n                #30. Equilateral Sets\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-33/index.html#reading-group-on-33-miniatures-in-linear-algebra",
    "href": "2023/03-33/index.html#reading-group-on-33-miniatures-in-linear-algebra",
    "title": "33 Miniatures | Winter 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nThis is a reading group for the book Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra that will be active between 1st November to 10th December.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nYou will find this course interesting if\n\nyou have some background in linear algebra\nyou enjoyed the linear algebra you have seen\nyou are curious about linear algebraic concepts can be useful in contexts of combinatorics, geometry, and algorithms.\n\nIf you have not formally studied linear algebra before and have been looking for an excuse to pick it up, then that should be a good use-case too!\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nA little linear algerba won’t hurt. Try starting here if you have never encountered linear algebra concepts before:\n\nThe Linear Algebra course on Khan Academy\nThe 3blue1brown Playlist on the “Essence of Linear Algebra”\nAn interactive introduction from Brilliant.\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nWe will closely follow Thirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra. Additional pointers to tangents and related material will be listed on the individual notes pages.\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nAll Slides (online, work in progress)\nDropbox Folder with PDF exports (updated sporadically, but should be fully up to date by the end of the course)\nYoutube Playlist (updated daily)\nDiscourse Community (for pointers emerging from discussions)\nMiniature-wise notes and discussion pages linked to below\n\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\n(03/12) The reading group meetings have concluded (for now). We met at 10PM IST on all days during November, with three skips (one for Diwali, one for the CWC finals, and one because of technical issues). So we met for the first two days of December too, clocking in 29 total sessions, 26-ish hours, and 28 miniatures (two of them took two days, and we once covered two miniatures in one session). We tentatively plan to do a week-long reunion meet in January some time to discuss the five remaining miniatures (#28, #29, #31, #32, #33). The forum will remain open until then: please feel free to discuss while we take a break from the daily meetings!\n(01/11) We meet at 10PM IST. Join via Zoom (code: matousek) and/or check out the slides here. Here’s a Google Calendar that you can subscribe to (simplest if you are already logged into gmail), or a link to download an ICS file (easier if you are not on gmail but want to add the events to your calendar app).\n\n\n\n\n\n\n\n\n\n\nAcknowledgements. Special thanks to Vinay for a lot of guidance with these sessions, and for all the insights during the discussions! Many thanks to all the participants for being there: this was very motivating for me, and it was a lot of fun doing this collectively :) Also, I owe one to Saket for introducing me to these miniatures when I was in grad school!\n\n\n\n\n\n\n\n\n\nTools. In no particular order:\n\nI used Slides, a very helpful UI on top of the revealjs framework, to make these slides.\nAs is perhaps quite apparent, I borrowed heavily from the miniatures themselves, and mathpix made that easy to do.\nThe font I use everywhere (in particular, also on the slides) is Heliotrope by Matthew Butterick.\nSome of the content on the slides (typically example matrices) were generated by Copilot].\nSome content was generated using Polypad by Mathigon and Geogebra.\nThe discussions are hosted on Discourse, who offer a education discount on their hosted plans, and they were also very supportive in responding to all my setup-related inquiries!\nThis webpage is powered by Quarto.\nThe meetings were hosted on Zoom, on a IITGN-provided account.\n\n\n\n\n\n\n\n\n\n\nDiscussions. If you are interested in discussions around these topics, please join our limited-edition online Discourse community! You don’t need to login if you just want to read the posts, but perks of creating an account include:\n\nDaily email reminders\nThe ability to react and respond to posts\n\nPlease note that the community will only remain active until ~end of January 2024, and will be archived thereafter. A static copy of the contents will be made available on a best-effort basis.\n\n\n\n\n\n\n    \n        Date\n        Lecture\n        Discussion\n        Notes\n        Video\n        Slides\n    \n    \n    \n                    \n            \n                01 Nov, 2023\n            \n            \n                #1. Fibonacci Numbers, Quickly\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                02 Nov, 2023\n            \n            \n                #2. Fibonacci Numbers, the Formula\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                03 Nov, 2023\n            \n            \n                #3. The Clubs of Oddtown\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                04 Nov, 2023\n            \n            \n                #4. Same-Size Intersections\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                05 Nov, 2023\n            \n            \n                #5. Error-Correcting Codes\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                06 Nov, 2023\n            \n            \n                #5. Error-Correcting Codes\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                07 Nov, 2023\n            \n            \n                #6. Odd Distances\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                08 Nov, 2023\n            \n            \n                #7. Are These Distances Euclidean?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                09 Nov, 2023\n            \n            \n                #8. Packing Complete Bipartite Graphs\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                10 Nov, 2023\n            \n            \n                #9. Equiangular Lines\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Nov, 2023\n            \n            \n                #10. Where is the Triangle?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                11 Nov, 2023\n            \n            \n                #11. Checking Matrix Multiplication\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                13 Nov, 2023\n            \n            \n                #12. Tiling a Rectangle by Squares\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                14 Nov, 2023\n            \n            \n                #13. Three Petersens Are Not Enough\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                15 Nov, 2023\n            \n            \n                #14. Petersen, Hoffman–Singleton, and Maybe 57\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                16 Nov, 2023\n            \n            \n                #15. Only Two Distances\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                17 Nov, 2023\n            \n            \n                #16. Covering a Cube Minus One Vertex\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                18 Nov, 2023\n            \n            \n                #17. Medium-Size Intersection Is Hard To Avoid\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                20 Nov, 2023\n            \n            \n                #18. On the Difficulty of Reducing the Diameter\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                21 Nov, 2023\n            \n            \n                #19. The End of the Small Coins\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                23 Nov, 2023\n            \n            \n                #20. Walking in the Yard\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                24 Nov, 2023\n            \n            \n                #21. Counting Spanning Trees\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                25 Nov, 2023\n            \n            \n                #21. Counting Spanning Trees\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                26 Nov, 2023\n            \n            \n                #22. In How Many Ways Can a Man Tile a Board?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                27 Nov, 2023\n            \n            \n                #23. More Bricks—More Walls?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                28 Nov, 2023\n            \n            \n                #24. Perfect Matchings and Determinants\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                29 Nov, 2023\n            \n            \n                #25. Turning a Ladder Over a Finite Field\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                30 Nov, 2023\n            \n            \n                #26. Counting Compositions\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                01 Dec, 2023\n            \n            \n                #27. Is It Associative?\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n                    \n            \n                02 Dec, 2023\n            \n            \n                #30. Equilateral Sets\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                                \n            \n            \n                \n                    \n                \n            \n        \n    \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2023/03-33/07/index.html",
    "href": "2023/03-33/07/index.html",
    "title": "#7. Are These Distances Euclidean?",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nConfirm that the positive semidefinite criteria indeed turns out to be the familiar triangle inequality constraints when \\(n = 2\\).\nCan you explain the criteria of the theorem in geometric terms for higher dimensions?\n\nHere’s the link to the Geogebra applet showing the triangle inequality, and here’s a slightly nicer one that lets you set the three distances and see the two circles come together or become disjoint depending on whether or not you violate one of the triangle inequalities."
  },
  {
    "objectID": "2023/03-33/31/index.html",
    "href": "2023/03-33/31/index.html",
    "title": "#31. Cutting Cheaply Using Eigenvectors",
    "section": "",
    "text": "(Back to course page.)\nComing soon!"
  },
  {
    "objectID": "2023/03-33/08/index.html",
    "href": "2023/03-33/08/index.html",
    "title": "#8. Packing Complete Bipartite Graphs",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nHere’s the other proof that I think is a little more transparent in its approach to the final claim (it’s also the proof featured on the Wikipedia page for the theorem).\nHere’s the OG reference, which has more context on the problem, and a proof involving eigenvalues and determinants, so enjoy looking that up! :slight_smile:\nJust to record the question(s) that came up during discussion: can you show that \\(n-1\\) is always enough? In how many ways can you do it with \\(n-1\\) parts? What’s the total number of partitions, with any number of (non-empty) parts?"
  },
  {
    "objectID": "2023/03-33/06/index.html",
    "href": "2023/03-33/06/index.html",
    "title": "#6. Odd Distances",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nWhat fraction of the first \\(n\\) Pythagorean Triplets (listed according to some appropriate order; sorry for the lazy phrasing) have all their side-lengths even? What other configurations (i.e, not a square) are valid answers to the question of “four points with all pairwise distances even”?\nQuestion from @Vinay_V - can we get a configuration of four points among which five of the pairwise distances odd and one even? Preliminary step: what about just five pairwise odd distances?\nObserve that \\(\\det(2B) = 8\\det(B)\\), we have that \\(\\det(2B) \\equiv 0 \\mod 8\\), which contradicts the computation that \\(\\det(2B) \\equiv 4 \\mod 8\\). So I figure we could have “stopped short” here, and not needed the argument that involved comparing ranks.\nHere’s the Wikipedia page on the Erdős–Anning theorem, and here’s the Geogebra playground."
  },
  {
    "objectID": "2023/03-33/23/index.html",
    "href": "2023/03-33/23/index.html",
    "title": "#23. More Bricks—More Walls?",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\n\nFor readers familiar with the notion of graph isomorphism, the following might be a rewarding exercise in applying the method shown above: Prove that if \\(g_n(k)\\) stands for the number of nonisomorphic graphs with \\(n\\) vertices and \\(k\\) edges, then the sequence \\(g_n(0), g_n(1), \\ldots, g_n\\left(\\left(\\begin{array}{c}n \\\\ 2\\end{array}\\right)\\right)\\) is unimodal.\n\n(From the miniature.)"
  },
  {
    "objectID": "2023/03-33/12/index.html",
    "href": "2023/03-33/12/index.html",
    "title": "#12. Tiling a Rectangle by Squares",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to Recording\n\nI cross referenced Andrew Putman’s notes for this presentation. Here is another discussion that might be of interest.\nPrompts for discussion:\n\nDoes this proof break down if we try to use it to show that there is no tiling of a \\((1 \\times x\\) rectangle, \\(x\\) irrational, with (countably) infinite squares?\nSquaring the square is the problem of tiling an integral square using only other integral squares. More on this related problem here.\nThe Wallace–Bolyai–Gerwien theorem answers the question when one polygon can be formed from another by cutting it into a finite number of pieces and recomposing these by translations and rotations. The theorem states that this can be done if and only if two polygons have the same area. Hilbert’s third problem is the analogous statement about polyhedra in three dimensions, and Dehn proved Hilbert’s conjecture that this isn’t always doable.\n\n\nVinay shared a self-contained version of the proof that does not require an understanding of the vector space of reals over rationals, which I am taking the liberty to share here:\n\nConsider a rectangle with sides 1 and \\(x\\), where \\(x\\) is irrational. We want to show that it can’t be tiled by squares.\nSuppose otherwise. Let’s say we used squares \\(s_1, s_2, \\cdots, s_n\\) to tile the rectangle. We will demonstrate a contradiction. To do so, we will exploit the fact that \\(x\\) is irrational. One way to do so is to define a finite dimensional vector space \\(V\\) over \\(Q\\) by generating the vector space via rational linear combinations on \\(\\left\\{1, x, s_1, \\cdots, s_k\\right\\}\\). Here \\(s_i\\) ’s are the elements of \\(s_1, s_2, \\cdots, s_n\\) that are linearly independent.\nAny vector \\(v\\) in this vector space can be written as \\(a+b x+q_1 s_1+\\cdots q_k s_k\\), where the coefficients are all rationals. Now define a linear function \\(f: V \\rightarrow Q\\), by first defining it on the basis elements: \\(f(1)=1, f(x)=-1, f\\left(s_i\\right)=0\\). It is easy to verify \\(f(v)=f\\left(a+b x+q_1 s_1+\\cdots+q_k s_k\\right)=a-b\\). So \\(f\\) maps \\(V\\) to the rationals. And it is easy to check that \\(f\\left(v_1+v_2\\right)=f\\left(v_1\\right)+f\\left(v_2\\right)\\) and \\(f(\\alpha v)=\\alpha f(v)\\) which makes it a linear map.\nThe rest of the proof is as before."
  },
  {
    "objectID": "2023/03-33/14/index.html",
    "href": "2023/03-33/14/index.html",
    "title": "#14. Petersen, Hoffman–Singleton, and Maybe 57",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Recording Not Available\n\nPrompts for discussion:\n\nWe did not get into it much, but cages have been extensively studied and are also pretty! See here, for example.\nAlso, here is the latest that I could find indicating that the “maybe 57” issue remains open. Here is a fairly extensive survey."
  },
  {
    "objectID": "2023/03-33/25/index.html",
    "href": "2023/03-33/25/index.html",
    "title": "#25. Turning a Ladder Over a Finite Field",
    "section": "",
    "text": "(Back to course page.)\nLink to Slides · Link to recording\n\nPrompts for discussion:\nThere is a lot to be said about Kakeya sets that we did not get into at all due to time constraints. I was hoping to be able to locate an interactive construction of the Perron tree to share here, but I couldn’t find one. For now, the miniature has a nice description of it, as does Wikipedia.\nHere’s a discussion potentially of interest, about explicit constructions of Kakeya sets over finite fields."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w03.html",
    "href": "2023/01-ES242/labs/lab-w03.html",
    "title": "ES242. Data Structures and Algorithms I. Week 03 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Stacks\n\n\n\n\n\n\n\n\n\nProblem 1. Linked Lists\n\n\n\n\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head-&gt;data   = 10;\n  middle-&gt;data = 20;\n  last-&gt;data   = 30;\n\n  //connecting each nodes. head-&gt;middle-&gt;last\n  head-&gt;next   = middle;\n  middle-&gt;next = last;\n  last-&gt;next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d-&gt;\",temp-&gt;data);\n      temp = temp-&gt;next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, \\(p_1, \\ldots, p_n\\).\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input \\(i\\), output the number in the linked list that comes before the number \\(i\\).\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Parentheses\n\n\n\n\n\nYou are given a string consisting of parentheses ( and ). A string of this type is said to be correct:\n\nif it is the empty string\nif A and B are correct, AB is correct.\nif A is correct, (A) is correct.\n\nWrite a program that takes a sequence of strings of this of type and check their correctness.\nYour program can assume that the maximum string length is 128.\n\n\nThe first line of the input is a positive integer n, the number of tests. The next n lines consist of one test case each. Each test case is a string made of the parentheses ().\n\n\n\nThe output should consist of n lines, one for each test. The i-th line of the ouptut should be Yes if the the string in the i-th test case is correct, and No otherwise.\n\n\n\nSample Input\n5\n(\n(((\n()()\n)\n)))\nSample Output\nNo\nNo\nYes\nNo\nNo\n\n\n\n\n\n\n\n\n\n\nProblem 3. Challenge the Parentheses Solution\n\n\n\n\n\nConsider the following algorithm for the previous problem:\nIf the first character is not ( return FALSE\nIf the last character is not ) return FALSE\nInitialize i = 0\nFor j in s:\n    if j == \"(\":\n        i++\n    else:\n        i--\nif i != 0 return FALSE\nelse return TRUE\nProvide an input for which the algorithm above does not work. Your input should be a single line consisting of a string that has ( and ) characters only.\n\n\n\n\n\n\n\n\n\nProblem 4. Print Alternate Cards\n\n\n\n\n\nAdd a set of cards to a stack and print all the cards in odd-numbered positions of the stack.\n\n\nThe first line contains a number n, the number of cards in the stack. The next n lines contain two numbers. The first number b indicates if the card is to be added on the top (b=0) or at the bottom (b=1). The second number indicates the card’s value, an integer between 1 and 52.\nThe output should the list of alternating cards from bottom to top (i.e, starting at the card pointed to by the first pointer). If there are an even number of cards, note that the last card on the stack does not get printed.\nAdding a card on the top can be done by using pushBack, while adding it at the bottom pushFront.\n\n\n\nSample Input\n5\n0 1\n0 2\n1 3\n1 5\n0 4\nSample Output\n5\n1\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct s_card {\n  int cardvalue;\n  struct s_card *next;\n  struct s_card *prev;\n} t_card;\n\ntypedef struct s_cardstack {\n  struct s_card *first;\n  struct s_card *last;\n} t_cardstack;\n\nt_cardstack *cardstackInit() {\n  t_cardstack *cardstack;\n  cardstack = malloc(sizeof(t_cardstack));\n  cardstack-&gt;first = NULL;\n  cardstack-&gt;last = NULL;\n  return cardstack;\n}\n\nint isEmpty(t_cardstack *cardstack) { return !cardstack-&gt;first; }\n\nvoid pushFront(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node-&gt;cardvalue = cardvalue;\n  node-&gt;prev = NULL;\n  node-&gt;next = cardstack-&gt;first;\n  if (isEmpty(cardstack))\n    cardstack-&gt;last = node;\n  else\n    cardstack-&gt;first-&gt;prev = node;\n  cardstack-&gt;first = node;\n}\n\nvoid pushBack(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node-&gt;cardvalue = cardvalue;\n  node-&gt;prev = cardstack-&gt;last;\n  node-&gt;next = NULL;\n  if (isEmpty(cardstack))\n    cardstack-&gt;first = node;\n  else\n    cardstack-&gt;last-&gt;next = node;\n  cardstack-&gt;last = node;\n}\n\nint popFront(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack-&gt;first;\n  cardstack-&gt;first = node-&gt;next;\n  if (!cardstack-&gt;first)\n    cardstack-&gt;last = NULL;\n  else\n    cardstack-&gt;first-&gt;prev = NULL;\n  cardvalue = node-&gt;cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint popBack(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack-&gt;last;\n  cardstack-&gt;last = node-&gt;prev;\n  if (!cardstack-&gt;last)\n    cardstack-&gt;first = NULL;\n  else\n    cardstack-&gt;last-&gt;next = NULL;\n  cardvalue = node-&gt;cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint peekFront(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack-&gt;first-&gt;cardvalue;\n}\n\nint peekBack(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack-&gt;last-&gt;cardvalue;\n}\n\nvoid *fronttoback(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return NULL;\n  t_card *currpointer = cardstack-&gt;last;\n  while (currpointer) {\n    printf(\"%d\\n\", currpointer-&gt;cardvalue);\n    currpointer = currpointer-&gt;prev;\n  }\n}\n\nint main() { \n  t_cardstack *ms;\n  // Remember to initialize!\n  return 0; \n}\n\n\n\n\n\n\n\n\nCompilers - a slight adaptation of the second problem in this lab.\nAlternating Current - try to come up with a characterization of when the wires can be untangled in terms of the symbols.\nLargest Rectangle in a Histogram - a fun problem. See if you can make use of the cardstack!"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w03.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w03.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 03 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Stacks\n\n\n\n\n\n\n\n\n\nProblem 1. Linked Lists\n\n\n\n\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nint main()\n{\n  //node structure\n  struct node\n  {\n      int data;\n      struct node *next;\n  };\n\n  //declaring nodes\n  struct node *head,*middle,*last;\n\n  //allocating memory for each node\n  head   = malloc(sizeof(struct node));\n  middle = malloc(sizeof(struct node));\n  last   = malloc(sizeof(struct node));\n\n  //assigning values to each node\n  head-&gt;data   = 10;\n  middle-&gt;data = 20;\n  last-&gt;data   = 30;\n\n  //connecting each nodes. head-&gt;middle-&gt;last\n  head-&gt;next   = middle;\n  middle-&gt;next = last;\n  last-&gt;next   = NULL;\n\n  //temp is a reference for head pointer.\n  struct node *temp = head;\n\n  //till the node becomes null, printing each nodes data\n  while(temp != NULL)\n  {\n      printf(\"%d-&gt;\",temp-&gt;data);\n      temp = temp-&gt;next;\n  }\n  printf(\"NULL\");\n\n  return 0;\n}\nExtend the code above to perform the following tasks:\n\nRead a sequence of n numbers from the input, \\(p_1, \\ldots, p_n\\).\nInsert each of these number at a location where the linked list is still sorted when read from beginning to end.\nFor any given input \\(i\\), output the number in the linked list that comes before the number \\(i\\).\n\n\n\nThe first line contains a positive integer n. The second line contains n space-separated integers. The third line contains a positive integer m.\n\n\n\nOutput the number that comes before m in the linked list. It is guaranteed that m is one of the numbers from the second line. If the number happens to be the first element of the list, return -1.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Parentheses\n\n\n\n\n\nYou are given a string consisting of parentheses ( and ). A string of this type is said to be correct:\n\nif it is the empty string\nif A and B are correct, AB is correct.\nif A is correct, (A) is correct.\n\nWrite a program that takes a sequence of strings of this of type and check their correctness.\nYour program can assume that the maximum string length is 128.\n\n\nThe first line of the input is a positive integer n, the number of tests. The next n lines consist of one test case each. Each test case is a string made of the parentheses ().\n\n\n\nThe output should consist of n lines, one for each test. The i-th line of the ouptut should be Yes if the the string in the i-th test case is correct, and No otherwise.\n\n\n\nSample Input\n5\n(\n(((\n()()\n)\n)))\nSample Output\nNo\nNo\nYes\nNo\nNo\n\n\n\n\n\n\n\n\n\n\nProblem 3. Challenge the Parentheses Solution\n\n\n\n\n\nConsider the following algorithm for the previous problem:\nIf the first character is not ( return FALSE\nIf the last character is not ) return FALSE\nInitialize i = 0\nFor j in s:\n    if j == \"(\":\n        i++\n    else:\n        i--\nif i != 0 return FALSE\nelse return TRUE\nProvide an input for which the algorithm above does not work. Your input should be a single line consisting of a string that has ( and ) characters only.\n\n\n\n\n\n\n\n\n\nProblem 4. Print Alternate Cards\n\n\n\n\n\nAdd a set of cards to a stack and print all the cards in odd-numbered positions of the stack.\n\n\nThe first line contains a number n, the number of cards in the stack. The next n lines contain two numbers. The first number b indicates if the card is to be added on the top (b=0) or at the bottom (b=1). The second number indicates the card’s value, an integer between 1 and 52.\nThe output should the list of alternating cards from bottom to top (i.e, starting at the card pointed to by the first pointer). If there are an even number of cards, note that the last card on the stack does not get printed.\nAdding a card on the top can be done by using pushBack, while adding it at the bottom pushFront.\n\n\n\nSample Input\n5\n0 1\n0 2\n1 3\n1 5\n0 4\nSample Output\n5\n1\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct s_card {\n  int cardvalue;\n  struct s_card *next;\n  struct s_card *prev;\n} t_card;\n\ntypedef struct s_cardstack {\n  struct s_card *first;\n  struct s_card *last;\n} t_cardstack;\n\nt_cardstack *cardstackInit() {\n  t_cardstack *cardstack;\n  cardstack = malloc(sizeof(t_cardstack));\n  cardstack-&gt;first = NULL;\n  cardstack-&gt;last = NULL;\n  return cardstack;\n}\n\nint isEmpty(t_cardstack *cardstack) { return !cardstack-&gt;first; }\n\nvoid pushFront(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node-&gt;cardvalue = cardvalue;\n  node-&gt;prev = NULL;\n  node-&gt;next = cardstack-&gt;first;\n  if (isEmpty(cardstack))\n    cardstack-&gt;last = node;\n  else\n    cardstack-&gt;first-&gt;prev = node;\n  cardstack-&gt;first = node;\n}\n\nvoid pushBack(t_cardstack *cardstack, int cardvalue) {\n  t_card *node = malloc(sizeof(t_card));\n  node-&gt;cardvalue = cardvalue;\n  node-&gt;prev = cardstack-&gt;last;\n  node-&gt;next = NULL;\n  if (isEmpty(cardstack))\n    cardstack-&gt;first = node;\n  else\n    cardstack-&gt;last-&gt;next = node;\n  cardstack-&gt;last = node;\n}\n\nint popFront(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack-&gt;first;\n  cardstack-&gt;first = node-&gt;next;\n  if (!cardstack-&gt;first)\n    cardstack-&gt;last = NULL;\n  else\n    cardstack-&gt;first-&gt;prev = NULL;\n  cardvalue = node-&gt;cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint popBack(t_cardstack *cardstack) {\n  t_card *node;\n  int cardvalue;\n  if (isEmpty(cardstack))\n    return -1;\n  node = cardstack-&gt;last;\n  cardstack-&gt;last = node-&gt;prev;\n  if (!cardstack-&gt;last)\n    cardstack-&gt;first = NULL;\n  else\n    cardstack-&gt;last-&gt;next = NULL;\n  cardvalue = node-&gt;cardvalue;\n  free(node);\n  return cardvalue;\n}\n\nint peekFront(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack-&gt;first-&gt;cardvalue;\n}\n\nint peekBack(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return -1;\n  return cardstack-&gt;last-&gt;cardvalue;\n}\n\nvoid *fronttoback(t_cardstack *cardstack) {\n  if (isEmpty(cardstack))\n    return NULL;\n  t_card *currpointer = cardstack-&gt;last;\n  while (currpointer) {\n    printf(\"%d\\n\", currpointer-&gt;cardvalue);\n    currpointer = currpointer-&gt;prev;\n  }\n}\n\nint main() { \n  t_cardstack *ms;\n  // Remember to initialize!\n  return 0; \n}"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w03.html#list-of-practice-problems",
    "href": "2023/01-ES242/labs/lab-w03.html#list-of-practice-problems",
    "title": "ES242. Data Structures and Algorithms I. Week 03 Lab",
    "section": "",
    "text": "Compilers - a slight adaptation of the second problem in this lab.\nAlternating Current - try to come up with a characterization of when the wires can be untangled in terms of the symbols.\nLargest Rectangle in a Histogram - a fun problem. See if you can make use of the cardstack!"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w14.html",
    "href": "2023/01-ES242/labs/lab-w14.html",
    "title": "ES242. Data Structures and Algorithms I. Week 14 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nHeaps\n\n\n\n\n\n\n\n\n\nProblem 1. Build Heap by Insertions\n\n\n\n\n\nYou are given an array arr of length n. The array is represented in the form of a complete binary tree. A representation of an array as a binary tree is said to be heap compatible if it follows the following features:\nThe first element is made the root of the tree. Every subsequent element is made the left-child. If left pointer is non-empty, it is made the right-child. If both children exist, then the same procedure is followed for the left-child and then right child.\nConsider the array below:\narr[] = {5,6,89,9,45,7,1}\nThe heap compatible representation of arr[] is as follows:\n      5\n      /\\\n     6  89\n    /\\  /\\\n   9 45 7 1\n\n\nYou are given an array representation of a heap compatible binary tree. You have to construct a max-heap data structure using the given array. Return the BFS traversal of the data. Build the heap using iterated insertions.\n\nNote: You may want to use the given “queue.h” file to return the BFS traversal\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing a heap compatible array.\n\n\n\nReturn n space-separated integers that represent the max-heap.\n\n\n\n\nSample Input 1\n5\n4 10 3 2 1\nSample Output 1\n10 4 3 2 1\n\n\n\n\n\n\n\n\n\n\nProblem 2. Heapify\n\n\n\n\n\nYou are given an array arr of length n. The array is represented in the form of a complete binary tree. A representation of an array as a binary tree is said to be heap compatible if it follows the following features:  The first element is made the root of the tree. Every subsequent element is made the left-child. If left pointer is non-empty, it is made the right-child. If both children exist, then the same procedure is followed for the left-child and then right child. In a way, it is a greedy level-wise filling\nConsider the array below:\narr[] = {5,6,89,9,45,7,1}\nThe heap compatible representation of arr[] is as follows:\n      5\n      /\\\n     6  89\n    /\\  /\\\n   9 45 7 1\n\n\nYou are given an array representation of a heap compatible binary tree. You have to construct a max-heap data structure using the given array. Return the BFS traversal of the data. Build the heap using the heapify method discussed in class.\n\nNote: You may want to use the given “queue.h” file to return the BFS traversal\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing a heap compatible array.\n\n\n\nReturn n space-separated integers that represent the max-heap.\n\n\n\n\nSample Input 1\n5\n4 10 3 5 1\nSample Output 1\n10 5 3 4 1\nSample Input 2\n11\n1 3 5 4 6 13 10 9 8 15 17\nSample Output 2\n17 15 13 9 6 5 10 4 8 3 1"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w14.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w14.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 14 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nHeaps\n\n\n\n\n\n\n\n\n\nProblem 1. Build Heap by Insertions\n\n\n\n\n\nYou are given an array arr of length n. The array is represented in the form of a complete binary tree. A representation of an array as a binary tree is said to be heap compatible if it follows the following features:\nThe first element is made the root of the tree. Every subsequent element is made the left-child. If left pointer is non-empty, it is made the right-child. If both children exist, then the same procedure is followed for the left-child and then right child.\nConsider the array below:\narr[] = {5,6,89,9,45,7,1}\nThe heap compatible representation of arr[] is as follows:\n      5\n      /\\\n     6  89\n    /\\  /\\\n   9 45 7 1\n\n\nYou are given an array representation of a heap compatible binary tree. You have to construct a max-heap data structure using the given array. Return the BFS traversal of the data. Build the heap using iterated insertions.\n\nNote: You may want to use the given “queue.h” file to return the BFS traversal\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing a heap compatible array.\n\n\n\nReturn n space-separated integers that represent the max-heap.\n\n\n\n\nSample Input 1\n5\n4 10 3 2 1\nSample Output 1\n10 4 3 2 1\n\n\n\n\n\n\n\n\n\n\nProblem 2. Heapify\n\n\n\n\n\nYou are given an array arr of length n. The array is represented in the form of a complete binary tree. A representation of an array as a binary tree is said to be heap compatible if it follows the following features:  The first element is made the root of the tree. Every subsequent element is made the left-child. If left pointer is non-empty, it is made the right-child. If both children exist, then the same procedure is followed for the left-child and then right child. In a way, it is a greedy level-wise filling\nConsider the array below:\narr[] = {5,6,89,9,45,7,1}\nThe heap compatible representation of arr[] is as follows:\n      5\n      /\\\n     6  89\n    /\\  /\\\n   9 45 7 1\n\n\nYou are given an array representation of a heap compatible binary tree. You have to construct a max-heap data structure using the given array. Return the BFS traversal of the data. Build the heap using the heapify method discussed in class.\n\nNote: You may want to use the given “queue.h” file to return the BFS traversal\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing a heap compatible array.\n\n\n\nReturn n space-separated integers that represent the max-heap.\n\n\n\n\nSample Input 1\n5\n4 10 3 5 1\nSample Output 1\n10 5 3 4 1\nSample Input 2\n11\n1 3 5 4 6 13 10 9 8 15 17\nSample Output 2\n17 15 13 9 6 5 10 4 8 3 1"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w04.html",
    "href": "2023/01-ES242/labs/lab-w04.html",
    "title": "ES242. Data Structures and Algorithms I. Week 04 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Graph Representations and Euler Tours\n\n\n\n\n\n\n\n\n\nProblem 1. Adjacency Matrix\n\n\n\n\n\nThe goal of this exercise is to:\n\nRead a graph and store it as an adjacency matrix.\nReturn the largest degree, that is to say, return max(d(v)) over all vertices v in the graph G.\n\n\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nThe output is a single integer, corresponding to the maximum degree of the graph.\n\n\n\nSample Input\n5 4\n0 1\n0 2\n0 3\n0 4\nSample Output\n4\n\n\n\n// Adjacency Matrix representation in C\n#include &lt;stdio.h&gt;\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  int G[n][n];\n  for (int i = 0; i &lt; n; i++)\n    for (int j = 0; j &lt; n; j++)\n      G[i][j] = 0;\n\n  for (int i = 0; i &lt; m; i++) {\n    // Write the logic to read the endpoints of the edge here.\n    // ...\n    \n    // Write the logic to add the edge just read next.\n    // ...\n  }\n\n  int maxdegree = 0;\n\n  // Write the logic to print the maxdegree of the graph here.\n  // ...\n\n  printf(\"%d\", maxdegree);\n  return 0;\n\n}\n\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency List\n\n\n\n\n\nIn this exercise your goal is to implement a graph as an adjacency list and determine, given a pair of vertices u and v, the number of common nieghbors that they have: that is, the number of vertices w such that w is adjacent to u AND w is adjacent to v (note that w is not equal to either u or v).\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a single integer, corresponding to the number of common neighbors of x and y.\n\n\n\nSample Input\n6 8\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n0 5\nSample Output\n4\n\n\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// A structure to represent an adjacency list node\nstruct AdjListNode {\n  int vertex;\n  struct AdjListNode *next;\n};\n\n// A structure to represent a graph. A graph is an array of adjacency lists.\n// Size of array will be V (number of vertices in graph)\nstruct Graph {\n  int n;\n  struct AdjListNode* vertices;\n};\n\n// A utility function to create a new adjacency list node\nstruct AdjListNode* newAdjListNode(int v) {\n  struct AdjListNode *newNode =\n      (struct AdjListNode *)malloc(sizeof(struct AdjListNode));\n  newNode-&gt;vertex = v;\n  newNode-&gt;next = NULL;\n  return newNode;\n}\n\n// A utility function that creates a graph of V vertices\nstruct Graph *createGraph(int V) {\n  struct Graph *graph = (struct Graph*)malloc(sizeof(struct Graph));\n  graph-&gt;n = V;\n  \n  graph-&gt;vertices = (struct AdjListNode*) malloc(V * sizeof(struct AdjListNode));\n  int i;\n  for (i = 0; i &lt; V; ++i){\n    graph-&gt;vertices[i].next = NULL;\n    graph-&gt;vertices[i].vertex = -1;\n  }\n\n  return graph;\n}\n\n// Adds an edge to an undirected graph\nvoid addEdge(struct Graph *graph, int src, int dest) {\n  // Add an edge from src to dest.  A new node is added to the adjacency\n  // list of src.  The node is added at the begining\n  struct AdjListNode *newNode = newAdjListNode(dest);\n  newNode-&gt;next = graph-&gt;vertices[src].next;\n  graph-&gt;vertices[src].next = newNode;\n\n  // Since graph is undirected, add an edge from dest to src also. Write this part below.\n  // ...\n}\n\nint main() {\n\n  int n;\n  scanf(\"%d\", &n);\n\n  struct Graph *G = createGraph(n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i &lt; m; i++) {\n    int u, v;\n    scanf(\"%d\", &u);\n    scanf(\"%d\", &v);\n    addEdge(G, u, v);\n  }\n\n  int x, y;\n  \n  scanf(\"%d %d\", &x, &y);\n\n  // Write your solution here.\n  \n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nYou have to store the edges of a given graph as an edge list, and compute the degree of a given vertex.\nFor understanding how the template code works refer to this execution on a hard-coded example.\n\n\nThe first line contains a number m, which is the number of edges in the graph G.\nThe next m lines contain two space-separated integers represnting the endpoints of the edges.\nThe last line contains a single integer k.\n\n\n\nThe task is to report the degree of the vertex k, that is, the number of edges for which k is one of the endpoints.\n\n\n\nSample Input\n6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\n1\nSample Output\n4\n\n\n\n#include &lt;stdio.h&gt;\n\n// Declare a datatype that stores a single edge.\n\nstruct SingleEdge {\n  int ep[2];\n  struct SingleEdge *nextedge;\n};\n\nint main(void) {\n\n  // To begin with, there was nothing.\n  struct SingleEdge *head = NULL;\n  head = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  struct SingleEdge *current = NULL;\n  current = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  // head simply points to the first element of the list.\n  // current will move forward as things get added.\n\n  head-&gt;ep[0] = -1;\n  head-&gt;ep[1] = -1;\n  head-&gt;nextedge = current;\n\n  // Read the number of edges.\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i &lt; m; i++) {\n\n    struct SingleEdge *newedge;\n\n    newedge = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n    // Populate the newedge struct\n    // with information about the current edge.\n\n    current-&gt;nextedge = newedge;\n    current = newedge;\n  }\n\n  struct SingleEdge *navigator = head-&gt;nextedge;\n  int degree = 0;\n  int vertex;\n\n  scanf(\"%d\", &vertex);\n\n  while (navigator) {\n    // CHECK IF \"vertex\" is an endpoint\n    // of the current edge being explored.\n    if (...) {\n      degree = degree + 1;\n    }\n    navigator = navigator-&gt;nextedge;\n  }\n\n  printf(\"%d\", degree);\n\n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 4. Sanity Check\n\n\n\n\n\nGiven a simple (no selfloops or multiedges), connected (any two vertices are reachable from each other), and undirected (no edge orientations) graph as input, return YES if it has a Euler path OR circuit, and NO otherwise.\nYou may assume the following:\n\nAn undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.\nAn undirected graph has an Eulerian path if and only if exactly zero or two vertices have odd degree, and all of its vertices with nonzero degree belong to a single connected component.\n\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nOutput YES if it has a Euler path or circuit, and NO otherwise.\n\n\n\nSample Input\n10 6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 5. [Optional] Which Way is the Highway?\n\n\n\n\n\nImagine a grid country with nm axis-parallel highways (no kidding: check out this video about the U.S. interstate highway numbering system! - watching the video is not required for understanding this problem).\nOf these highways, \\(n\\) are east-west and m are north-south. Note that the highways form an \\((n - 1) \\times (m - 1)\\) grid. In order to control the traffic, a policy was enforced which involved making each highway one way.\nThis means in each east-west highway, the traffic moves from “left to right” or “right to left”. Also, traffic moves “top to bottom” or “bottom to top” in each highway that runs north-south. It is possible to enter a horizontal highway from a vertical highway, or vice versa, at their intersection.\nA proposed set of orientations is given to you. You have to figure out if it is possible, after making the highways one-way based on these suggested orientations, if it is possible to reach any intersection from any other (without breaking traffic rules!)\n\n\nThe first line of input contains two integers \\(n\\) and \\(m\\), denoting the number of east-west highways and the number of north-south highways.\nThe second line contains a string of length \\(n\\), made of characters ‘{’ and ‘}’, denoting direction of each horizontal highway. If the i-th character is equal to ‘{’, the highway is directed from right to left otherwise, the highway is directed from left to right. Highways are listed in order from top to bottom.\nThe third line contains a string of length m, made of characters ‘B’ and ‘T’, denoting direction of each vertical highway. If the i-th character is equal to ‘T’, the highway is directed from south to north (towards the top), and if it is ‘B’ the highway is directed from north to south (towards the bottom). Highways are listed in order from left to right.\n\n\n\nIf the given pattern meets the mayor’s criteria, print a single line containing “YES”, otherwise print a single line containing “NO”.\n\n\n\nSample Input\n3 3\n}{}\nBTB\nSample Output\nNO\nSample Input\n4 6\n{}{}\nBTBTBT\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. [Optional] Edge Orientation Puzzle\n\n\n\n\n\nLet’s say that a vertex in a directed graph is balanced if its indegree is the same as its outdegree.\nYou are given a simple and undirected graph \\(G\\). An orientation of \\(G\\) is an assigment of a direction to every edge in \\(G\\).\nYou want to come up with an orientation that maximizes the number of balanced vertices.\nReturn the number of balanced vertices in a orientation that maximizes this number.\n\n\nThe first line contains a positive integer \\(t~(1 \\leqslant t \\leqslant 200)\\) — the number of testsets in the input.\nEach of the testsets is given in the following way.\nThe first line contains two integers \\(n\\) and \\(m\\) \\((1 \\leqslant n \\leqslant 200, 0 \\leqslant m \\leqslant n·(n - 1) / 2)\\) — the number of vertices and the number of edges in \\(G\\).\nThe next m lines contain the description of the edges. Each line contains two integers \\(u\\) and \\(v\\) \\((1 \\leqslant u, v \\leqslant n)\\) — the endpoints of the edge. It’s guaranteed that there are no self-loops and multiedges. It is possible that the graph is not connected.\n\n\n\nFor each testset print the number of balanced vertices in an orientation that maximizes the number of balanced vertices.\n\n\n\nSample Input\n2\n5 5\n2 1\n4 5\n2 3\n1 3\n3 5\n7 2\n3 7\n4 2\nSample Output\n3\n3\nHere is an orientation of the first graph that has three balanced vertices:\n1 3\n3 5\n5 4\n3 2\n2 1\nIn the second graph, no matter how the two edges are oriented, there will be four imbalanced and three balanced vertices.\n\n\n\n\n\n\n\n\n\nWeird Journey - if you already know how to check if a graph is connected, go for this! Otherwise you could come back to it after learning BFS/DFS :)\nROOKPATH - can you figure out how to model this problem as finding an Euler Tour?\nMashtali: a Space Oddysey - at least one method of solving this question involves constructing an Euler tour (but it is less direct than the previous problem), revisit it once you have figured out how to."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w04.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w04.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 04 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nTheme: Graph Representations and Euler Tours\n\n\n\n\n\n\n\n\n\nProblem 1. Adjacency Matrix\n\n\n\n\n\nThe goal of this exercise is to:\n\nRead a graph and store it as an adjacency matrix.\nReturn the largest degree, that is to say, return max(d(v)) over all vertices v in the graph G.\n\n\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nThe output is a single integer, corresponding to the maximum degree of the graph.\n\n\n\nSample Input\n5 4\n0 1\n0 2\n0 3\n0 4\nSample Output\n4\n\n\n\n// Adjacency Matrix representation in C\n#include &lt;stdio.h&gt;\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  int G[n][n];\n  for (int i = 0; i &lt; n; i++)\n    for (int j = 0; j &lt; n; j++)\n      G[i][j] = 0;\n\n  for (int i = 0; i &lt; m; i++) {\n    // Write the logic to read the endpoints of the edge here.\n    // ...\n    \n    // Write the logic to add the edge just read next.\n    // ...\n  }\n\n  int maxdegree = 0;\n\n  // Write the logic to print the maxdegree of the graph here.\n  // ...\n\n  printf(\"%d\", maxdegree);\n  return 0;\n\n}\n\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency List\n\n\n\n\n\nIn this exercise your goal is to implement a graph as an adjacency list and determine, given a pair of vertices u and v, the number of common nieghbors that they have: that is, the number of vertices w such that w is adjacent to u AND w is adjacent to v (note that w is not equal to either u or v).\nYou can visualize the execution of a simplified version of the template code here.\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a single integer, corresponding to the number of common neighbors of x and y.\n\n\n\nSample Input\n6 8\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\n0 5\nSample Output\n4\n\n\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// A structure to represent an adjacency list node\nstruct AdjListNode {\n  int vertex;\n  struct AdjListNode *next;\n};\n\n// A structure to represent a graph. A graph is an array of adjacency lists.\n// Size of array will be V (number of vertices in graph)\nstruct Graph {\n  int n;\n  struct AdjListNode* vertices;\n};\n\n// A utility function to create a new adjacency list node\nstruct AdjListNode* newAdjListNode(int v) {\n  struct AdjListNode *newNode =\n      (struct AdjListNode *)malloc(sizeof(struct AdjListNode));\n  newNode-&gt;vertex = v;\n  newNode-&gt;next = NULL;\n  return newNode;\n}\n\n// A utility function that creates a graph of V vertices\nstruct Graph *createGraph(int V) {\n  struct Graph *graph = (struct Graph*)malloc(sizeof(struct Graph));\n  graph-&gt;n = V;\n  \n  graph-&gt;vertices = (struct AdjListNode*) malloc(V * sizeof(struct AdjListNode));\n  int i;\n  for (i = 0; i &lt; V; ++i){\n    graph-&gt;vertices[i].next = NULL;\n    graph-&gt;vertices[i].vertex = -1;\n  }\n\n  return graph;\n}\n\n// Adds an edge to an undirected graph\nvoid addEdge(struct Graph *graph, int src, int dest) {\n  // Add an edge from src to dest.  A new node is added to the adjacency\n  // list of src.  The node is added at the begining\n  struct AdjListNode *newNode = newAdjListNode(dest);\n  newNode-&gt;next = graph-&gt;vertices[src].next;\n  graph-&gt;vertices[src].next = newNode;\n\n  // Since graph is undirected, add an edge from dest to src also. Write this part below.\n  // ...\n}\n\nint main() {\n\n  int n;\n  scanf(\"%d\", &n);\n\n  struct Graph *G = createGraph(n);\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i &lt; m; i++) {\n    int u, v;\n    scanf(\"%d\", &u);\n    scanf(\"%d\", &v);\n    addEdge(G, u, v);\n  }\n\n  int x, y;\n  \n  scanf(\"%d %d\", &x, &y);\n\n  // Write your solution here.\n  \n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nYou have to store the edges of a given graph as an edge list, and compute the degree of a given vertex.\nFor understanding how the template code works refer to this execution on a hard-coded example.\n\n\nThe first line contains a number m, which is the number of edges in the graph G.\nThe next m lines contain two space-separated integers represnting the endpoints of the edges.\nThe last line contains a single integer k.\n\n\n\nThe task is to report the degree of the vertex k, that is, the number of edges for which k is one of the endpoints.\n\n\n\nSample Input\n6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\n1\nSample Output\n4\n\n\n\n#include &lt;stdio.h&gt;\n\n// Declare a datatype that stores a single edge.\n\nstruct SingleEdge {\n  int ep[2];\n  struct SingleEdge *nextedge;\n};\n\nint main(void) {\n\n  // To begin with, there was nothing.\n  struct SingleEdge *head = NULL;\n  head = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  struct SingleEdge *current = NULL;\n  current = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n  // head simply points to the first element of the list.\n  // current will move forward as things get added.\n\n  head-&gt;ep[0] = -1;\n  head-&gt;ep[1] = -1;\n  head-&gt;nextedge = current;\n\n  // Read the number of edges.\n\n  int m;\n  scanf(\"%d\", &m);\n\n  for (int i = 0; i &lt; m; i++) {\n\n    struct SingleEdge *newedge;\n\n    newedge = (struct SingleEdge *)malloc(sizeof(struct SingleEdge));\n\n    // Populate the newedge struct\n    // with information about the current edge.\n\n    current-&gt;nextedge = newedge;\n    current = newedge;\n  }\n\n  struct SingleEdge *navigator = head-&gt;nextedge;\n  int degree = 0;\n  int vertex;\n\n  scanf(\"%d\", &vertex);\n\n  while (navigator) {\n    // CHECK IF \"vertex\" is an endpoint\n    // of the current edge being explored.\n    if (...) {\n      degree = degree + 1;\n    }\n    navigator = navigator-&gt;nextedge;\n  }\n\n  printf(\"%d\", degree);\n\n  return 0;\n}\n\n\n\n\n\n\n\n\n\n\nProblem 4. Sanity Check\n\n\n\n\n\nGiven a simple (no selfloops or multiedges), connected (any two vertices are reachable from each other), and undirected (no edge orientations) graph as input, return YES if it has a Euler path OR circuit, and NO otherwise.\nYou may assume the following:\n\nAn undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.\nAn undirected graph has an Eulerian path if and only if exactly zero or two vertices have odd degree, and all of its vertices with nonzero degree belong to a single connected component.\n\n\n\nThe first line of input is two space-separated integers n and m, denoting the number of vertices and edges of G, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\n\n\n\nOutput YES if it has a Euler path or circuit, and NO otherwise.\n\n\n\nSample Input\n10 6\n1 3\n2 1\n5 3\n1 7\n1 8\n2 5\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 5. [Optional] Which Way is the Highway?\n\n\n\n\n\nImagine a grid country with nm axis-parallel highways (no kidding: check out this video about the U.S. interstate highway numbering system! - watching the video is not required for understanding this problem).\nOf these highways, \\(n\\) are east-west and m are north-south. Note that the highways form an \\((n - 1) \\times (m - 1)\\) grid. In order to control the traffic, a policy was enforced which involved making each highway one way.\nThis means in each east-west highway, the traffic moves from “left to right” or “right to left”. Also, traffic moves “top to bottom” or “bottom to top” in each highway that runs north-south. It is possible to enter a horizontal highway from a vertical highway, or vice versa, at their intersection.\nA proposed set of orientations is given to you. You have to figure out if it is possible, after making the highways one-way based on these suggested orientations, if it is possible to reach any intersection from any other (without breaking traffic rules!)\n\n\nThe first line of input contains two integers \\(n\\) and \\(m\\), denoting the number of east-west highways and the number of north-south highways.\nThe second line contains a string of length \\(n\\), made of characters ‘{’ and ‘}’, denoting direction of each horizontal highway. If the i-th character is equal to ‘{’, the highway is directed from right to left otherwise, the highway is directed from left to right. Highways are listed in order from top to bottom.\nThe third line contains a string of length m, made of characters ‘B’ and ‘T’, denoting direction of each vertical highway. If the i-th character is equal to ‘T’, the highway is directed from south to north (towards the top), and if it is ‘B’ the highway is directed from north to south (towards the bottom). Highways are listed in order from left to right.\n\n\n\nIf the given pattern meets the mayor’s criteria, print a single line containing “YES”, otherwise print a single line containing “NO”.\n\n\n\nSample Input\n3 3\n}{}\nBTB\nSample Output\nNO\nSample Input\n4 6\n{}{}\nBTBTBT\nSample Output\nYES\n\n\n\n\n\n\n\n\n\n\nProblem 6. [Optional] Edge Orientation Puzzle\n\n\n\n\n\nLet’s say that a vertex in a directed graph is balanced if its indegree is the same as its outdegree.\nYou are given a simple and undirected graph \\(G\\). An orientation of \\(G\\) is an assigment of a direction to every edge in \\(G\\).\nYou want to come up with an orientation that maximizes the number of balanced vertices.\nReturn the number of balanced vertices in a orientation that maximizes this number.\n\n\nThe first line contains a positive integer \\(t~(1 \\leqslant t \\leqslant 200)\\) — the number of testsets in the input.\nEach of the testsets is given in the following way.\nThe first line contains two integers \\(n\\) and \\(m\\) \\((1 \\leqslant n \\leqslant 200, 0 \\leqslant m \\leqslant n·(n - 1) / 2)\\) — the number of vertices and the number of edges in \\(G\\).\nThe next m lines contain the description of the edges. Each line contains two integers \\(u\\) and \\(v\\) \\((1 \\leqslant u, v \\leqslant n)\\) — the endpoints of the edge. It’s guaranteed that there are no self-loops and multiedges. It is possible that the graph is not connected.\n\n\n\nFor each testset print the number of balanced vertices in an orientation that maximizes the number of balanced vertices.\n\n\n\nSample Input\n2\n5 5\n2 1\n4 5\n2 3\n1 3\n3 5\n7 2\n3 7\n4 2\nSample Output\n3\n3\nHere is an orientation of the first graph that has three balanced vertices:\n1 3\n3 5\n5 4\n3 2\n2 1\nIn the second graph, no matter how the two edges are oriented, there will be four imbalanced and three balanced vertices."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w04.html#list-of-practice-problems",
    "href": "2023/01-ES242/labs/lab-w04.html#list-of-practice-problems",
    "title": "ES242. Data Structures and Algorithms I. Week 04 Lab",
    "section": "",
    "text": "Weird Journey - if you already know how to check if a graph is connected, go for this! Otherwise you could come back to it after learning BFS/DFS :)\nROOKPATH - can you figure out how to model this problem as finding an Euler Tour?\nMashtali: a Space Oddysey - at least one method of solving this question involves constructing an Euler tour (but it is less direct than the previous problem), revisit it once you have figured out how to."
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w08.html",
    "href": "2023/01-ES242/labs/lab-w08.html",
    "title": "ES242. Data Structures and Algorithms I. Week 08 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nDepth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement DFS\n\n\n\n\n\nIn this exercise your goal is to output a DFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a sequence of vertices in the order in which they were pushed on to the stack. Assume that you always find your lexicographically smallest unvisited neighbor in your DFS implementation.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0 1 5 2 3 4 \nThere is a trailing whitespace at the end of the line in the output.\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper ordering of vertices. In particular, in the stack implementation, to make sure that you are visiting the lowest-indexed neighbor, the vertices need to be added to the adjacency list in reverse sorted order.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Is it a DAG?\n\n\n\n\n\nRecall that a path in a directed graph is a sequence of edges having the property that the ending vertex of each edge in the sequence is the same as the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A directed acyclic graph (also known as a DAG) is a directed graph that has no cycles.\nYou are given a directed graph \\(G\\). Your task is to determine whether the input graph is a DAG.\nNote that the vertices are 0-indexed. That is, the vertices are numbered as \\(0 \\ldots n-1\\).\nYour code should output YES if \\(G\\) is a DAG, else NO\n\n\nThe first line contains an integer n, the number of nodes in the graph.  The next line contains an integer m, denoting the number of edges in the graph.  The next m input lines contain two space-separated integers u,v denoting a directed edge from u to v (u-&gt;v).\n\n\n\nOutput YES if \\(G\\) is a DAG, else NO\nSample Input 1\n6\n6\n5 0\n5 2\n4 0\n4 1\n2 3\n3 1\nSample Output 1\nYES\nSample Input 2\n4\n4\n0 1\n1 2\n2 3\n3 0\nSample Output 2\nNO"
  },
  {
    "objectID": "2023/01-ES242/labs/lab-w08.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labs/lab-w08.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 08 Lab",
    "section": "",
    "text": "Back to course page\n\n\n\n\n\n\nDepth First Search\n\n\n\n\n\n\n\n\n\nProblem 1. Implement DFS\n\n\n\n\n\nIn this exercise your goal is to output a DFS traversal of a given graph G starting from a given source s.\n\n\nThe first line of input is three space-separated integers n, m and s, denoting the number of vertices and edges of G, and the id of the source vertex, respectively. Vertices are indexed from 0 to n-1.\nThe next m lines of code are two space separated integers u and v in the range 0 and n-1, indicating an (undirected) edge between vertices u and v.\nThe last line is a pair of space-separated integers x and y.\n\n\n\nThe output is a sequence of vertices in the order in which they were pushed on to the stack. Assume that you always find your lexicographically smallest unvisited neighbor in your DFS implementation.\n\n\n\nSample Input\n6 8 0\n0 1\n0 2\n0 3\n0 4\n5 1\n5 2\n5 3\n5 4\nSample Output\n0 1 5 2 3 4 \nThere is a trailing whitespace at the end of the line in the output.\nNote. This was a worked out example and the code is here. Please note that there some very minor changes from the version discussed in class to account for proper ordering of vertices. In particular, in the stack implementation, to make sure that you are visiting the lowest-indexed neighbor, the vertices need to be added to the adjacency list in reverse sorted order.\n\n\n\n\n\n\n\n\n\n\nProblem 2. Is it a DAG?\n\n\n\n\n\nRecall that a path in a directed graph is a sequence of edges having the property that the ending vertex of each edge in the sequence is the same as the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A directed acyclic graph (also known as a DAG) is a directed graph that has no cycles.\nYou are given a directed graph \\(G\\). Your task is to determine whether the input graph is a DAG.\nNote that the vertices are 0-indexed. That is, the vertices are numbered as \\(0 \\ldots n-1\\).\nYour code should output YES if \\(G\\) is a DAG, else NO\n\n\nThe first line contains an integer n, the number of nodes in the graph.  The next line contains an integer m, denoting the number of edges in the graph.  The next m input lines contain two space-separated integers u,v denoting a directed edge from u to v (u-&gt;v).\n\n\n\nOutput YES if \\(G\\) is a DAG, else NO\nSample Input 1\n6\n6\n5 0\n5 2\n4 0\n4 1\n2 3\n3 1\nSample Output 1\nYES\nSample Input 2\n4\n4\n0 1\n1 2\n2 3\n3 0\nSample Output 2\nNO"
  },
  {
    "objectID": "2023/01-ES242/labquiz2.html",
    "href": "2023/01-ES242/labquiz2.html",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] &lt;= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n\\(1 \\leq n \\leq 10^5\\)\n\\(1 \\leq m \\leq 2⋅10^5\\)\n\\(1 \\leq a,b \\leq n\\)\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (\\(1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5\\)) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends \\((1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])\\). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2023/01-ES242/labquiz2.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/labquiz2.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Problem 1. Unity Project\n\n\n\n\n\nThere are n people partaking in a project X. The capability value of the ith person is denoted as C[i]. The manager of the project has proposed the following algorithm to calculate the capability of the group (to undertake project X):\nOn each turn, choose two people, x and y, with capabilities C[x] and C[y] respectively (with C[x] &lt;= C[y]). A unity procedure is followed:\n\nIf the two have same capability value, remove both.\nElse, person x is removed, and capability of person y changes to C[y]-C[x]\n\nIt is obvious that at the end at most one person shall remain. The capability value of the person is stated as the capability value of the group. If no person remains, capability value of the group is taken as 0.\nYou have the find the minimum possible capability value of the group.\n\n\n\n\n\n\nRemark\n\n\n\nNote that the choice of people for the unite procedure directly affects the final capbility value.\n\n\n\n\nThe first line contains an integer n.  The next line contains n space-separated integers representing C[]\n\n\n\nReturn the minimum possible capability value of the group according to the mentioned algorithm\n\n\n\nSample Input 1\n6\n2 7 4 1 8 1\nSample Output 1\n1\nSample Input 2\n10\n1 3 5 4 6 13 10 9 8 15 16\nSample Output 2\n0\n\n\n\n\n\n\n\n\n\n\nProblem 2. Connect the City\n\n\n\n\n\nBangalore has n locations, and m bidirectional roads between them. The goal is to construct new roads so that there is a route between any two cities.\nYour task is to find out the minimum number of roads required.\n\n\nThe first input line has two integers n and m: the number of cities and roads. The cities are numbered 1,2,...,n.\nAfter that, there are m lines describing the roads. Each line has two integers a and b: there is a road between those cities.\nA road always connects two different cities, and there is at most one road between any two cities.\n\n\n\nPrint an integer k: the number of required roads.\n\n\n\n\n\\(1 \\leq n \\leq 10^5\\)\n\\(1 \\leq m \\leq 2⋅10^5\\)\n\\(1 \\leq a,b \\leq n\\)\n\n\n\n\nSample Input\n4 2\n1 2\n3 4\nSample Output\n1\n\n\n\n\n\n\n\n\n\n\nProblem 3. Spreading News\n\n\n\n\n\nAfter all the dropouts, there are n people left in ES242. The class has students from across different batches and disciplines, so some people know each other while others do not.\nYou want spread a rumor about whether ES242 will be repeated in the next semester. Students who are friends with each other will share any information they get. To get student i to start spread a rumor, you have to pay them in by buying c[i] samosas at Aadhya. Once someone is bribed, s/he tells it to all her/his friends, and they start spreading the rumor to their friends (for free), and so on.\nYou want everyone to catch the rumor. What is the minimum number of samosas you need to buy?\nTake a look at the notes if you think you haven’t understood the problem completely.\n\n\nThe first line contains two integer numbers n and m (\\(1 \\leq n \\leq 10^5, 0 \\leq m \\leq 10^5\\)) — the number of students in the class and the number of pairs of friends.\nThe second line contains n integer numbers c[i] –— the amount of samosas i-th student asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x[i], y[i]) which represent that characters x[i] and y[i] are friends \\((1 \\leq x[i], y[i] \\leq n, x[i] \\neq y[i])\\). It is guaranteed that each pair is listed at most once.\n\n\n\nPrint one number — the minimum number of samosas you have to buy to spread the rumor fully.\n\n\n\nSample Input\n5 2\n2 5 3 4 8\n1 4\n4 5\nSample Output\n10\nSample Input\n10 0\n1 2 3 4 5 6 7 8 9 10\nSample Output\n55\nNote\nIn the first example the best decision is to bribe the first student (he will spread the rumor to fourth student, and the fourth one will spread it to student). You also have to bribe the second and the third students, so they know the rumor.\n\n\n\n\n\n\n\n\n\n\nProblem 4. Predicting Possibility\n\n\n\n\n\nYou are playing a decision making game where the output can be either 1 or 0.\nGiven a N X N matrix, the objective of the game is to predict if it’s possible to reach from a given source to a destination in less than or equal to k moves.\nSome constraints are as follows:\n\nYou can only move to adjacent positions in 1 move.\nYou can only move diagonally across the matrix.\n\nGiven the value of n, and the maximum moves k, determine if you can fulfill the requirement: can you reach from source to destination in less than k moves?\n\n\nThe first line contains an integer n.\nThe second line contains an integer k, denoting the maximum number of moves you can make. \nThe third line contains two space-separated integers, i and j. An entry i j denotes i as the x-coordinate and j as y-coordinate of the source location.\nThe fourth line contains two space-separated integers, m and n. An entry m n denotes m as the x-coordinate and n as y-coordinate of the destination.\n\n\n\nReturn 1 if you can reach from source to destination in less than k moves. Else, return 0.\n\n\n\nSample Input 1\n4\n3\n0 0\n3 1\nSample Output 1\n1\n\n\n\n\n\n\n\n\n\n\nProblem 5. Can You Register?\n\n\n\n\n\nYou are a student in a university U.\nYou can only register in a certain program A, if the following condition is met:\nYou have registered for all courses with the course IDs [0,1... num_courses-1]\nIf there exists at least one i in range [0,1... num_courses-1] for which you cannot register, then you cannot register from the program.\nSome constraints are as follows:\n\nSome courses may have prerequisite courses. For example if i is a prerequisite of course ID j, then you must register for i before j\nYou can not repeat a course, you can only register for a course one.\n\nGiven the value of num_courses, and the prerequisite requirements, determine if you can fulfill the requirement: can you register for A (can you register for all the courses in range num_courses)?\n\n\nThe first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i.\n\n\n\nReturn YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2023/01-ES242/labquiz2.html#input-format-2",
    "href": "2023/01-ES242/labquiz2.html#input-format-2",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "The first line contains an integer num_courses.\nThe second line contains an integer num_prerequisites, denoting the number of prerequisites or conditions you have to fulfil.\nThe next num_prerequisites lines contain 2 space-separated integers i and j. An entry i j denotes course j is a prerequisite for course i."
  },
  {
    "objectID": "2023/01-ES242/labquiz2.html#output-format-2",
    "href": "2023/01-ES242/labquiz2.html#output-format-2",
    "title": "ES242. Data Structures and Algorithms I. Week 02 Lab",
    "section": "",
    "text": "Return YES if you can register for program A. Else, return NO.\n\n\nSample Input 1\n2\n2\n1 0\n0 1\nSample Output 1\nNO"
  },
  {
    "objectID": "2023/01-ES242/exams/exam01.html",
    "href": "2023/01-ES242/exams/exam01.html",
    "title": "ES242. Data Structures and Algorithms I. Exam 01",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 1 at the usual classroom venue. The exam will be released on Gradescope by 9:05PM, and will be available until 10:30PM.\nAll questions are multiple choice or require a numeric answer. Do not enter any explanations for any questions. If required, we will follow up with individual vivas to understand any alternate explanations you had in mind.\nYou have been asked to rate your confidence for all answers that you give. Please see this slide for the grading scheme and instructions.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array \\(A\\) and the number of days \\(D\\). Let \\(f(A,D)\\) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate \\(f(A,D)\\). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if \\(A\\) is the array (1,2,1,3) and \\(D = 0\\) then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and \\(D = 1\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf \\(A =\\) (500) and \\(D = 120\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and \\(D = 10\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf \\(A\\) has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\n::: Problem 4. A Bit of a Graph\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex \\(u\\) is denoted by \\(b_u\\); and\nan edge from \\(u\\) to \\(v\\) if the corresponding bit strings are such that the last three bits of \\(b_u\\) is the same as the first three bits of \\(b_v\\).\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?\n:::"
  },
  {
    "objectID": "2023/01-ES242/exams/exam01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/exams/exam01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Exam 01",
    "section": "",
    "text": "Issued: 16 Feb, 2023\nBack to course page\n\n\n\n\n\n\nInstructions\n\n\n\nWe will have Exam 1 at the usual classroom venue. The exam will be released on Gradescope by 9:05PM, and will be available until 10:30PM.\nAll questions are multiple choice or require a numeric answer. Do not enter any explanations for any questions. If required, we will follow up with individual vivas to understand any alternate explanations you had in mind.\nYou have been asked to rate your confidence for all answers that you give. Please see this slide for the grading scheme and instructions.\nAny violations of the honor code (in particular including, but not limited to, communicating during the quiz, or using the internet for anything other than looking up the official course materials) will be reported and will result in a F grade in the course.\n\n\n\n\n\n\n\n\nProblem 1. The Rubik’s Cube\n\n\n\nThe Rubik’s Cube is a 3-D combination puzzle involving a cube with a grid of nine squares on each face. In a solved state, each face of the cube has all the nine squares colored using one of six solid colours: white, red, blue, orange, green, and yellow.\n\n\n\nA Rubik Cube\n\n\nThe arrangement of colours is now standardised with white opposite yellow, blue opposite green, and orange opposite red, and the red, white, and blue arranged clockwise in that order.\nAn internal pivot mechanism enables each face to turn independently, thus mixing up the colours. For the puzzle to be solved, each face must be returned to have only one colour.\nSuppose you are implementing a Rubik Cube solver. To answer these questions, you do not need to know how to solve a Rubik’s cube. We assume that the cube is in a fixed orientation, so that that we can identify the front, back, top, bottom, left, and right faces in the natural way.\n\n\n\n\n\n\nProblem 1.1\n\n\n\n\n\nOne natural way to store the state of the cube is to use six 3x3 arrays of chars, with each character representing a color: cube-front[3][3], cube-back[3][3], cube-top[3][3], cube-bottom[3][3], cube-left[3][3], cube-right[3][3].\nIn this representation, to get the color of the sticker on the top-left corner of the front face, you would check the value of cube-front[0][0].\nIn general, for a face F, to get the color of the sticker on row R and column C, you will check the value of cube-F[R][C].\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. Which array would remain unchanged?\n\ncube-front[3][3]\ncube-back[3][3]\ncube-top[3][3]\ncube-bottom[3][3]\ncube-left[3][3]\ncube-right[3][3]\n\n\n\n\n\n\n\n\n\n\nProblem 1.2\n\n\n\n\n\nConsider the following approach. Instead of storing six separate two-dimensional arrays, we store the state of the cube as a linked list with 54 entries as depicted below, by listing all the elements in the cube-front array first, followed by cube-back, cube-top, cube-bottom, cube-left, cube-right. The elements within a face are listed row-wise (i.e, all elements of the first row are listed first, second row second, and so on).\n\n\n\nTransforming the arrays to a linked list\n\n\nSuppose you want to determine the color of a sticker at a particular location, which is specified by the face, row number, and column number. Which approach will require more steps?\n\nThe array approach\nThe linked list approach\n\n\n\n\n\n\n\n\n\n\nProblem 1.3\n\n\n\n\n\nConsider the linked list approach from the previous question. What is the index of the element that stores the color of the center sticker (i.e, row 1 and column 1 with 0-based indexing) of the bottom face? Assume that the linked list is 1-indexed: for example the index of the element that stores the color of the center sticker for the front face is 5.\n\n\n\n\n\n\n\n\n\nProblem 1.4\n\n\n\n\n\nObserve that the central pieces of each face in a Rubik’s cube do not move with any of the rotations. We can think of the Rubik’s cube as being assembled from 8 corner pieces and 12 edge pieces as shown below. Each of these individual pieces is called a cubie.\n\n\n\nCubies\n\n\nObserve that the state of the cube can be fully specified by specifying the orientation of all the cubies. Fix a labeling of all the corner cubies from 0 to 7 and the edge cubies from 0 to 11.\nIn particular, let us say that we store the state by storing two orientation arrays and two location arrays.\nThe first array, C stores the orientation of the corner cubies and the second array E, stores the orientation of edge cubies. The elements of each array stores an orientation (0 or 1 for edges; 0, 1, or 2 for corners).\nThe third array, CC stores the location of the corner cubies and the fourth array EE, stores the location of edge cubies. The elements of CC are values between 0 and 7 and the elements of EE are values between 0 and 11.\nThe state can be recovered from the orientations of all the cubies: for example, we know that the edge cubie with label 3 is at the location EE[3], and oriented according to the value stored in E[3].\nWhich data structure for representing the state of a Rubik’s cube takes up the least space? Assume that we are measuring the space in terms of the total lengths of the sequences involved in each representation.\n\nthe first approach with six 2D arrays\nthe second approach using a linked list\nthe current approach using two cubie arrays\n\n\n\n\n\n\n\n\n\n\nProblem 1.5\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the CC array?\n\n\n\n\n\n\n\n\n\nProblem 1.6\n\n\n\n\n\nConsider the representation involving cubies described in the previous part.\nSuppose we have a cube is in some state (not necessarily solved), and we want to transform the state to the one the cube would be in if the top face was rotated clockwise. How many values would you have to update in the EE array?\n\n\n\n\n\n\n\n\n\n\n\nProblem 2. Stable Matchings\n\n\n\nRecall that the stable matching problem involves N men and N women. Each man has a ranking of all N women and each woman has a ranking of all N men. A matching M is a collection of N pairs where each pair consists of a man and a woman, and all the men and women appear in exactly one pair. A man a and a woman b are said to block M if a prefers b over his matched partner in M and b prefers a over her matched partner in M according to their respective rankings. A matching is stable if there are no blocking pairs with respect to it.\n\n\n\n\n\n\nProblem 2.1\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers more between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\nProblem 2.2\n\n\n\n\n\nSuppose X and Y are two stable matchings. For a man a, let X[a] denote the matched partner of a in the matching X and let Y[a] denote the matched partner of a in the matching Y.\nConsider a matching Z formed as follows: pair up each man a with the woman he prefers less between X[a] and Y[a].\nNote: If X[a] and Y[a] happen to be the same woman b, then pair a with b.\nWhat can we say about Z?\n\nZ is not necessarily a matching.\nZ is a matching but not necessarily stable.\nZ is always a stable matching.\n\n\n\n\n\n\n\n\n\n\n\n\nProblem 3. An Array and A Virus\n\n\n\nThe memory of Rubina’s computer contains two interesting things: an array of integers and a virus. Each midnight the virus becomes active. It takes each array in memory and replaces it with a bunch of new arrays: one for each contiguous subarray of the original array.\nFor example, if today the memory contains a single array (1,2,1,3), tomorrow it will contain the following arrays: (1), (2), (1), (3), (1,2), (2,1), (1,3), (1,2,1), (2,1,3), (1,2,1,3).\nAs another example, if today the memory contains a single array (7,7), tomorrow it will contain the following arrays: (7), (7), (7,7), and the day after tomorrow it will contain the following arrays: (7), (7), (7), (7), (7,7), and so on.\nYou are given Rubina’s original array \\(A\\) and the number of days \\(D\\). Let \\(f(A,D)\\) be the sum of all elements of all arrays that will be in the memory of Rubina’s computer after D days. Our goal is to calculate \\(f(A,D)\\). You may assume that the memory of Rubina’s computer is sufficiently large to accommodate all the arrays.\nFor example, if \\(A\\) is the array (1,2,1,3) and \\(D = 0\\) then the answer is 7.\n\n\n\n\n\n\nProblem 3.1\n\n\n\n\n\nIf A = (1,2,1,3) and \\(D = 1\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.2\n\n\n\n\n\nIf \\(A =\\) (500) and \\(D = 120\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.3\n\n\n\n\n\nIf A = (1,2) and \\(D = 10\\), what is \\(f(A,D)\\)?\n\n\n\n\n\n\n\n\n\n\nProblem 3.4\n\n\n\n\n\nIf \\(A\\) has four elements, how many arrays of length one are there after two steps?\n\n\n\n\n\n\n::: Problem 4. A Bit of a Graph\nThe bit strings of length four are given by:\n0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.\nConsider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex \\(u\\) is denoted by \\(b_u\\); and\nan edge from \\(u\\) to \\(v\\) if the corresponding bit strings are such that the last three bits of \\(b_u\\) is the same as the first three bits of \\(b_v\\).\n\nFor example, we will have an edge from the vertex representing 0010 to the vertex representing 0101. We will also have an edge from the vertex representing 0010 to the vertex representing 0100.\n\n\n\n\n\n\nProblem 4.1\n\n\n\n\n\nHow many vertices does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.2\n\n\n\n\n\nHow many edges does this graph have?\n\n\n\n\n\n\n\n\n\nProblem 4.3\n\n\n\n\n\nHow many vertices in this graph have a self-loop?\n\n\n\n\n\n\n\n\n\nProblem 4.4\n\n\n\n\n\nDoes this graph have a closed Euler Tour?"
  },
  {
    "objectID": "2023/01-ES242/midsem-questions.html",
    "href": "2023/01-ES242/midsem-questions.html",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex \\(s\\) and the robber is at a vertex \\(t\\). (You may assume that \\(s\\) and \\(t\\) are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices \\(u_1, \\ldots, u_n\\) and edges \\((u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n)\\). Suppose the cop starts at \\(u_1\\) and the robber starts at \\(u_n\\). Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is \\(n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n-1\\).\n⭕️ The cop wins this game and the number of moves is \\(2(n-1)\\).\n[3 marks] Suppose the graph G has a cycle on the vertices v\\(v_1, v_2, \\ldots, v_k\\)and these are the only vertices that belong to any cycle in G. The robber is initially on a vertex u\\(u\\)and the closest vertex on the cycle is v\\(v_1\\) via the path (\\((u,p),(p,q),(q,v_1)\\) The cop is initially on a vertex w\\(w\\)and the closest vertex on the cycle is v\\(v_n\\) via the path (\\((w,r),(r,v_n)\\) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n\\[45,-4,32,0\\]\nthe \\(32\\) is right where it will be in the final sorted output:\n\\[-4,0,32,45\\]\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child \\(k\\) has value \\(v_k\\) for their bundle. Each child also has a value for all the other bundles: so let us say that child \\(k\\) has value \\(v_{k,\\ell}\\) for the bundle that was given to child \\(\\ell\\).\nWe say that child \\(a\\) is jealous of child \\(b\\) if \\(v_{a,b} &gt; v_a\\), i.e, s/he values the bundle given to \\(b\\) more than the bundle that s/he has.\nConsider the following directed graph \\(G\\). Introduce one vertex for every child, and add an edge from \\(a\\) to \\(b\\) if \\(a\\) is jealous of \\(b\\).\n\n[2 marks] Suppose \\(G\\) has a directed cycle \\(u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1\\). Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between \\(u_1\\) and \\(u_2\\), between \\(u_2\\) and \\(u_3\\), and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from \\(u\\) to \\(v\\) for any pair of vertices \\(u\\) and \\(v\\).\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most \\(6n\\).\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "2023/01-ES242/midsem-questions.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/midsem-questions.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. MidSem Questions",
    "section": "",
    "text": "Problem 1. A Boastful Cop vs a Clever Robber\n\n\n\n\n\nA robber is trying to escape a cop on an undirected graph G. In the beginning, the cop is at a vertex \\(s\\) and the robber is at a vertex \\(t\\). (You may assume that \\(s\\) and \\(t\\) are distinct.) They take turns making moves, and each knows the location of the other at all times. A move (by either of them) consists of either staying at the current vertex or moving to a neighbouring one.\nThe cop is boastful, so he announces his moves before making them. Specifically:\n\nbefore anyone makes a move, the cop’s first move is announced - so the robber knows where the cop is headed.\nThen, the robber makes an actual move.\nAfter this, each time the cop moves, he must respect the previous announcement (i.e, move to the previously announced vertex), and then decide his next move and announce it.\nThe robber hears the announcements, so she always knows the cop’s next move before making her own. She makes her move.\n\nIf the cop and the robber are at the same vertex after either of them moves, then the robber is caught. Otherwise, the chase is on!\nThe robber chooses her moves optimally to escape. If she cannot escape, she chooses her moves to maximize the total number of moves until she is caught. The cop chooses his moves optimally to try to catch the robber in as few total moves as possible.\nGiven the graph’s layout and the initial locations of both the cop and the robber, find out whether robber will be caught by the cop and, if so, in how many moves. We say that the game is won by the robber if she’s never caught, and by the cop otherwise.\nIn the figures below, the square vertex depicts the initial location of the robber, and the star depicts the initial location of the cop. Indicate what happens under optimal play. If you choose that the cop wins, indicate how many moves the game lasts assuming optimal play. Each move made by each player counts as a distinct move.\n\n[2 marks] Who wins? __________________\n[2 marks] Who wins? __________________\n[2 marks] If the robber starts on a vertex that is a part of a cycle, then which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is equal to the length of the cycle.\n⭕️ The cop wins this game and the number of moves is twice the length of the cycle.\n⭕️ The cop wins this game and the number of moves depends on the initial distance between the cop and the robber.\n⭕️ The outcome depends on where the cop starts.\n[3 marks] Suppose the game is being played on a path (i.e, a graph with vertices \\(u_1, \\ldots, u_n\\) and edges \\((u_1,u_2), (u_2, u_3), \\cdots, (u_{n-1},u_n)\\). Suppose the cop starts at \\(u_1\\) and the robber starts at \\(u_n\\). Which of the following statements is true?\n⭕️ The robber wins this game.\n⭕️ The cop wins this game and the number of moves is \\(n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n\\).\n⭕️ The cop wins this game and the number of moves is \\(2n-1\\).\n⭕️ The cop wins this game and the number of moves is \\(2(n-1)\\).\n[3 marks] Suppose the graph G has a cycle on the vertices v\\(v_1, v_2, \\ldots, v_k\\)and these are the only vertices that belong to any cycle in G. The robber is initially on a vertex u\\(u\\)and the closest vertex on the cycle is v\\(v_1\\) via the path (\\((u,p),(p,q),(q,v_1)\\) The cop is initially on a vertex w\\(w\\)and the closest vertex on the cycle is v\\(v_n\\) via the path (\\((w,r),(r,v_n)\\) Which of the following statements is true? Assume there are no other vertices in the graph G.\n⭕️ The robber wins this game.\n⭕️ The cop wins this game.\nExplain your answer: if you think the robber wins the game, explain how the robber will evade the cop forever, and if you think the cop wins this game, explain what is the sequence of moves in an optimal game. (You can use the space on the next page.)\n\n\n\n\n\n\n\n\n\n\nProblem 2. Cheating the Stable Marriage Algorithm\n\n\n\n\n\nConsider a stable marriage instance with A,B,C being the men and X,Y,Z being the women. The input is the following:\n\n[2 marks] What is the output of the stable matching algorithm for this instance? Assume that the men are proposing.\n[3 marks] Consider again the algorithm where men are proposing. One of the women can misreport her preferences to get a better outcome from this algorithm. Identify the woman and explain what preference she can submit instead of her true preference to improve the output from her perspective.\n\n\n\n\n\n\n\n\n\n\nProblem 3. Preserving Fixed-Points while Sorting\n\n\n\n\n\n[5 marks] When an array is to be sorted, it may happen that some data values start out being in the same position where they should end up. For example, in the array which is originally:\n\\[45,-4,32,0\\]\nthe \\(32\\) is right where it will be in the final sorted output:\n\\[-4,0,32,45\\]\nBut as a particular sorting algorithm operates, it might (depending on the algorithm) move such an element out of the position where it belongs and move it back eventually.\nLet’s say that a sorting algorithm respects fixedpoints if it never moves an element that is in its proper position, on any input.\nConsider the following methods of sorting:\nSelection sort. The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\nEg: 4 3 2 1 → 1 3 2 4 → 1 2 3 4\nInsertion sort. Insertion sort iterates over the array, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\nEg: 4 3 2 1 → 3 4 2 1 → 2 3 4 1 → 1 2 3 4\nWhich of the following statements are true?\n⭕️ Insertion sort does not respect fixedpoints but selection sort does.\n⭕️ Selection sort does not respect fixedpoints but insertion sort does.\n⭕️ Neither insertion sort nor selection sort respects fixed points.\n⭕️ Both insertion sort and selection sort respect fixed points.\nJustify your answer. If you claim that a particular sorting method does not respect fixed points, then give an example. If you claim that an algorithm does respect fixed points, argue why.\n\n\n\n\n\n\n\n\n\nProblem 4. Eliminating Jealousy\n\n\n\n\n\nYou have distributed M objects among N children. The set of objects given to a child is called his or her bundle. Each child has a specific value for their bundle: let us say child \\(k\\) has value \\(v_k\\) for their bundle. Each child also has a value for all the other bundles: so let us say that child \\(k\\) has value \\(v_{k,\\ell}\\) for the bundle that was given to child \\(\\ell\\).\nWe say that child \\(a\\) is jealous of child \\(b\\) if \\(v_{a,b} &gt; v_a\\), i.e, s/he values the bundle given to \\(b\\) more than the bundle that s/he has.\nConsider the following directed graph \\(G\\). Introduce one vertex for every child, and add an edge from \\(a\\) to \\(b\\) if \\(a\\) is jealous of \\(b\\).\n\n[2 marks] Suppose \\(G\\) has a directed cycle \\(u_1 \\rightarrow u_2 \\rightarrow \\cdots \\rightarrow u_q \\rightarrow u_1\\). Describe a way to reassign the bundles (without changing them) so that with the new assignment, all the edges in the cycle disappear (i.e, there is no jealousy between \\(u_1\\) and \\(u_2\\), between \\(u_2\\) and \\(u_3\\), and so on, with respect to the new assignment). Explain your answer on the next page.\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is not jealous of anyone?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n[1 marks] Suppose \\(G\\) has no directed cycles. Is it true that there is a child who is nobody is jealous of?\n⭕️ Yes ⭕️ No ⭕️ Impossible to conclude from the given information\n\n\n\n\n\n\n\n\n\n\nProblem 5. Make Strongly Connected\n\n\n\n\n\n[2 marks] In the graph below, what is the smallest number of edges you need to add to make the graph strongly connected? Recall that a strongly connected graph is one where there is a path from \\(u\\) to \\(v\\) for any pair of vertices \\(u\\) and \\(v\\).\n\n\n\n\n\n\n\n\n\nProblem 6. Counting Gifts\n\n\n\n\n\n[2 marks] The following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any groups of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nProve that the total number of gifts given is at most \\(6n\\).\nHint: what can you say about the maximum degree of this graph?"
  },
  {
    "objectID": "2023/01-ES242/quizzes/q01.html",
    "href": "2023/01-ES242/quizzes/q01.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01",
    "section": "",
    "text": "Issued: 5 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a \\(N \\times N\\) board, using a list of size \\(N^2\\). The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a \\(N \\times N\\) board, using a list of size \\(N^2\\). As in the previous question, the list carries information about the state of the board: the first \\(N\\) elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among \\(n\\) men and \\(n\\) women such that there is exactly one stable marriage possible."
  },
  {
    "objectID": "2023/01-ES242/quizzes/q01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/q01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01",
    "section": "",
    "text": "Issued: 5 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a \\(N \\times N\\) board, using a list of size \\(N^2\\). The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a \\(N \\times N\\) board, using a list of size \\(N^2\\). As in the previous question, the list carries information about the state of the board: the first \\(N\\) elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among \\(n\\) men and \\(n\\) women such that there is exactly one stable marriage possible."
  },
  {
    "objectID": "2023/01-ES242/quizzes/q03.html",
    "href": "2023/01-ES242/quizzes/q03.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n\\(6n\\)\n\\(4n\\)\n\\(3n\\)\nNone of the above\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers."
  },
  {
    "objectID": "2023/01-ES242/quizzes/q03.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/q03.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 03",
    "section": "",
    "text": "Issued: 19 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Party Puzzle I\n\n\n\nThe following is true for \\(n\\) guests at a party:\n\nIn any group of three guests, there are two guests who do not know each other, and\nIn any group of seven guests, there are two guests who do know each other.\n\nAt the end of the party, everyone gives a present to all the guests he or she knows.\nThe total number of gifts given is at most:\n\n\\(6n\\)\n\\(4n\\)\n\\(3n\\)\nNone of the above\n\n\n\n\n\n\n\n\n\nProblem 2. Party Puzzle II\n\n\n\nIs it possible that there is a group of six people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers.\n\n\n\n\n\n\n\n\nProblem 3. Party Puzzle III\n\n\n\nIs it possible that there is a group of five people where there is no group of three guests who are mutual friends and there is no group of three guests who are mutual strangers?\n\nYes\nNo\n\nAssume that every pair of people are either mutual friends or mutual strangers."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a01.html",
    "href": "2023/01-ES242/quizzes/a01.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01 Solutions",
    "section": "",
    "text": "Released: 10 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a \\(N \\times N\\) board, using a list of size \\(N^2\\). The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose the empty cell is at row \\(R\\) (counting from the top; i.e, the top row is row \\(1\\)) and column \\(C\\) (counting from the left; i.e, the left-most column is column \\(1\\)). The user may chose one of the following four moves:\n\nmove the number at row \\(R-1\\) and column \\(C\\) into the empty cell, provided \\(R\\) is not the top row.\nmove the number at row \\(R\\) and column \\(C-1\\) into the empty cell, provided \\(C\\) is not the left-most column.\nmove the number at row \\(R\\) and column \\(C+1\\) into the empty cell, provided \\(C\\) is not the right-most column.\nmove the number at row \\(R+1\\) and column \\(C\\) into the empty cell, provided \\(R\\) is not the bottom row.\n\nThe procedure to update the configuration involves two things:\n\nidentify the number to be moved into the empty slot based on the move chosen by the user;\nupdate (swap) the values of the list at locations \\((R-1)*N + (C-1)\\)1 and the location corresponding to the number to be moved.\n\nThese two steps require knowledge of \\(R\\) and \\(C\\), i.e, the location of the empty slot. Since we are given the contents of all locations as a list, we may need to — in the worst case — go through the entire list to find where the 0-element lies.\nNote that to speed things up, we could store the integers \\(R\\) and \\(C\\), representing the location of the 0-element, separately: and update it as moves are made. With this approach, the update can be achieved in constant time.\nFor this question, no such assumption is made, so the time required to update the configuration is proportional to \\(N^2\\) in the worst-case.\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a \\(N \\times N\\) board, using a list of size \\(N^2\\). As in the previous question, the list carries information about the state of the board: the first \\(N\\) elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNotice that there are moves that may require that you update the status of every cell in the board (as an extreme example, suppose all the odd-numbered rows have elements in them and all the even-numbered rows are empty; and the user choses to move downwards: then except for possibly the bottom row have to be updated in a single move).\nSo one would have to examine the impact of the move on each cell in board and update all the cells, which requires time proportional to \\(N^2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among \\(n\\) men and \\(n\\) women such that there is exactly one stable marriage possible.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nOne situation where there is exactly one matching that is stable is when all the men and women have identical preferences. In particular, if we denote the set of \\(n\\) men as \\(V := \\{m_1,\\ldots,m_n\\}\\) and the \\(n\\) women as \\(W := \\{w_1,\\ldots,w_n\\}\\), and further:\n\nevery man has the preference \\(w_1 \\succ w_2 \\succ \\cdots w_n\\) and\nevery woman has the preference \\(m_1 \\succ m_2 \\succ \\cdots m_n\\);\n\nthen then only stable matching is \\((w_1,m_1),\\cdots,(w_n,m_n)\\).\nTo see this, suppose a stable matching \\(M\\) matches \\(w_i\\) to \\(m_j\\) where \\(i \\neq j\\), and let \\(i\\) be the smallest index for which this happens (i.e, for all \\(\\ell &lt; i\\), \\(M\\) matches \\(w_\\ell\\) with \\(m_\\ell\\)). Then: it must be that \\(j &gt; i\\) (since all men \\(m_j\\) with \\(j &lt; i\\) are already matched to \\(w_j\\)). However, this implies that \\((w_i,m_i)\\) will form a blocking pair (note that \\(m_i\\) is also matched to some \\(w_t\\) with \\(t &gt; i\\)), contradicting our assumption that \\(M\\) is stable.\nFood for thought: are there other examples?\n\nEvaluation remark: for full credit, it suffices that the answer describes a valid example, even if there is no justification."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a01.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/a01.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01 Solutions",
    "section": "",
    "text": "Released: 10 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. The 15-Puzzle\n\n\n\nSuppose you are implementing the 15 puzzle game:\n\nThis is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to rearrange the tiles and place them in increasing numerical order.\n\nHere’s an example configuration:\n\n\n\nAn Example 15-Puzzle Instance\n\n\nYou decide to record the game state as a list of length 16, with elements between 0-15 (0 denotes the empty cell), using the following convention:\n\nthe first four elements contain the numbers in the first row of the board,\nthe fifth-eighth elements contain the numbers in the second row of the board,\nthe ninth-twelfth elements contain the numbers in the third row of the board, and\nthe thirteenth-sixteenth element csontain the numbers in the fourth row of the board.\n\nSuppose you generalise this to a game involving a \\(N \\times N\\) board, using a list of size \\(N^2\\). The user indicates how they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSuppose the empty cell is at row \\(R\\) (counting from the top; i.e, the top row is row \\(1\\)) and column \\(C\\) (counting from the left; i.e, the left-most column is column \\(1\\)). The user may chose one of the following four moves:\n\nmove the number at row \\(R-1\\) and column \\(C\\) into the empty cell, provided \\(R\\) is not the top row.\nmove the number at row \\(R\\) and column \\(C-1\\) into the empty cell, provided \\(C\\) is not the left-most column.\nmove the number at row \\(R\\) and column \\(C+1\\) into the empty cell, provided \\(C\\) is not the right-most column.\nmove the number at row \\(R+1\\) and column \\(C\\) into the empty cell, provided \\(R\\) is not the bottom row.\n\nThe procedure to update the configuration involves two things:\n\nidentify the number to be moved into the empty slot based on the move chosen by the user;\nupdate (swap) the values of the list at locations \\((R-1)*N + (C-1)\\)1 and the location corresponding to the number to be moved.\n\nThese two steps require knowledge of \\(R\\) and \\(C\\), i.e, the location of the empty slot. Since we are given the contents of all locations as a list, we may need to — in the worst case — go through the entire list to find where the 0-element lies.\nNote that to speed things up, we could store the integers \\(R\\) and \\(C\\), representing the location of the 0-element, separately: and update it as moves are made. With this approach, the update can be achieved in constant time.\nFor this question, no such assumption is made, so the time required to update the configuration is proportional to \\(N^2\\) in the worst-case.\n\n\n\n\n\n\n\n\n\nProblem 2. 2048\n\n\n\nSuppose you are implementing the 2048 game:\n\n2048 is played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board with a value of either 2 or 4. Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid. If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.\n\nFeel free to play the game at the link above to get a feel for it.\nSuppose you are implementing a version of 2048 on a \\(N \\times N\\) board, using a list of size \\(N^2\\). As in the previous question, the list carries information about the state of the board: the first \\(N\\) elements correspond to the numbers in the first row, and so on. The user indicates in which direction they want to move at every step. Assume you can directly access and update any element in your list.\nHow much time do you need to update the configuration?\n\nproportional to \\(N\\)\nproportional to \\(N^2\\)\nconstant\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNotice that there are moves that may require that you update the status of every cell in the board (as an extreme example, suppose all the odd-numbered rows have elements in them and all the even-numbered rows are empty; and the user choses to move downwards: then except for possibly the bottom row have to be updated in a single move).\nSo one would have to examine the impact of the move on each cell in board and update all the cells, which requires time proportional to \\(N^2\\).\n\n\n\n\n\n\n\n\n\nProblem 3. Game of Trust\n\n\n\nDescribe how to define a set of marriage preferences among \\(n\\) men and \\(n\\) women such that there is exactly one stable marriage possible.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nOne situation where there is exactly one matching that is stable is when all the men and women have identical preferences. In particular, if we denote the set of \\(n\\) men as \\(V := \\{m_1,\\ldots,m_n\\}\\) and the \\(n\\) women as \\(W := \\{w_1,\\ldots,w_n\\}\\), and further:\n\nevery man has the preference \\(w_1 \\succ w_2 \\succ \\cdots w_n\\) and\nevery woman has the preference \\(m_1 \\succ m_2 \\succ \\cdots m_n\\);\n\nthen then only stable matching is \\((w_1,m_1),\\cdots,(w_n,m_n)\\).\nTo see this, suppose a stable matching \\(M\\) matches \\(w_i\\) to \\(m_j\\) where \\(i \\neq j\\), and let \\(i\\) be the smallest index for which this happens (i.e, for all \\(\\ell &lt; i\\), \\(M\\) matches \\(w_\\ell\\) with \\(m_\\ell\\)). Then: it must be that \\(j &gt; i\\) (since all men \\(m_j\\) with \\(j &lt; i\\) are already matched to \\(w_j\\)). However, this implies that \\((w_i,m_i)\\) will form a blocking pair (note that \\(m_i\\) is also matched to some \\(w_t\\) with \\(t &gt; i\\)), contradicting our assumption that \\(M\\) is stable.\nFood for thought: are there other examples?\n\nEvaluation remark: for full credit, it suffices that the answer describes a valid example, even if there is no justification."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a01.html#footnotes",
    "href": "2023/01-ES242/quizzes/a01.html#footnotes",
    "title": "ES242. Data Structures and Algorithms I. Quiz 01 Solutions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis assumes 0-based indexing; the exact index can be slightly different depending on convention.↩︎"
  },
  {
    "objectID": "2023/01-ES242/quizzes/a02.html",
    "href": "2023/01-ES242/quizzes/a02.html",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02 Solutions",
    "section": "",
    "text": "Released: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFor the first part:\nnext(prev(next(next(p)))) = next(prev(next(next(3)))) = next(prev(next(4))) = next(prev(5)) = next(4) = 5\nFor the second part:\ndata(prev(prev(next(p)))) = data(prev(prev(next(3)))) = data(prev(prev(4))) = data(prev(3)) = data(2)\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\n\n\nSuppose \\(A\\) is the adjacency matrix of a simple undirected graph \\(G = (V,E)\\) with \\(n\\) vertices given by \\(\\{1,2,\\ldots,n\\}\\), that is,\n\\[\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\\]\nNote that \\(A[i,i] = 0\\) for all \\(i \\in \\{1,2,\\ldots,n\\}\\) since \\(G\\) is simple.\nSuppose \\((i,j) \\in E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\nSuppose \\((i,j) \\notin E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\\(A^2[i,j] = k\\) irrespective of whether \\((i,j) \\in E\\) or not. Notice that the entry in the \\(i\\)-th row and \\(j\\)-th column of \\(A^2\\) is the product of the \\(i\\)-th row of \\(A\\) and the \\(j\\)-th column of \\(A\\), and the only terms that are not zeroed-out in this product are those that correspond to vertices adjacent to both \\(i\\) and \\(j\\). Note that both \\(i\\) and \\(j\\) are not adjacent to themselves, which is why their adjacency (or lack of it) does not change the final answer.\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nSuppose every vertex of a graph \\(G\\) on \\(n\\) vertices has \\(d\\) neighbors.\nWhat is the size of the edge list?\n\n\\(d \\cdot n\\)\n\\(d \\cdot n/2\\)\n\\(2d \\cdot n\\)\n\\((d + n)\\)\n\nIs it possible that both \\(d\\) and \\(n\\) are odd?\n\nYes\nNo\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf every vertex has \\(d\\) neighbors then there are \\(d\\) edges incident to all the \\(n\\) vertices in the graph. Thus we have \\(dn\\) edges but with each edge counted exactly twice: in particular the edge \\((u,v)\\) gets counted as being one of the edges incident on \\(u\\) and one of the edges incident on \\(v\\). Therefore the total number of edges, and therefore the size of the edge list, is \\(d \\cdot n/2\\).\nSince the total number of edges in any graph is a whole number, and is given by \\(d \\cdot n/2\\), it is not possible that both \\(d\\) and \\(n\\) are odd."
  },
  {
    "objectID": "2023/01-ES242/quizzes/a02.html#es242.-data-structures-and-algorithms-i.",
    "href": "2023/01-ES242/quizzes/a02.html#es242.-data-structures-and-algorithms-i.",
    "title": "ES242. Data Structures and Algorithms I. Quiz 02 Solutions",
    "section": "",
    "text": "Released: 12 Jan, 2023\nBack to course page\n\n\n\n\n\n\nProblem 1. Doubly Linked Lists\n\n\n\n\n\nIf p is the address of a node in a doubly linked list L, then:\n\nnext(p) is the address of the next node in the linked list\nprev(p) is the address of the previous node in the linked list\ndata(p) is the information contained in the the node at address p\n\nNote that:\n\nif p is the address of the first node in L then prev(p) is NULL.\nif p is the address of the last node in L then next(p) is NULL.\n\nAlso, data(p), next(p) and prev(p) returns a sensible value only if p is not NULL, otherwise they are UNDEFINED.\nIf L is a linked list with five elements and p is the address of the third element, then what does next(prev(next(next(p)))) represent?\n\nAddress of the 1st element\nAddress of the 2nd element\nAddress of the 3rd element\nAddress of the 4th element\nAddress of the 5th element\nUNDEFINED\n\nIf L is a linked list with five elements and p is the address of the third element, then what does data(prev(prev(next(p)))) represent?\n\nData of the 1st element\nData of the 2nd element\nData of the 3rd element\nData of the 4th element\nData of the 5th element\nUNDEFINED\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFor the first part:\nnext(prev(next(next(p)))) = next(prev(next(next(3)))) = next(prev(next(4))) = next(prev(5)) = next(4) = 5\nFor the second part:\ndata(prev(prev(next(p)))) = data(prev(prev(next(3)))) = data(prev(prev(4))) = data(prev(3)) = data(2)\n\n\n\n\n\n\n\n\n\nProblem 2. Adjacency Lists\n\n\n\n\n\nSuppose \\(A\\) is the adjacency matrix of a simple undirected graph \\(G = (V,E)\\) with \\(n\\) vertices given by \\(\\{1,2,\\ldots,n\\}\\), that is,\n\\[\n    A[i,j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{if } (i,j) \\notin E.\n    \\end{cases}\n\\]\nNote that \\(A[i,i] = 0\\) for all \\(i \\in \\{1,2,\\ldots,n\\}\\) since \\(G\\) is simple.\nSuppose \\((i,j) \\in E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\nSuppose \\((i,j) \\notin E\\) for some \\(i,j \\in \\{1,2,\\ldots,n\\}\\), \\(i \\neq j\\). Let \\(k\\) denote the number of vertices that are adjacent to both \\(i\\) and \\(j\\).\nWhat is the value of \\(A^2[i,j]\\)?\n\n\\(0\\)\n\\(1\\)\n\\(k\\)\n\\(k+1\\)\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\\(A^2[i,j] = k\\) irrespective of whether \\((i,j) \\in E\\) or not. Notice that the entry in the \\(i\\)-th row and \\(j\\)-th column of \\(A^2\\) is the product of the \\(i\\)-th row of \\(A\\) and the \\(j\\)-th column of \\(A\\), and the only terms that are not zeroed-out in this product are those that correspond to vertices adjacent to both \\(i\\) and \\(j\\). Note that both \\(i\\) and \\(j\\) are not adjacent to themselves, which is why their adjacency (or lack of it) does not change the final answer.\n\n\n\n\n\n\n\n\n\nProblem 3. Edge List\n\n\n\n\n\nSuppose every vertex of a graph \\(G\\) on \\(n\\) vertices has \\(d\\) neighbors.\nWhat is the size of the edge list?\n\n\\(d \\cdot n\\)\n\\(d \\cdot n/2\\)\n\\(2d \\cdot n\\)\n\\((d + n)\\)\n\nIs it possible that both \\(d\\) and \\(n\\) are odd?\n\nYes\nNo\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nIf every vertex has \\(d\\) neighbors then there are \\(d\\) edges incident to all the \\(n\\) vertices in the graph. Thus we have \\(dn\\) edges but with each edge counted exactly twice: in particular the edge \\((u,v)\\) gets counted as being one of the edges incident on \\(u\\) and one of the edges incident on \\(v\\). Therefore the total number of edges, and therefore the size of the edge list, is \\(d \\cdot n/2\\).\nSince the total number of edges in any graph is a whole number, and is given by \\(d \\cdot n/2\\), it is not possible that both \\(d\\) and \\(n\\) are odd."
  },
  {
    "objectID": "short.html",
    "href": "short.html",
    "title": "Short Courses",
    "section": "",
    "text": "SC-CM\nA Short Course on Card Magic\nby Prof. Ramprasad Saptharishi \n2025\n\n\n\n\n\nCRYPTO\nA nano-course in modern cryptography\nby Prof. Venkata Koppula \n2023\n\n\n\n\n\n191014K02\nGIAN Course on Randomized Methods for Parameterized Algorithms\nby Prof. Daniel Lokshtanov \n2022\n\n\n\n\n\nSC 310\nVisual Science Communication\nby Dr. Ipsa Jain \n2022\n\n\n\n\n\nCertification\nDynamic Programming Bootcamp\nby Priyansh Agarwal \n2022\n\n\n\n\n\nSC 312\nCS Research 101\nby Shashank Srikant \n2022\n\n\n\n\n\nSC 302\nFundamentals of Science Communication\nby Siddharth Kankaria \n2022\n\n\n\n\n\nSC-235\nCards and Combinatorics\nby Manish Jain (and team) \n2019\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "short.html#short-courses-and-workshops",
    "href": "short.html#short-courses-and-workshops",
    "title": "Short Courses",
    "section": "",
    "text": "SC-CM\nA Short Course on Card Magic\nby Prof. Ramprasad Saptharishi \n2025\n\n\n\n\n\nWEBSITE\nA Workshop on Making Personal Websites \n2024\n\n\n\n\n\nCRYPTO\nA nano-course in modern cryptography\nby Prof. Venkata Koppula \n2023\n\n\n\n\n\n191014K02\nGIAN Course on Randomized Methods for Parameterized Algorithms\nby Prof. Daniel Lokshtanov \n2022\n\n\n\n\n\nSC 310\nVisual Science Communication\nby Dr. Ipsa Jain \n2022\n\n\n\n\n\nCertification\nDynamic Programming Bootcamp\nby Priyansh Agarwal \n2022\n\n\n\n\n\nSC 312\nCS Research 101\nby Shashank Srikant \n2022\n\n\n\n\n\nSC 302\nFundamentals of Science Communication\nby Siddharth Kankaria \n2022\n\n\n\n\n\nSC-235\nCards and Combinatorics\nby Manish Jain (and team) \n2019\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/03-ES112/index.html",
    "href": "2017/03-ES112/index.html",
    "title": "ES112 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/03-ES112/index.html#es112.",
    "href": "2017/03-ES112/index.html#es112.",
    "title": "ES112 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/01-FP601/index.html",
    "href": "2017/01-FP601/index.html",
    "title": "FP601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/01-FP601/index.html#fp601.",
    "href": "2017/01-FP601/index.html#fp601.",
    "title": "FP601 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/04-GIAN/index.html",
    "href": "2017/04-GIAN/index.html",
    "title": "GIAN | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2017/04-GIAN/index.html#gian.",
    "href": "2017/04-GIAN/index.html#gian.",
    "title": "GIAN | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-SC235/index.html",
    "href": "2019/03-SC235/index.html",
    "title": "SC235 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-SC235/index.html#sc235.",
    "href": "2019/03-SC235/index.html#sc235.",
    "title": "SC235 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-ES242/index.html",
    "href": "2019/03-ES242/index.html",
    "title": "ES242 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/03-ES242/index.html#es242.",
    "href": "2019/03-ES242/index.html#es242.",
    "title": "ES242 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2019/cards.html",
    "href": "2019/cards.html",
    "title": "Cards and Combinatorics | Manish Jain",
    "section": "",
    "text": "— Manish Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nIn this course, we will introduce many little-known theorems of advanced mathematics. We will go on a roller coaster ride from delightful self-working magic tricks to serious math, then back again to magic. The tricks don’t require any sleight of hand or trickery.\nA similar course is taught at Stanford University by a former professional magician named Persi Diaconis. At school, Diaconis supported himself by playing poker on ships between New York and South America. Martin Gardner, a writer at Scientific American, once saw him and recommended to a professor for Ph.D. at Harvard University.\nIn two days, we would learn about Hummer shuffles, Royal Hummer, de Bruijn Sequences, Universal Cycles, Mandelbrot Set, Neat Shuffles and many more card tricks. You would have about 10 cool card tricks up your sleeve and you would be comfortable exploring many more as you would know the terminology of math card tricks by the end of the course.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nManish Jain spends most of his time investigating the science behind simple toys, and is passionate about sharing his insights and excitement with people. He is Associate Teaching Professor at Center for Creative Learning (CCL), IIT Gandhinagar, whose goal is to create and foster makers who can take innovation to the next level. Towards this goal, CCL designs and offers deep and joyful learning experiences built around STEM toys and hands-on activities. The ultimate goal is to bring back the gleam in the eyes of students and teachers.\nBefore founding CCL, Manish worked at IUCAA’s Science Centre in Pune, with Padma Shri Arvind Gupta. In his previous avatar, he spent 19 years in the area of chip design at Synopsys (Bangalore & amp; Mountain View), serving as a Director of R&D and Scientist leading Low Power Simulation efforts, where he has 5 US patents.\nManish has a bachelor’s degree in Electrical Engineering from IIT Kanpur (1993) and has also finished a few courses at Stanford University.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n6th and 7st April, 2019 • 10:00 AM to 1:00 PM, 3:00 PM to 5:00 PM"
  },
  {
    "objectID": "2019/cards.html#cards-and-combinatorics",
    "href": "2019/cards.html#cards-and-combinatorics",
    "title": "Cards and Combinatorics | Manish Jain",
    "section": "",
    "text": "— Manish Jain\n\n\n\n\n\n\nAbout the Course\n\n\n\n\n\nIn this course, we will introduce many little-known theorems of advanced mathematics. We will go on a roller coaster ride from delightful self-working magic tricks to serious math, then back again to magic. The tricks don’t require any sleight of hand or trickery.\nA similar course is taught at Stanford University by a former professional magician named Persi Diaconis. At school, Diaconis supported himself by playing poker on ships between New York and South America. Martin Gardner, a writer at Scientific American, once saw him and recommended to a professor for Ph.D. at Harvard University.\nIn two days, we would learn about Hummer shuffles, Royal Hummer, de Bruijn Sequences, Universal Cycles, Mandelbrot Set, Neat Shuffles and many more card tricks. You would have about 10 cool card tricks up your sleeve and you would be comfortable exploring many more as you would know the terminology of math card tricks by the end of the course.\n\n\n\n\n\n\n\n\n\nAbout the Instructor\n\n\n\n\n\nManish Jain spends most of his time investigating the science behind simple toys, and is passionate about sharing his insights and excitement with people. He is Associate Teaching Professor at Center for Creative Learning (CCL), IIT Gandhinagar, whose goal is to create and foster makers who can take innovation to the next level. Towards this goal, CCL designs and offers deep and joyful learning experiences built around STEM toys and hands-on activities. The ultimate goal is to bring back the gleam in the eyes of students and teachers.\nBefore founding CCL, Manish worked at IUCAA’s Science Centre in Pune, with Padma Shri Arvind Gupta. In his previous avatar, he spent 19 years in the area of chip design at Synopsys (Bangalore & amp; Mountain View), serving as a Director of R&D and Scientist leading Low Power Simulation efforts, where he has 5 US patents.\nManish has a bachelor’s degree in Electrical Engineering from IIT Kanpur (1993) and has also finished a few courses at Stanford University.\n\n\n\n\n\n\n\n\n\nDates and Time\n\n\n\n\n\n6th and 7st April, 2019 • 10:00 AM to 1:00 PM, 3:00 PM to 5:00 PM"
  },
  {
    "objectID": "2021/01-noc21-cs92/index.html",
    "href": "2021/01-noc21-cs92/index.html",
    "title": "noc21-cs92 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/01-noc21-cs92/index.html#noc21-cs92.",
    "href": "2021/01-noc21-cs92/index.html#noc21-cs92.",
    "title": "noc21-cs92 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-CS610/index.html",
    "href": "2021/03-CS610/index.html",
    "title": "CS610 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2021/03-CS610/index.html#cs610.",
    "href": "2021/03-CS610/index.html#cs610.",
    "title": "CS610 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/01-ES214/index.html",
    "href": "2020/01-ES214/index.html",
    "title": "ES214 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/01-ES214/index.html#es214.",
    "href": "2020/01-ES214/index.html#es214.",
    "title": "ES214 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/03-ES242/index.html",
    "href": "2020/03-ES242/index.html",
    "title": "ES242 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2020/03-ES242/index.html#es242.",
    "href": "2020/03-ES242/index.html#es242.",
    "title": "ES242 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/03-ES112/index.html",
    "href": "2018/03-ES112/index.html",
    "title": "ES112 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/03-ES112/index.html#es112.",
    "href": "2018/03-ES112/index.html#es112.",
    "title": "ES112 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/03-MA607/index.html",
    "href": "2018/03-MA607/index.html",
    "title": "MA607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2018/03-MA607/index.html#ma607.",
    "href": "2018/03-MA607/index.html#ma607.",
    "title": "MA607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/01-CS321/index.html",
    "href": "2016/01-CS321/index.html",
    "title": "CS321 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/01-CS321/index.html#cs321.",
    "href": "2016/01-CS321/index.html#cs321.",
    "title": "CS321 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/03-CS607/index.html",
    "href": "2016/03-CS607/index.html",
    "title": "CS607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "2016/03-CS607/index.html#cs607.",
    "href": "2016/03-CS607/index.html#cs607.",
    "title": "CS607 | Aug-Nov 2023",
    "section": "",
    "text": "About the Course\n\n\n\n\n\nCourse summary.\n\n\n\n\n\n\n\n\n\nTarget Audience\n\n\n\n\n\nInformation about target audience.\n\n\n\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\nIndication of pre-requisites.\n\n\n\n\n\n\n\n\n\nReferences\n\n\n\n\n\nList of References\n\n\n\n\n\n\n\n\n\nTimings and Venue\n\n\n\n\n\nVenue: XYZ\nTimings:\n\n\n\n\n\n\n\n\n\nTAs and Office hours\n\n\n\n\n\nOffice Hours: By email.\nTAs:\nList of TAs.\n\n\n\n\n\n\n\n\n\nEvaluation policy\n\n\n\n\n\n\nEach of the three exams account for 20% of the grade.\nEach of the eleven tutorials will have a quiz worth 5 points. The total number of points you can earn through quizzes is capped at 40, and accounts for 40% of the grade.\nThere will be weekly assignments that are not graded but are recommended for practice.\n\n\n\n\n\n\n\n\n\n\nLogistics\n\n\n\n\n\n\nFor IITGN students, (pre-)register through IMS as usual.\nAll quizzes and exams will be on Mathmatize; please sign up here.\nFor announcements, please sign up on Google classroom with this link or use the invite code nzl3hkr.\nIf you are not from IITGN and are interested in taking up the course, then please send us an email.\n\n\n\n\n\nLecturesAssignmentsQuizzesExams\n\n\nAll slides for the initial lectures can be found here.\n\n\n  \n    \n\n\n\n\n\n\n\n\n\n\nDate\nLecture\nSlides\nNotes\nVideo\n\n\n\n\n02 Aug, 2023\n1.\n\n\n\n\n\n\n\n\n  \n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                10 Aug, 2023\n            \n            \n                \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items\n\n\n\n\n\n\n\n    \n        Issued\n        Assessment\n        Problems\n        Solutions\n        Due\n    \n    \n    \n                    \n            \n                TBA\n            \n            \n                Exam 1\n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n        \n    \n    \n\n\n\nNo matching items"
  },
  {
    "objectID": "other.html",
    "href": "other.html",
    "title": "Other Courses",
    "section": "",
    "text": "MG\nMartin Gardner Fan Club \n2024\n\n\n\n\n\nWEBSITE\nA Workshop on Making Personal Websites \n2024\n\n\n\n\n\n33\nThirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra \n2023\n\n\n\n\n\nGAMES\nComputational and Combinatorial Aspects of Games \n2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "other.html#ad-hoc-offerings",
    "href": "other.html#ad-hoc-offerings",
    "title": "Other Courses",
    "section": "",
    "text": "MG\nMartin Gardner Fan Club \n2024\n\n\n\n\n\nWEBSITE\nA Workshop on Making Personal Websites \n2024\n\n\n\n\n\n33\nThirty-three Miniatures: Mathematical and Algorithmic Applications of Linear Algebra \n2023\n\n\n\n\n\nGAMES\nComputational and Combinatorial Aspects of Games \n2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "short.html#short-courses",
    "href": "short.html#short-courses",
    "title": "Short Courses",
    "section": "",
    "text": "SC-CM\nA Short Course on Card Magic\nby Prof. Ramprasad Saptharishi \n2025\n\n\n\n\n\nCRYPTO\nA nano-course in modern cryptography\nby Prof. Venkata Koppula \n2023\n\n\n\n\n\n191014K02\nGIAN Course on Randomized Methods for Parameterized Algorithms\nby Prof. Daniel Lokshtanov \n2022\n\n\n\n\n\nSC 310\nVisual Science Communication\nby Dr. Ipsa Jain \n2022\n\n\n\n\n\nCertification\nDynamic Programming Bootcamp\nby Priyansh Agarwal \n2022\n\n\n\n\n\nSC 312\nCS Research 101\nby Shashank Srikant \n2022\n\n\n\n\n\nSC 302\nFundamentals of Science Communication\nby Siddharth Kankaria \n2022\n\n\n\n\n\nSC-235\nCards and Combinatorics\nby Manish Jain (and team) \n2019\n\n\n\n\n\n\n\nNo matching items"
  }
]